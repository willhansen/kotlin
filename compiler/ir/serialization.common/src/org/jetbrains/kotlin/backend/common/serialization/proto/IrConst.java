// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrConst}
 */
public final class IrConst extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)
    IrConstOrBuilder {
  // Use IrConst.newBuilder() to construct.
  private IrConst(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrConst(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final IrConst defaultInstance;
  public static IrConst getDefaultInstance() {
    return defaultInstance;
  }

  public IrConst getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private IrConst(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InkonstidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput, 1);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            konstueCase_ = 1;
            konstue_ = input.readBool();
            break;
          }
          case 16: {
            konstueCase_ = 2;
            konstue_ = input.readBool();
            break;
          }
          case 24: {
            konstueCase_ = 3;
            konstue_ = input.readInt32();
            break;
          }
          case 32: {
            konstueCase_ = 4;
            konstue_ = input.readInt32();
            break;
          }
          case 40: {
            konstueCase_ = 5;
            konstue_ = input.readInt32();
            break;
          }
          case 48: {
            konstueCase_ = 6;
            konstue_ = input.readInt32();
            break;
          }
          case 56: {
            konstueCase_ = 7;
            konstue_ = input.readInt64();
            break;
          }
          case 69: {
            konstueCase_ = 8;
            konstue_ = input.readFixed32();
            break;
          }
          case 73: {
            konstueCase_ = 9;
            konstue_ = input.readFixed64();
            break;
          }
          case 80: {
            konstueCase_ = 10;
            konstue_ = input.readInt32();
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InkonstidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InkonstidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<IrConst> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrConst>() {
    public IrConst parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InkonstidProtocolBufferException {
      return new IrConst(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrConst> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  private int konstueCase_ = 0;
  private java.lang.Object konstue_;
  public enum ValueCase
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
    NULL(1),
    BOOLEAN(2),
    CHAR(3),
    BYTE(4),
    SHORT(5),
    INT(6),
    LONG(7),
    FLOAT_BITS(8),
    DOUBLE_BITS(9),
    STRING(10),
    VALUE_NOT_SET(0);
    private int konstue = 0;
    private ValueCase(int konstue) {
      this.konstue = konstue;
    }
    public static ValueCase konstueOf(int konstue) {
      switch (konstue) {
        case 1: return NULL;
        case 2: return BOOLEAN;
        case 3: return CHAR;
        case 4: return BYTE;
        case 5: return SHORT;
        case 6: return INT;
        case 7: return LONG;
        case 8: return FLOAT_BITS;
        case 9: return DOUBLE_BITS;
        case 10: return STRING;
        case 0: return VALUE_NOT_SET;
        default: throw new java.lang.IllegalArgumentException(
          "Value is undefined for this oneof enum.");
      }
    }
    public int getNumber() {
      return this.konstue;
    }
  };

  public ValueCase
  getValueCase() {
    return ValueCase.konstueOf(
        konstueCase_);
  }

  public static final int NULL_FIELD_NUMBER = 1;
  /**
   * <code>optional bool null = 1;</code>
   */
  public boolean hasNull() {
    return konstueCase_ == 1;
  }
  /**
   * <code>optional bool null = 1;</code>
   */
  public boolean getNull() {
    if (konstueCase_ == 1) {
      return (java.lang.Boolean) konstue_;
    }
    return false;
  }

  public static final int BOOLEAN_FIELD_NUMBER = 2;
  /**
   * <code>optional bool boolean = 2;</code>
   */
  public boolean hasBoolean() {
    return konstueCase_ == 2;
  }
  /**
   * <code>optional bool boolean = 2;</code>
   */
  public boolean getBoolean() {
    if (konstueCase_ == 2) {
      return (java.lang.Boolean) konstue_;
    }
    return false;
  }

  public static final int CHAR_FIELD_NUMBER = 3;
  /**
   * <code>optional int32 char = 3;</code>
   */
  public boolean hasChar() {
    return konstueCase_ == 3;
  }
  /**
   * <code>optional int32 char = 3;</code>
   */
  public int getChar() {
    if (konstueCase_ == 3) {
      return (java.lang.Integer) konstue_;
    }
    return 0;
  }

  public static final int BYTE_FIELD_NUMBER = 4;
  /**
   * <code>optional int32 byte = 4;</code>
   */
  public boolean hasByte() {
    return konstueCase_ == 4;
  }
  /**
   * <code>optional int32 byte = 4;</code>
   */
  public int getByte() {
    if (konstueCase_ == 4) {
      return (java.lang.Integer) konstue_;
    }
    return 0;
  }

  public static final int SHORT_FIELD_NUMBER = 5;
  /**
   * <code>optional int32 short = 5;</code>
   */
  public boolean hasShort() {
    return konstueCase_ == 5;
  }
  /**
   * <code>optional int32 short = 5;</code>
   */
  public int getShort() {
    if (konstueCase_ == 5) {
      return (java.lang.Integer) konstue_;
    }
    return 0;
  }

  public static final int INT_FIELD_NUMBER = 6;
  /**
   * <code>optional int32 int = 6;</code>
   */
  public boolean hasInt() {
    return konstueCase_ == 6;
  }
  /**
   * <code>optional int32 int = 6;</code>
   */
  public int getInt() {
    if (konstueCase_ == 6) {
      return (java.lang.Integer) konstue_;
    }
    return 0;
  }

  public static final int LONG_FIELD_NUMBER = 7;
  /**
   * <code>optional int64 long = 7;</code>
   */
  public boolean hasLong() {
    return konstueCase_ == 7;
  }
  /**
   * <code>optional int64 long = 7;</code>
   */
  public long getLong() {
    if (konstueCase_ == 7) {
      return (java.lang.Long) konstue_;
    }
    return 0L;
  }

  public static final int FLOAT_BITS_FIELD_NUMBER = 8;
  /**
   * <code>optional fixed32 float_bits = 8;</code>
   *
   * <pre>
   * float/double is stored via fixed 32/64 bit konstue to avoid raw bit conversion
   * </pre>
   */
  public boolean hasFloatBits() {
    return konstueCase_ == 8;
  }
  /**
   * <code>optional fixed32 float_bits = 8;</code>
   *
   * <pre>
   * float/double is stored via fixed 32/64 bit konstue to avoid raw bit conversion
   * </pre>
   */
  public int getFloatBits() {
    if (konstueCase_ == 8) {
      return (java.lang.Integer) konstue_;
    }
    return 0;
  }

  public static final int DOUBLE_BITS_FIELD_NUMBER = 9;
  /**
   * <code>optional fixed64 double_bits = 9;</code>
   */
  public boolean hasDoubleBits() {
    return konstueCase_ == 9;
  }
  /**
   * <code>optional fixed64 double_bits = 9;</code>
   */
  public long getDoubleBits() {
    if (konstueCase_ == 9) {
      return (java.lang.Long) konstue_;
    }
    return 0L;
  }

  public static final int STRING_FIELD_NUMBER = 10;
  /**
   * <code>optional int32 string = 10;</code>
   */
  public boolean hasString() {
    return konstueCase_ == 10;
  }
  /**
   * <code>optional int32 string = 10;</code>
   */
  public int getString() {
    if (konstueCase_ == 10) {
      return (java.lang.Integer) konstue_;
    }
    return 0;
  }

  private void initFields() {
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (konstueCase_ == 1) {
      output.writeBool(
          1, (boolean)((java.lang.Boolean) konstue_));
    }
    if (konstueCase_ == 2) {
      output.writeBool(
          2, (boolean)((java.lang.Boolean) konstue_));
    }
    if (konstueCase_ == 3) {
      output.writeInt32(
          3, (int)((java.lang.Integer) konstue_));
    }
    if (konstueCase_ == 4) {
      output.writeInt32(
          4, (int)((java.lang.Integer) konstue_));
    }
    if (konstueCase_ == 5) {
      output.writeInt32(
          5, (int)((java.lang.Integer) konstue_));
    }
    if (konstueCase_ == 6) {
      output.writeInt32(
          6, (int)((java.lang.Integer) konstue_));
    }
    if (konstueCase_ == 7) {
      output.writeInt64(
          7, (long)((java.lang.Long) konstue_));
    }
    if (konstueCase_ == 8) {
      output.writeFixed32(
          8, (int)((java.lang.Integer) konstue_));
    }
    if (konstueCase_ == 9) {
      output.writeFixed64(
          9, (long)((java.lang.Long) konstue_));
    }
    if (konstueCase_ == 10) {
      output.writeInt32(
          10, (int)((java.lang.Integer) konstue_));
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (konstueCase_ == 1) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(
            1, (boolean)((java.lang.Boolean) konstue_));
    }
    if (konstueCase_ == 2) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeBoolSize(
            2, (boolean)((java.lang.Boolean) konstue_));
    }
    if (konstueCase_ == 3) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(
            3, (int)((java.lang.Integer) konstue_));
    }
    if (konstueCase_ == 4) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(
            4, (int)((java.lang.Integer) konstue_));
    }
    if (konstueCase_ == 5) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(
            5, (int)((java.lang.Integer) konstue_));
    }
    if (konstueCase_ == 6) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(
            6, (int)((java.lang.Integer) konstue_));
    }
    if (konstueCase_ == 7) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(
            7, (long)((java.lang.Long) konstue_));
    }
    if (konstueCase_ == 8) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeFixed32Size(
            8, (int)((java.lang.Integer) konstue_));
    }
    if (konstueCase_ == 9) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeFixed64Size(
            9, (long)((java.lang.Long) konstue_));
    }
    if (konstueCase_ == 10) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt32Size(
            10, (int)((java.lang.Integer) konstue_));
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InkonstidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InkonstidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InkonstidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InkonstidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrConst prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrConst}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrConst, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConstOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrConst.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      konstueCase_ = 0;
      konstue_ = null;
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConst getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrConst.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConst build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConst result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConst buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConst result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrConst(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (konstueCase_ == 1) {
        result.konstue_ = konstue_;
      }
      if (konstueCase_ == 2) {
        result.konstue_ = konstue_;
      }
      if (konstueCase_ == 3) {
        result.konstue_ = konstue_;
      }
      if (konstueCase_ == 4) {
        result.konstue_ = konstue_;
      }
      if (konstueCase_ == 5) {
        result.konstue_ = konstue_;
      }
      if (konstueCase_ == 6) {
        result.konstue_ = konstue_;
      }
      if (konstueCase_ == 7) {
        result.konstue_ = konstue_;
      }
      if (konstueCase_ == 8) {
        result.konstue_ = konstue_;
      }
      if (konstueCase_ == 9) {
        result.konstue_ = konstue_;
      }
      if (konstueCase_ == 10) {
        result.konstue_ = konstue_;
      }
      result.bitField0_ = to_bitField0_;
      result.konstueCase_ = konstueCase_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrConst other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrConst.getDefaultInstance()) return this;
      switch (other.getValueCase()) {
        case NULL: {
          setNull(other.getNull());
          break;
        }
        case BOOLEAN: {
          setBoolean(other.getBoolean());
          break;
        }
        case CHAR: {
          setChar(other.getChar());
          break;
        }
        case BYTE: {
          setByte(other.getByte());
          break;
        }
        case SHORT: {
          setShort(other.getShort());
          break;
        }
        case INT: {
          setInt(other.getInt());
          break;
        }
        case LONG: {
          setLong(other.getLong());
          break;
        }
        case FLOAT_BITS: {
          setFloatBits(other.getFloatBits());
          break;
        }
        case DOUBLE_BITS: {
          setDoubleBits(other.getDoubleBits());
          break;
        }
        case STRING: {
          setString(other.getString());
          break;
        }
        case VALUE_NOT_SET: {
          break;
        }
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrConst parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InkonstidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.IrConst) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int konstueCase_ = 0;
    private java.lang.Object konstue_;
    public ValueCase
        getValueCase() {
      return ValueCase.konstueOf(
          konstueCase_);
    }

    public Builder clearValue() {
      konstueCase_ = 0;
      konstue_ = null;
      return this;
    }

    private int bitField0_;

    /**
     * <code>optional bool null = 1;</code>
     */
    public boolean hasNull() {
      return konstueCase_ == 1;
    }
    /**
     * <code>optional bool null = 1;</code>
     */
    public boolean getNull() {
      if (konstueCase_ == 1) {
        return (java.lang.Boolean) konstue_;
      }
      return false;
    }
    /**
     * <code>optional bool null = 1;</code>
     */
    public Builder setNull(boolean konstue) {
      konstueCase_ = 1;
      konstue_ = konstue;
      
      return this;
    }
    /**
     * <code>optional bool null = 1;</code>
     */
    public Builder clearNull() {
      if (konstueCase_ == 1) {
        konstueCase_ = 0;
        konstue_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional bool boolean = 2;</code>
     */
    public boolean hasBoolean() {
      return konstueCase_ == 2;
    }
    /**
     * <code>optional bool boolean = 2;</code>
     */
    public boolean getBoolean() {
      if (konstueCase_ == 2) {
        return (java.lang.Boolean) konstue_;
      }
      return false;
    }
    /**
     * <code>optional bool boolean = 2;</code>
     */
    public Builder setBoolean(boolean konstue) {
      konstueCase_ = 2;
      konstue_ = konstue;
      
      return this;
    }
    /**
     * <code>optional bool boolean = 2;</code>
     */
    public Builder clearBoolean() {
      if (konstueCase_ == 2) {
        konstueCase_ = 0;
        konstue_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional int32 char = 3;</code>
     */
    public boolean hasChar() {
      return konstueCase_ == 3;
    }
    /**
     * <code>optional int32 char = 3;</code>
     */
    public int getChar() {
      if (konstueCase_ == 3) {
        return (java.lang.Integer) konstue_;
      }
      return 0;
    }
    /**
     * <code>optional int32 char = 3;</code>
     */
    public Builder setChar(int konstue) {
      konstueCase_ = 3;
      konstue_ = konstue;
      
      return this;
    }
    /**
     * <code>optional int32 char = 3;</code>
     */
    public Builder clearChar() {
      if (konstueCase_ == 3) {
        konstueCase_ = 0;
        konstue_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional int32 byte = 4;</code>
     */
    public boolean hasByte() {
      return konstueCase_ == 4;
    }
    /**
     * <code>optional int32 byte = 4;</code>
     */
    public int getByte() {
      if (konstueCase_ == 4) {
        return (java.lang.Integer) konstue_;
      }
      return 0;
    }
    /**
     * <code>optional int32 byte = 4;</code>
     */
    public Builder setByte(int konstue) {
      konstueCase_ = 4;
      konstue_ = konstue;
      
      return this;
    }
    /**
     * <code>optional int32 byte = 4;</code>
     */
    public Builder clearByte() {
      if (konstueCase_ == 4) {
        konstueCase_ = 0;
        konstue_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional int32 short = 5;</code>
     */
    public boolean hasShort() {
      return konstueCase_ == 5;
    }
    /**
     * <code>optional int32 short = 5;</code>
     */
    public int getShort() {
      if (konstueCase_ == 5) {
        return (java.lang.Integer) konstue_;
      }
      return 0;
    }
    /**
     * <code>optional int32 short = 5;</code>
     */
    public Builder setShort(int konstue) {
      konstueCase_ = 5;
      konstue_ = konstue;
      
      return this;
    }
    /**
     * <code>optional int32 short = 5;</code>
     */
    public Builder clearShort() {
      if (konstueCase_ == 5) {
        konstueCase_ = 0;
        konstue_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional int32 int = 6;</code>
     */
    public boolean hasInt() {
      return konstueCase_ == 6;
    }
    /**
     * <code>optional int32 int = 6;</code>
     */
    public int getInt() {
      if (konstueCase_ == 6) {
        return (java.lang.Integer) konstue_;
      }
      return 0;
    }
    /**
     * <code>optional int32 int = 6;</code>
     */
    public Builder setInt(int konstue) {
      konstueCase_ = 6;
      konstue_ = konstue;
      
      return this;
    }
    /**
     * <code>optional int32 int = 6;</code>
     */
    public Builder clearInt() {
      if (konstueCase_ == 6) {
        konstueCase_ = 0;
        konstue_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional int64 long = 7;</code>
     */
    public boolean hasLong() {
      return konstueCase_ == 7;
    }
    /**
     * <code>optional int64 long = 7;</code>
     */
    public long getLong() {
      if (konstueCase_ == 7) {
        return (java.lang.Long) konstue_;
      }
      return 0L;
    }
    /**
     * <code>optional int64 long = 7;</code>
     */
    public Builder setLong(long konstue) {
      konstueCase_ = 7;
      konstue_ = konstue;
      
      return this;
    }
    /**
     * <code>optional int64 long = 7;</code>
     */
    public Builder clearLong() {
      if (konstueCase_ == 7) {
        konstueCase_ = 0;
        konstue_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional fixed32 float_bits = 8;</code>
     *
     * <pre>
     * float/double is stored via fixed 32/64 bit konstue to avoid raw bit conversion
     * </pre>
     */
    public boolean hasFloatBits() {
      return konstueCase_ == 8;
    }
    /**
     * <code>optional fixed32 float_bits = 8;</code>
     *
     * <pre>
     * float/double is stored via fixed 32/64 bit konstue to avoid raw bit conversion
     * </pre>
     */
    public int getFloatBits() {
      if (konstueCase_ == 8) {
        return (java.lang.Integer) konstue_;
      }
      return 0;
    }
    /**
     * <code>optional fixed32 float_bits = 8;</code>
     *
     * <pre>
     * float/double is stored via fixed 32/64 bit konstue to avoid raw bit conversion
     * </pre>
     */
    public Builder setFloatBits(int konstue) {
      konstueCase_ = 8;
      konstue_ = konstue;
      
      return this;
    }
    /**
     * <code>optional fixed32 float_bits = 8;</code>
     *
     * <pre>
     * float/double is stored via fixed 32/64 bit konstue to avoid raw bit conversion
     * </pre>
     */
    public Builder clearFloatBits() {
      if (konstueCase_ == 8) {
        konstueCase_ = 0;
        konstue_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional fixed64 double_bits = 9;</code>
     */
    public boolean hasDoubleBits() {
      return konstueCase_ == 9;
    }
    /**
     * <code>optional fixed64 double_bits = 9;</code>
     */
    public long getDoubleBits() {
      if (konstueCase_ == 9) {
        return (java.lang.Long) konstue_;
      }
      return 0L;
    }
    /**
     * <code>optional fixed64 double_bits = 9;</code>
     */
    public Builder setDoubleBits(long konstue) {
      konstueCase_ = 9;
      konstue_ = konstue;
      
      return this;
    }
    /**
     * <code>optional fixed64 double_bits = 9;</code>
     */
    public Builder clearDoubleBits() {
      if (konstueCase_ == 9) {
        konstueCase_ = 0;
        konstue_ = null;
        
      }
      return this;
    }

    /**
     * <code>optional int32 string = 10;</code>
     */
    public boolean hasString() {
      return konstueCase_ == 10;
    }
    /**
     * <code>optional int32 string = 10;</code>
     */
    public int getString() {
      if (konstueCase_ == 10) {
        return (java.lang.Integer) konstue_;
      }
      return 0;
    }
    /**
     * <code>optional int32 string = 10;</code>
     */
    public Builder setString(int konstue) {
      konstueCase_ = 10;
      konstue_ = konstue;
      
      return this;
    }
    /**
     * <code>optional int32 string = 10;</code>
     */
    public Builder clearString() {
      if (konstueCase_ == 10) {
        konstueCase_ = 0;
        konstue_ = null;
        
      }
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)
  }

  static {
    defaultInstance = new IrConst(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)
}
