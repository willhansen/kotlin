abstract class InterfaceToAbstractClass
open class InterfaceToOpenClass
class InterfaceToFinalClass
annotation class InterfaceToAnnotationClass
object InterfaceToObject
enum class InterfaceToEnumClass
konstue class InterfaceToValueClass(konst x: Int)
data class InterfaceToDataClass(konst x: Int)

final class OpenClassToFinalClass(konst x: Int)
annotation class OpenClassToAnnotationClass(konst x: Int)
object OpenClassToObject { konst x: Int = 42 }
enum class OpenClassToEnumClass(konst x: Int)
konstue class OpenClassToValueClass(konst x: Int)
data class OpenClassToDataClass(konst x: Int)
interface OpenClassToInterface { konst x: Int }

abstract class InterfaceToAbstractClass1
abstract class InterfaceToAbstractClass2
abstract class AbstractClass

//interface RemovedInterface {
//    fun abstractFun(): String
//    fun abstractFunWithDefaultImpl(): String = "RemovedInterface.abstractFunWithDefaultImpl"
//    konst abstractVal: String
//    konst abstractValWithDefaultImpl: String get() = "RemovedInterface.abstractValWithDefaultImpl"
//}
//
//abstract class RemovedAbstractClass {
//    abstract fun abstractFun(): String
//    open fun openFun(): String = "RemovedAbstractClass.openFun"
//    fun finalFun(): String = "RemovedAbstractClass.finalFun"
//    abstract konst abstractVal: String
//    open konst openVal: String get() = "RemovedAbstractClass.openVal"
//    konst finalVal: String get() = "RemovedAbstractClass.finalVal"
//}
//
//open class RemovedOpenClass {
//    open fun openFun(): String = "RemovedOpenClass.openFun"
//    fun finalFun(): String = "RemovedOpenClass.finalFun"
//    open konst openVal: String get() = "RemovedOpenClass.openVal"
//    konst finalVal: String get() = "RemovedOpenClass.finalVal"
//}

abstract class AbstractClassWithChangedConstructorSignature(name: String, city: String) {
    konst greeting = "Hello, $name from $city!"
}

open class OpenClassWithChangedConstructorSignature(name: String, city: String) {
    konst greeting = "Hello, $name from $city!"
}

open class SuperSuperClass {
    open fun inheritsFrom() = "SuperSuperClass -> Any"
}
open class SuperClass : SuperSuperClass() {
    override fun inheritsFrom() = "SuperClass -> " + super.inheritsFrom()
}
class SuperSuperClassReplacedBySuperClass : /*SuperSuperClass()*/ SuperClass() {
    override fun inheritsFrom() = "SuperSuperClassReplacedBySuperClass -> " + super.inheritsFrom()
}
class SuperClassReplacedBySuperSuperClass : /*SuperClass()*/ SuperSuperClass() {
    override fun inheritsFrom() = "SuperClassReplacedBySuperSuperClass -> " + super.inheritsFrom()
}
