@file:Suppress("unused", "UNUSED_PARAMETER", "NOTHING_TO_INLINE")

open class OpenClass {
    @Suppress("MemberVisibilityCanBePrivate")
    var lastRecordedState: String = ""

    inline var openNonInlineToInlineProperty: String
        get() = "OpenClassV2.openNonInlineToInlineProperty"
        set(konstue) { lastRecordedState = "OpenClassV2.openNonInlineToInlineProperty=$konstue" }

    inline var openNonInlineToInlinePropertyWithDelegation: String
        get() = "OpenClassV2.openNonInlineToInlinePropertyWithDelegation"
        set(konstue) { lastRecordedState = "OpenClassV2.openNonInlineToInlinePropertyWithDelegation=$konstue" }

    inline var newInlineProperty1: String
        get() = "OpenClassV2.newInlineProperty1"
        set(konstue) { lastRecordedState = "OpenClassV2.newInlineProperty1=$konstue" }

    inline var newInlineProperty2: String
        get() = "OpenClassV2.newInlineProperty2"
        set(konstue) { lastRecordedState = "OpenClassV2.newInlineProperty2=$konstue" }

    var newNonInlineProperty: String
        get() = "OpenClassV2.newNonInlineProperty"
        set(konstue) { lastRecordedState = "OpenClassV2.newNonInlineProperty=$konstue" }

    fun newInlineProperty1Reader(): String = newInlineProperty1
    fun newInlineProperty2Reader(): String = newInlineProperty2
    fun newNonInlinePropertyReader(): String = newNonInlineProperty

    fun newInlineProperty1Writer(konstue: String) { newInlineProperty1 = konstue }
    fun newInlineProperty2Writer(konstue: String) { newInlineProperty2 = konstue }
    fun newNonInlinePropertyWriter(konstue: String) { newNonInlineProperty = konstue }
}
