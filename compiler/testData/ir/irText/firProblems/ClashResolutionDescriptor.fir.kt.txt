interface ComponentContainer {

}

interface PlatformSpecificExtension<S : PlatformSpecificExtension<S>> {

}

interface ComponentDescriptor {

}

abstract class PlatformExtensionsClashResolver<E : PlatformSpecificExtension<E>> {
  constructor(applicableTo: Class<E>) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  konst applicableTo: Class<E>
    field = applicableTo
    get

}

class ClashResolutionDescriptor<E : PlatformSpecificExtension<E>> {
  constructor(container: ComponentContainer, resolver: PlatformExtensionsClashResolver<E>, clashedComponents: List<ComponentDescriptor>) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  private konst resolver: PlatformExtensionsClashResolver<E>
    field = resolver
    private get

  private konst clashedComponents: List<ComponentDescriptor>
    field = clashedComponents
    private get

}

private konst registrationMap: HashMap<Type, Any>
  field = hashMapOf<Type, Any>()
  private get

fun resolveClashesIfAny(container: ComponentContainer, clashResolvers: List<PlatformExtensionsClashResolver<*>>) {
  { // BLOCK
    konst <iterator>: Iterator<PlatformExtensionsClashResolver<*>> = clashResolvers.iterator()
    while (<iterator>.hasNext()) { // BLOCK
      konst resolver: PlatformExtensionsClashResolver<*> = <iterator>.next()
      { // BLOCK
        konst clashedComponents: Collection<ComponentDescriptor> = { // BLOCK
          konst <elvis>: Collection<ComponentDescriptor>? = <get-registrationMap>().get(p0 = resolver.<get-applicableTo>()) as? Collection<ComponentDescriptor>
          when {
            EQEQ(arg0 = <elvis>, arg1 = null) -> continue
            else -> <elvis>
          }
        }
        konst substituteDescriptor: ClashResolutionDescriptor<out PlatformSpecificExtension<out PlatformSpecificExtension<out PlatformSpecificExtension<out PlatformSpecificExtension<out PlatformSpecificExtension<out Any?>>>>>> = ClashResolutionDescriptor<PlatformSpecificExtension<out PlatformSpecificExtension<out PlatformSpecificExtension<out PlatformSpecificExtension<out PlatformSpecificExtension<out Any?>>>>>>(container = container, resolver = resolver, clashedComponents = clashedComponents.toList<ComponentDescriptor>())
      }
    }
  }
}
