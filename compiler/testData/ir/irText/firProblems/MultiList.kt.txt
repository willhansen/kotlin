data class Some<T : Any?> {
  constructor(konstue: T) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  konst konstue: T
    field = konstue
    get

  operator fun component1(): T {
    return <this>.#konstue
  }

  fun copy(konstue: T = <this>.#konstue): Some<T> {
    return Some<T>(konstue = konstue)
  }

  override fun toString(): String {
    return "Some(" + "konstue=" + <this>.#konstue + ")"
  }

  override fun hashCode(): Int {
    return when {
      EQEQ(arg0 = <this>.#konstue, arg1 = null) -> 0
      else -> <this>.#konstue.hashCode()
    }
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is Some<T> -> return false
    }
    konst tmp0_other_with_cast: Some<T> = other as Some<T>
    when {
      EQEQ(arg0 = <this>.#konstue, arg1 = tmp0_other_with_cast.#konstue).not() -> return false
    }
    return true
  }

}

interface MyList<T : Any?> : List<Some<T>> {

}

open class SomeList<T : Any?> : MyList<T>, ArrayList<Some<T>> {
  constructor() /* primary */ {
    super/*ArrayList*/<@FlexibleNullability Some<T>?>()
    /* <init>() */

  }

}

class FinalList : SomeList<String> {
  constructor() /* primary */ {
    super/*SomeList*/<String>()
    /* <init>() */

  }

}
