abstract class Visibility {
  constructor(name: String, isPublicAPI: Boolean) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  konst name: String
    field = name
    get

  konst isPublicAPI: Boolean
    field = isPublicAPI
    get

  open konst internalDisplayName: String
    open get(): String {
      return <this>.<get-name>()
    }

  open konst externalDisplayName: String
    open get(): String {
      return <this>.<get-internalDisplayName>()
    }

  abstract fun mustCheckInImports(): Boolean

}

object Visibilities {
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  object Private : Visibility {
    private constructor() /* primary */ {
      super/*Visibility*/(name = "private", isPublicAPI = false)
      /* <init>() */

    }

    override fun mustCheckInImports(): Boolean {
      return true
    }

  }

  object PrivateToThis : Visibility {
    private constructor() /* primary */ {
      super/*Visibility*/(name = "private_to_this", isPublicAPI = false)
      /* <init>() */

    }

    override konst internalDisplayName: String
      override get(): String {
        return "private/*private to this*/"
      }

    override fun mustCheckInImports(): Boolean {
      return true
    }

  }

  object Protected : Visibility {
    private constructor() /* primary */ {
      super/*Visibility*/(name = "protected", isPublicAPI = true)
      /* <init>() */

    }

    override fun mustCheckInImports(): Boolean {
      return false
    }

  }

  object Internal : Visibility {
    private constructor() /* primary */ {
      super/*Visibility*/(name = "internal", isPublicAPI = false)
      /* <init>() */

    }

    override fun mustCheckInImports(): Boolean {
      return true
    }

  }

  object Public : Visibility {
    private constructor() /* primary */ {
      super/*Visibility*/(name = "public", isPublicAPI = true)
      /* <init>() */

    }

    override fun mustCheckInImports(): Boolean {
      return false
    }

  }

  object Local : Visibility {
    private constructor() /* primary */ {
      super/*Visibility*/(name = "local", isPublicAPI = false)
      /* <init>() */

    }

    override fun mustCheckInImports(): Boolean {
      return true
    }

  }

  object Inherited : Visibility {
    private constructor() /* primary */ {
      super/*Visibility*/(name = "inherited", isPublicAPI = false)
      /* <init>() */

    }

    override fun mustCheckInImports(): Boolean {
      throw IllegalStateException(p0 = "This method shouldn't be invoked for INHERITED visibility")
    }

  }

  object InvisibleFake : Visibility {
    private constructor() /* primary */ {
      super/*Visibility*/(name = "invisible_fake", isPublicAPI = false)
      /* <init>() */

    }

    override fun mustCheckInImports(): Boolean {
      return true
    }

    override konst externalDisplayName: String
      override get(): String {
        return "invisible (private in a supertype)"
      }

  }

  object Unknown : Visibility {
    private constructor() /* primary */ {
      super/*Visibility*/(name = "unknown", isPublicAPI = false)
      /* <init>() */

    }

    override fun mustCheckInImports(): Boolean {
      throw IllegalStateException(p0 = "This method shouldn't be invoked for UNKNOWN visibility")
    }

  }

  private konst ORDERED_VISIBILITIES: Map<Visibility, Int>
    field = buildMap<Visibility, Int>(builderAction = local fun MutableMap<Visibility, Int>.<anonymous>() {
      $this$buildMap.put(key = PrivateToThis, konstue = 0) /*~> Unit */
      $this$buildMap.put(key = Private, konstue = 0) /*~> Unit */
      $this$buildMap.put(key = Internal, konstue = 1) /*~> Unit */
      $this$buildMap.put(key = Protected, konstue = 1) /*~> Unit */
      $this$buildMap.put(key = Public, konstue = 2) /*~> Unit */
    }
)
    private get

}
