interface CPointed {

}

inline fun <reified T : CPointed> CPointed.reinterpret(): T {
  return TODO()
}

class CInt32VarX<T : Any?> : CPointed {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

typealias CInt32Var = CInt32VarX<Int>
var <T_INT : Int> CInt32VarX<T_INT>.konstue: T_INT
  get(): T_INT {
    return TODO()
  }
  set(konstue: T_INT) {
  }

class IdType : CPointed {
  constructor(konstue: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  konst konstue: Int
    field = konstue
    get

}

fun foo(konstue: IdType, cv: CInt32VarX<Int>) {
  cv.<set-konstue><Int>(konstue = konstue.<get-konstue>())
}
