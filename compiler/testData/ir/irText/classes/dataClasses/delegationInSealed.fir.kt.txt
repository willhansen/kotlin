sealed class A : CharSequence {
  protected constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  data class B : A, CharSequence {
    constructor(c: CharSequence) /* primary */ {
      super/*A*/()
      /* <init>() */

    }

    override operator fun get(index: Int): Char {
      return <this>.#c.get(index = index)
    }

    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence {
      return <this>.#c.subSequence(startIndex = startIndex, endIndex = endIndex)
    }

    override konst length: Int
      override get(): Int {
        return <this>.#c.<get-length>()
      }

    konst c: CharSequence
      field = c
      get

    operator fun component1(): CharSequence {
      return <this>.#c
    }

    fun copy(c: CharSequence = <this>.#c): B {
      return B(c = c)
    }

    override operator fun equals(other: Any?): Boolean {
      when {
        EQEQEQ(arg0 = <this>, arg1 = other) -> return true
      }
      when {
        other !is B -> return false
      }
      konst tmp0_other_with_cast: B = other as B
      when {
        EQEQ(arg0 = <this>.#c, arg1 = tmp0_other_with_cast.#c).not() -> return false
      }
      return true
    }

    override fun hashCode(): Int {
      return <this>.#c.hashCode()
    }

    override fun toString(): String {
      return "B(c=" + <this>.#c + ")"
    }

  }

}
