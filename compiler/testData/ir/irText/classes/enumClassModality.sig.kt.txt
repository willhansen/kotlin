// CHECK:
//   Mangled name: TestAbstractEnum1
//   Public signature: /TestAbstractEnum1|null[0]
abstract enum class TestAbstractEnum1 : Enum<TestAbstractEnum1> {
  // CHECK:
  //   Mangled name: TestAbstractEnum1#<init>(){}
  //   Public signature: /TestAbstractEnum1.<init>|-5645683436151566731[0]
  private constructor() /* primary */
  // CHECK:
  //   Mangled name: TestAbstractEnum1.X1
  //   Public signature: /TestAbstractEnum1.X1|null[0]

  X1
  // CHECK:
  //   Mangled name: TestAbstractEnum1.X1
  //   Public signature: /TestAbstractEnum1.X1.<EEC>|null[0]
  private enum entry class X1 : TestAbstractEnum1 {
    // CHECK:
    //   Mangled name: TestAbstractEnum1.X1#<init>(){}
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.<init>|-5645683436151566731[0]
    private constructor() /* primary */
    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum1.X1#clone(){}kotlin.Any
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.clone|-6903128697527593263[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum1.X1#compareTo(TestAbstractEnum1){}
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.compareTo|745390484677491369[0]
    protected /* fake */ override fun clone(): Any

    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum1.X1#compareTo(TestAbstractEnum1){}kotlin.Int
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.compareTo|4568850831400093628[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum1.X1#equals(kotlin.Any?){}
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.equals|4638265728071529943[0]
    /* fake */ override operator fun compareTo(other: TestAbstractEnum1): Int

    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum1.X1#equals(kotlin.Any?){}kotlin.Boolean
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.equals|722809408929142791[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum1.X1#hashCode(){}
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.hashCode|3409210261493131192[0]
    /* fake */ override operator fun equals(other: Any?): Boolean

    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum1.X1#hashCode(){}kotlin.Int
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.hashCode|-8048879360829830756[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum1.X1#toString(){}
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.toString|-1522858123163872138[0]
    /* fake */ override fun hashCode(): Int

    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum1.X1#toString(){}kotlin.String
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.toString|6958853723545266802[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum1.X1#foo(){}
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.foo|-1041209573719867811[0]
    /* fake */ override fun toString(): String

    // CHECK:
    //   Mangled name: TestAbstractEnum1.X1#foo(){}
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.foo|-1041209573719867811[0]
    override fun foo(): Unit

    // CHECK:
    //   Mangled name: TestAbstractEnum1.X1{}name
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.name|4231860309499509769[0]
    /* fake */ override konst name: String
      // CHECK JVM_IR:
      //   Mangled name: TestAbstractEnum1.X1#<get-name>(){}kotlin.String
      //   Public signature: /TestAbstractEnum1.X1.<EEC>.name.<get-name>|-8006111524522882650[0]
      // CHECK JS_IR NATIVE:
      //   Mangled name: TestAbstractEnum1.X1{}ordinal
      //   Public signature: /TestAbstractEnum1.X1.<EEC>.ordinal|1912745122988592376[0]
      /* fake */ override get(): String

    // CHECK:
    //   Mangled name: TestAbstractEnum1.X1{}ordinal
    //   Public signature: /TestAbstractEnum1.X1.<EEC>.ordinal|1912745122988592376[0]
    /* fake */ override konst ordinal: Int
      // CHECK JVM_IR:
      //   Mangled name: TestAbstractEnum1.X1#<get-ordinal>(){}kotlin.Int
      //   Public signature: /TestAbstractEnum1.X1.<EEC>.ordinal.<get-ordinal>|-6902664390061762634[0]
      // CHECK JS_IR NATIVE:
      //   Mangled name: TestAbstractEnum1#konstueOf#static(kotlin.String){}
      //   Public signature: /TestAbstractEnum1.konstueOf|-4683474617854611729[0]
      /* fake */ override get(): Int

  }

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum1#konstueOf#static(kotlin.String){}TestAbstractEnum1
  //   Public signature: /TestAbstractEnum1.konstueOf|1031102409939396944[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum1#konstues#static(){}
  //   Public signature: /TestAbstractEnum1.konstues|-8715569000920726747[0]
  fun konstueOf(konstue: String): TestAbstractEnum1

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum1#konstues#static(){}kotlin.Array<TestAbstractEnum1>
  //   Public signature: /TestAbstractEnum1.konstues|2421071688454673326[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum1#compareTo(TestAbstractEnum1){}
  //   Public signature: /TestAbstractEnum1.compareTo|745390484677491369[0]
  fun konstues(): Array<TestAbstractEnum1>

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum1#clone(){}kotlin.Any
  //   Public signature: /TestAbstractEnum1.clone|-6903128697527593263[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum1#equals(kotlin.Any?){}
  //   Public signature: /TestAbstractEnum1.equals|4638265728071529943[0]
  protected /* fake */ override fun clone(): Any

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum1#compareTo(TestAbstractEnum1){}kotlin.Int
  //   Public signature: /TestAbstractEnum1.compareTo|4568850831400093628[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum1#hashCode(){}
  //   Public signature: /TestAbstractEnum1.hashCode|3409210261493131192[0]
  /* fake */ override operator fun compareTo(other: TestAbstractEnum1): Int

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum1#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /TestAbstractEnum1.equals|722809408929142791[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum1#toString(){}
  //   Public signature: /TestAbstractEnum1.toString|-1522858123163872138[0]
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum1#hashCode(){}kotlin.Int
  //   Public signature: /TestAbstractEnum1.hashCode|-8048879360829830756[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum1#foo(){}
  //   Public signature: /TestAbstractEnum1.foo|-1041209573719867811[0]
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum1#toString(){}kotlin.String
  //   Public signature: /TestAbstractEnum1.toString|6958853723545266802[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum1#static{}entries
  //   Public signature: /TestAbstractEnum1.entries|-5134227801081826149[0]
  /* fake */ override fun toString(): String

  // CHECK:
  //   Mangled name: TestAbstractEnum1#foo(){}
  //   Public signature: /TestAbstractEnum1.foo|-1041209573719867811[0]
  abstract fun foo(): Unit

  // CHECK:
  //   Mangled name: TestAbstractEnum1#static{}entries
  //   Public signature: /TestAbstractEnum1.entries|-5134227801081826149[0]
  konst entries: EnumEntries<TestAbstractEnum1>
    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum1#<get-entries>#static(){}kotlin.enums.EnumEntries<TestAbstractEnum1>
    //   Public signature: /TestAbstractEnum1.entries.<get-entries>|-62644859580206762[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum1#<get-name>(){}
    //   Public signature: /TestAbstractEnum1.name.<get-name>|5879344792307730109[0]
    get(): EnumEntries<TestAbstractEnum1>

  // CHECK:
  //   Mangled name: TestAbstractEnum1{}name
  //   Public signature: /TestAbstractEnum1.name|4231860309499509769[0]
  /* fake */ override konst name: String
    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum1#<get-name>(){}kotlin.String
    //   Public signature: /TestAbstractEnum1.name.<get-name>|-8006111524522882650[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum1#<get-ordinal>(){}
    //   Public signature: /TestAbstractEnum1.ordinal.<get-ordinal>|8409904226035914023[0]
    /* fake */ override get(): String

  // CHECK:
  //   Mangled name: TestAbstractEnum1{}ordinal
  //   Public signature: /TestAbstractEnum1.ordinal|1912745122988592376[0]
  /* fake */ override konst ordinal: Int
    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum1#<get-ordinal>(){}kotlin.Int
    //   Public signature: /TestAbstractEnum1.ordinal.<get-ordinal>|-6902664390061762634[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum2#<init>(){}
    //   Public signature: /TestAbstractEnum2.<init>|-5645683436151566731[0]
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: TestAbstractEnum2
//   Public signature: /TestAbstractEnum2|null[0]
abstract enum class TestAbstractEnum2 : Enum<TestAbstractEnum2>, IFoo {
  // CHECK:
  //   Mangled name: TestAbstractEnum2#<init>(){}
  //   Public signature: /TestAbstractEnum2.<init>|-5645683436151566731[0]
  private constructor() /* primary */
  // CHECK:
  //   Mangled name: TestAbstractEnum2.X1
  //   Public signature: /TestAbstractEnum2.X1|null[0]

  X1
  // CHECK:
  //   Mangled name: TestAbstractEnum2.X1
  //   Public signature: /TestAbstractEnum2.X1.<EEC>|null[0]
  private enum entry class X1 : TestAbstractEnum2 {
    // CHECK:
    //   Mangled name: TestAbstractEnum2.X1#<init>(){}
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.<init>|-5645683436151566731[0]
    private constructor() /* primary */
    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum2.X1#clone(){}kotlin.Any
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.clone|-6903128697527593263[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum2.X1#hashCode(){}
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.hashCode|3409210261493131192[0]
    protected /* fake */ override fun clone(): Any

    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum2.X1#compareTo(TestAbstractEnum2){}kotlin.Int
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.compareTo|1400147308358154853[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum2.X1#toString(){}
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.toString|-1522858123163872138[0]
    /* fake */ override operator fun compareTo(other: TestAbstractEnum2): Int

    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum2.X1#equals(kotlin.Any?){}kotlin.Boolean
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.equals|722809408929142791[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum2.X1#foo(){}
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.foo|-1041209573719867811[0]
    /* fake */ override operator fun equals(other: Any?): Boolean

    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum2.X1#hashCode(){}kotlin.Int
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.hashCode|-8048879360829830756[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum2.X1{}name
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.name|4231860309499509769[0]
    /* fake */ override fun hashCode(): Int

    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum2.X1#toString(){}kotlin.String
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.toString|6958853723545266802[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum2.X1#<get-name>(){}
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.name.<get-name>|5879344792307730109[0]
    /* fake */ override fun toString(): String

    // CHECK:
    //   Mangled name: TestAbstractEnum2.X1#foo(){}
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.foo|-1041209573719867811[0]
    override fun foo(): Unit

    // CHECK:
    //   Mangled name: TestAbstractEnum2.X1{}name
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.name|4231860309499509769[0]
    /* fake */ override konst name: String
      // CHECK JVM_IR:
      //   Mangled name: TestAbstractEnum2.X1#<get-name>(){}kotlin.String
      //   Public signature: /TestAbstractEnum2.X1.<EEC>.name.<get-name>|-8006111524522882650[0]
      // CHECK JS_IR NATIVE:
      //   Mangled name: TestAbstractEnum2#konstueOf#static(kotlin.String){}
      //   Public signature: /TestAbstractEnum2.konstueOf|-4683474617854611729[0]
      /* fake */ override get(): String

    // CHECK:
    //   Mangled name: TestAbstractEnum2.X1{}ordinal
    //   Public signature: /TestAbstractEnum2.X1.<EEC>.ordinal|1912745122988592376[0]
    /* fake */ override konst ordinal: Int
      // CHECK JVM_IR:
      //   Mangled name: TestAbstractEnum2.X1#<get-ordinal>(){}kotlin.Int
      //   Public signature: /TestAbstractEnum2.X1.<EEC>.ordinal.<get-ordinal>|-6902664390061762634[0]
      // CHECK JS_IR NATIVE:
      //   Mangled name: TestAbstractEnum2#compareTo(TestAbstractEnum2){}
      //   Public signature: /TestAbstractEnum2.compareTo|-5741102265556364706[0]
      /* fake */ override get(): Int

  }

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum2#konstueOf#static(kotlin.String){}TestAbstractEnum2
  //   Public signature: /TestAbstractEnum2.konstueOf|-3718310282234049027[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum2#equals(kotlin.Any?){}
  //   Public signature: /TestAbstractEnum2.equals|4638265728071529943[0]
  fun konstueOf(konstue: String): TestAbstractEnum2

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum2#konstues#static(){}kotlin.Array<TestAbstractEnum2>
  //   Public signature: /TestAbstractEnum2.konstues|-1014141399495495627[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum2#foo(){}
  //   Public signature: /TestAbstractEnum2.foo|-1041209573719867811[0]
  fun konstues(): Array<TestAbstractEnum2>

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum2#clone(){}kotlin.Any
  //   Public signature: /TestAbstractEnum2.clone|-6903128697527593263[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum2#hashCode(){}
  //   Public signature: /TestAbstractEnum2.hashCode|3409210261493131192[0]
  protected /* fake */ override fun clone(): Any

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum2#compareTo(TestAbstractEnum2){}kotlin.Int
  //   Public signature: /TestAbstractEnum2.compareTo|1400147308358154853[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum2#toString(){}
  //   Public signature: /TestAbstractEnum2.toString|-1522858123163872138[0]
  /* fake */ override operator fun compareTo(other: TestAbstractEnum2): Int

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum2#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /TestAbstractEnum2.equals|722809408929142791[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum2#static{}entries
  //   Public signature: /TestAbstractEnum2.entries|-5134227801081826149[0]
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK:
  //   Mangled name: TestAbstractEnum2#foo(){}
  //   Public signature: /TestAbstractEnum2.foo|-1041209573719867811[0]
  abstract /* fake */ override fun foo(): Unit

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum2#hashCode(){}kotlin.Int
  //   Public signature: /TestAbstractEnum2.hashCode|-8048879360829830756[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum2{}name
  //   Public signature: /TestAbstractEnum2.name|4231860309499509769[0]
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: TestAbstractEnum2#toString(){}kotlin.String
  //   Public signature: /TestAbstractEnum2.toString|6958853723545266802[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestAbstractEnum2#<get-name>(){}
  //   Public signature: /TestAbstractEnum2.name.<get-name>|5879344792307730109[0]
  /* fake */ override fun toString(): String

  // CHECK:
  //   Mangled name: TestAbstractEnum2#static{}entries
  //   Public signature: /TestAbstractEnum2.entries|-5134227801081826149[0]
  konst entries: EnumEntries<TestAbstractEnum2>
    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum2#<get-entries>#static(){}kotlin.enums.EnumEntries<TestAbstractEnum2>
    //   Public signature: /TestAbstractEnum2.entries.<get-entries>|8627121999159520047[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAbstractEnum2#<get-ordinal>(){}
    //   Public signature: /TestAbstractEnum2.ordinal.<get-ordinal>|8409904226035914023[0]
    get(): EnumEntries<TestAbstractEnum2>

  // CHECK:
  //   Mangled name: TestAbstractEnum2{}name
  //   Public signature: /TestAbstractEnum2.name|4231860309499509769[0]
  /* fake */ override konst name: String
    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum2#<get-name>(){}kotlin.String
    //   Public signature: /TestAbstractEnum2.name.<get-name>|-8006111524522882650[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestFinalEnum1#<init>(){}
    //   Public signature: /TestFinalEnum1.<init>|-5645683436151566731[0]
    /* fake */ override get(): String

  // CHECK:
  //   Mangled name: TestAbstractEnum2{}ordinal
  //   Public signature: /TestAbstractEnum2.ordinal|1912745122988592376[0]
  /* fake */ override konst ordinal: Int
    // CHECK JVM_IR:
    //   Mangled name: TestAbstractEnum2#<get-ordinal>(){}kotlin.Int
    //   Public signature: /TestAbstractEnum2.ordinal.<get-ordinal>|-6902664390061762634[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestFinalEnum1#konstueOf#static(kotlin.String){}
    //   Public signature: /TestFinalEnum1.konstueOf|-4683474617854611729[0]
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: TestFinalEnum1
//   Public signature: /TestFinalEnum1|null[0]
enum class TestFinalEnum1 : Enum<TestFinalEnum1> {
  // CHECK:
  //   Mangled name: TestFinalEnum1#<init>(){}
  //   Public signature: /TestFinalEnum1.<init>|-5645683436151566731[0]
  private constructor() /* primary */
  // CHECK:
  //   Mangled name: TestFinalEnum1.X1
  //   Public signature: /TestFinalEnum1.X1|null[0]
  X1

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum1#konstueOf#static(kotlin.String){}TestFinalEnum1
  //   Public signature: /TestFinalEnum1.konstueOf|-6956480038617460042[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum1#hashCode(){}
  //   Public signature: /TestFinalEnum1.hashCode|3409210261493131192[0]
  fun konstueOf(konstue: String): TestFinalEnum1

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum1#konstues#static(){}kotlin.Array<TestFinalEnum1>
  //   Public signature: /TestFinalEnum1.konstues|-2181276672467921798[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum1#toString(){}
  //   Public signature: /TestFinalEnum1.toString|-1522858123163872138[0]
  fun konstues(): Array<TestFinalEnum1>

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum1#clone(){}kotlin.Any
  //   Public signature: /TestFinalEnum1.clone|-6903128697527593263[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum1#static{}entries
  //   Public signature: /TestFinalEnum1.entries|-5134227801081826149[0]
  protected /* fake */ override fun clone(): Any

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum1#compareTo(TestFinalEnum1){}kotlin.Int
  //   Public signature: /TestFinalEnum1.compareTo|3720004550586571290[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum1#<get-entries>#static(){}
  //   Public signature: /TestFinalEnum1.entries.<get-entries>|-6068527377476727729[0]
  /* fake */ override operator fun compareTo(other: TestFinalEnum1): Int

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum1#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /TestFinalEnum1.equals|722809408929142791[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum1{}name
  //   Public signature: /TestFinalEnum1.name|4231860309499509769[0]
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum1#hashCode(){}kotlin.Int
  //   Public signature: /TestFinalEnum1.hashCode|-8048879360829830756[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum1#<get-name>(){}
  //   Public signature: /TestFinalEnum1.name.<get-name>|5879344792307730109[0]
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum1#toString(){}kotlin.String
  //   Public signature: /TestFinalEnum1.toString|6958853723545266802[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum1{}ordinal
  //   Public signature: /TestFinalEnum1.ordinal|1912745122988592376[0]
  /* fake */ override fun toString(): String

  // CHECK:
  //   Mangled name: TestFinalEnum1#static{}entries
  //   Public signature: /TestFinalEnum1.entries|-5134227801081826149[0]
  konst entries: EnumEntries<TestFinalEnum1>
    // CHECK JVM_IR:
    //   Mangled name: TestFinalEnum1#<get-entries>#static(){}kotlin.enums.EnumEntries<TestFinalEnum1>
    //   Public signature: /TestFinalEnum1.entries.<get-entries>|7793286316162597646[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestFinalEnum2
    //   Public signature: /TestFinalEnum2|null[0]
    get(): EnumEntries<TestFinalEnum1>

  // CHECK:
  //   Mangled name: TestFinalEnum1{}name
  //   Public signature: /TestFinalEnum1.name|4231860309499509769[0]
  /* fake */ override konst name: String
    // CHECK JVM_IR:
    //   Mangled name: TestFinalEnum1#<get-name>(){}kotlin.String
    //   Public signature: /TestFinalEnum1.name.<get-name>|-8006111524522882650[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestFinalEnum2#<get-x>(){}
    //   Public signature: /TestFinalEnum2.x.<get-x>|1482705010654679335[0]
    /* fake */ override get(): String

  // CHECK:
  //   Mangled name: TestFinalEnum1{}ordinal
  //   Public signature: /TestFinalEnum1.ordinal|1912745122988592376[0]
  /* fake */ override konst ordinal: Int
    // CHECK JVM_IR:
    //   Mangled name: TestFinalEnum1#<get-ordinal>(){}kotlin.Int
    //   Public signature: /TestFinalEnum1.ordinal.<get-ordinal>|-6902664390061762634[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestFinalEnum2.X1
    //   Public signature: /TestFinalEnum2.X1|null[0]
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: TestFinalEnum2
//   Public signature: /TestFinalEnum2|null[0]
enum class TestFinalEnum2 : Enum<TestFinalEnum2> {
  // CHECK:
  //   Mangled name: TestFinalEnum2{}x
  //   Public signature: /TestFinalEnum2.x|-8060530855978347579[0]
  konst x: Int
    // CHECK JVM_IR:
    //   Mangled name: TestFinalEnum2#<get-x>(){}kotlin.Int
    //   Public signature: /TestFinalEnum2.x.<get-x>|4966956098150895696[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestFinalEnum2#compareTo(TestFinalEnum2){}
    //   Public signature: /TestFinalEnum2.compareTo|-1005502274053294622[0]
    get

  // CHECK:
  //   Mangled name: TestFinalEnum2#<init>(kotlin.Int){}
  //   Public signature: /TestFinalEnum2.<init>|-5182794243525578284[0]
  private constructor(x: Int) /* primary */
  // CHECK:
  //   Mangled name: TestFinalEnum2.X1
  //   Public signature: /TestFinalEnum2.X1|null[0]
  X1

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum2#konstueOf#static(kotlin.String){}TestFinalEnum2
  //   Public signature: /TestFinalEnum2.konstueOf|-780401890225518867[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum2#toString(){}
  //   Public signature: /TestFinalEnum2.toString|-1522858123163872138[0]
  fun konstueOf(konstue: String): TestFinalEnum2

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum2#konstues#static(){}kotlin.Array<TestFinalEnum2>
  //   Public signature: /TestFinalEnum2.konstues|2453561414820060883[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum2#static{}entries
  //   Public signature: /TestFinalEnum2.entries|-5134227801081826149[0]
  fun konstues(): Array<TestFinalEnum2>

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum2#clone(){}kotlin.Any
  //   Public signature: /TestFinalEnum2.clone|-6903128697527593263[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum2#<get-entries>#static(){}
  //   Public signature: /TestFinalEnum2.entries.<get-entries>|-6068527377476727729[0]
  protected /* fake */ override fun clone(): Any

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum2#compareTo(TestFinalEnum2){}kotlin.Int
  //   Public signature: /TestFinalEnum2.compareTo|5381880420496293798[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum2{}name
  //   Public signature: /TestFinalEnum2.name|4231860309499509769[0]
  /* fake */ override operator fun compareTo(other: TestFinalEnum2): Int

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum2#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /TestFinalEnum2.equals|722809408929142791[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum2#<get-name>(){}
  //   Public signature: /TestFinalEnum2.name.<get-name>|5879344792307730109[0]
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum2#hashCode(){}kotlin.Int
  //   Public signature: /TestFinalEnum2.hashCode|-8048879360829830756[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum2{}ordinal
  //   Public signature: /TestFinalEnum2.ordinal|1912745122988592376[0]
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum2#toString(){}kotlin.String
  //   Public signature: /TestFinalEnum2.toString|6958853723545266802[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum2#<get-ordinal>(){}
  //   Public signature: /TestFinalEnum2.ordinal.<get-ordinal>|8409904226035914023[0]
  /* fake */ override fun toString(): String

  // CHECK:
  //   Mangled name: TestFinalEnum2#static{}entries
  //   Public signature: /TestFinalEnum2.entries|-5134227801081826149[0]
  konst entries: EnumEntries<TestFinalEnum2>
    // CHECK JVM_IR:
    //   Mangled name: TestFinalEnum2#<get-entries>#static(){}kotlin.enums.EnumEntries<TestFinalEnum2>
    //   Public signature: /TestFinalEnum2.entries.<get-entries>|7934736600478259880[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestFinalEnum3#<init>(){}
    //   Public signature: /TestFinalEnum3.<init>|-5645683436151566731[0]
    get(): EnumEntries<TestFinalEnum2>

  // CHECK:
  //   Mangled name: TestFinalEnum2{}name
  //   Public signature: /TestFinalEnum2.name|4231860309499509769[0]
  /* fake */ override konst name: String
    // CHECK JVM_IR:
    //   Mangled name: TestFinalEnum2#<get-name>(){}kotlin.String
    //   Public signature: /TestFinalEnum2.name.<get-name>|-8006111524522882650[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestFinalEnum3#konstueOf#static(kotlin.String){}
    //   Public signature: /TestFinalEnum3.konstueOf|-4683474617854611729[0]
    /* fake */ override get(): String

  // CHECK:
  //   Mangled name: TestFinalEnum2{}ordinal
  //   Public signature: /TestFinalEnum2.ordinal|1912745122988592376[0]
  /* fake */ override konst ordinal: Int
    // CHECK JVM_IR:
    //   Mangled name: TestFinalEnum2#<get-ordinal>(){}kotlin.Int
    //   Public signature: /TestFinalEnum2.ordinal.<get-ordinal>|-6902664390061762634[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestFinalEnum3#compareTo(TestFinalEnum3){}
    //   Public signature: /TestFinalEnum3.compareTo|6918020062090955749[0]
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: TestFinalEnum3
//   Public signature: /TestFinalEnum3|null[0]
enum class TestFinalEnum3 : Enum<TestFinalEnum3> {
  // CHECK:
  //   Mangled name: TestFinalEnum3#<init>(){}
  //   Public signature: /TestFinalEnum3.<init>|-5645683436151566731[0]
  private constructor() /* primary */
  // CHECK:
  //   Mangled name: TestFinalEnum3.X1
  //   Public signature: /TestFinalEnum3.X1|null[0]
  X1

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum3#konstueOf#static(kotlin.String){}TestFinalEnum3
  //   Public signature: /TestFinalEnum3.konstueOf|-7660458486476045816[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum3#doStuff(){}
  //   Public signature: /TestFinalEnum3.doStuff|7141990572475111133[0]
  fun konstueOf(konstue: String): TestFinalEnum3

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum3#konstues#static(){}kotlin.Array<TestFinalEnum3>
  //   Public signature: /TestFinalEnum3.konstues|4010199590602977121[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum3#static{}entries
  //   Public signature: /TestFinalEnum3.entries|-5134227801081826149[0]
  fun konstues(): Array<TestFinalEnum3>

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum3#clone(){}kotlin.Any
  //   Public signature: /TestFinalEnum3.clone|-6903128697527593263[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum3#<get-entries>#static(){}
  //   Public signature: /TestFinalEnum3.entries.<get-entries>|-6068527377476727729[0]
  protected /* fake */ override fun clone(): Any

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum3#compareTo(TestFinalEnum3){}kotlin.Int
  //   Public signature: /TestFinalEnum3.compareTo|3973328039045428634[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum3{}name
  //   Public signature: /TestFinalEnum3.name|4231860309499509769[0]
  /* fake */ override operator fun compareTo(other: TestFinalEnum3): Int

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum3#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /TestFinalEnum3.equals|722809408929142791[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum3#<get-name>(){}
  //   Public signature: /TestFinalEnum3.name.<get-name>|5879344792307730109[0]
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum3#hashCode(){}kotlin.Int
  //   Public signature: /TestFinalEnum3.hashCode|-8048879360829830756[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum3{}ordinal
  //   Public signature: /TestFinalEnum3.ordinal|1912745122988592376[0]
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: TestFinalEnum3#toString(){}kotlin.String
  //   Public signature: /TestFinalEnum3.toString|6958853723545266802[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestFinalEnum3#<get-ordinal>(){}
  //   Public signature: /TestFinalEnum3.ordinal.<get-ordinal>|8409904226035914023[0]
  /* fake */ override fun toString(): String

  // CHECK:
  //   Mangled name: TestFinalEnum3#doStuff(){}
  //   Public signature: /TestFinalEnum3.doStuff|7141990572475111133[0]
  fun doStuff(): Unit

  // CHECK:
  //   Mangled name: TestFinalEnum3#static{}entries
  //   Public signature: /TestFinalEnum3.entries|-5134227801081826149[0]
  konst entries: EnumEntries<TestFinalEnum3>
    // CHECK JVM_IR:
    //   Mangled name: TestFinalEnum3#<get-entries>#static(){}kotlin.enums.EnumEntries<TestFinalEnum3>
    //   Public signature: /TestFinalEnum3.entries.<get-entries>|-3503795261994851998[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum1.X1
    //   Public signature: /TestOpenEnum1.X1|null[0]
    get(): EnumEntries<TestFinalEnum3>

  // CHECK:
  //   Mangled name: TestFinalEnum3{}name
  //   Public signature: /TestFinalEnum3.name|4231860309499509769[0]
  /* fake */ override konst name: String
    // CHECK JVM_IR:
    //   Mangled name: TestFinalEnum3#<get-name>(){}kotlin.String
    //   Public signature: /TestFinalEnum3.name.<get-name>|-8006111524522882650[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum1.X1#<init>(){}
    //   Public signature: /TestOpenEnum1.X1.<EEC>.<init>|-5645683436151566731[0]
    /* fake */ override get(): String

  // CHECK:
  //   Mangled name: TestFinalEnum3{}ordinal
  //   Public signature: /TestFinalEnum3.ordinal|1912745122988592376[0]
  /* fake */ override konst ordinal: Int
    // CHECK JVM_IR:
    //   Mangled name: TestFinalEnum3#<get-ordinal>(){}kotlin.Int
    //   Public signature: /TestFinalEnum3.ordinal.<get-ordinal>|-6902664390061762634[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum1.X1#equals(kotlin.Any?){}
    //   Public signature: /TestOpenEnum1.X1.<EEC>.equals|4638265728071529943[0]
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: TestOpenEnum1
//   Public signature: /TestOpenEnum1|null[0]
open enum class TestOpenEnum1 : Enum<TestOpenEnum1> {
  // CHECK:
  //   Mangled name: TestOpenEnum1#<init>(){}
  //   Public signature: /TestOpenEnum1.<init>|-5645683436151566731[0]
  private constructor() /* primary */
  // CHECK:
  //   Mangled name: TestOpenEnum1.X1
  //   Public signature: /TestOpenEnum1.X1|null[0]

  X1
  // CHECK:
  //   Mangled name: TestOpenEnum1.X1
  //   Public signature: /TestOpenEnum1.X1.<EEC>|null[0]
  private enum entry class X1 : TestOpenEnum1 {
    // CHECK:
    //   Mangled name: TestOpenEnum1.X1#<init>(){}
    //   Public signature: /TestOpenEnum1.X1.<EEC>.<init>|-5645683436151566731[0]
    private constructor() /* primary */
    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum1.X1#clone(){}kotlin.Any
    //   Public signature: /TestOpenEnum1.X1.<EEC>.clone|-6903128697527593263[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum1.X1#<get-ordinal>(){}
    //   Public signature: /TestOpenEnum1.X1.<EEC>.ordinal.<get-ordinal>|8409904226035914023[0]
    protected /* fake */ override fun clone(): Any

    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum1.X1#compareTo(TestOpenEnum1){}kotlin.Int
    //   Public signature: /TestOpenEnum1.X1.<EEC>.compareTo|5969408945777389066[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum1#konstueOf#static(kotlin.String){}
    //   Public signature: /TestOpenEnum1.konstueOf|-4683474617854611729[0]
    /* fake */ override operator fun compareTo(other: TestOpenEnum1): Int

    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum1.X1#equals(kotlin.Any?){}kotlin.Boolean
    //   Public signature: /TestOpenEnum1.X1.<EEC>.equals|722809408929142791[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum1#konstues#static(){}
    //   Public signature: /TestOpenEnum1.konstues|-8715569000920726747[0]
    /* fake */ override operator fun equals(other: Any?): Boolean

    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum1.X1#hashCode(){}kotlin.Int
    //   Public signature: /TestOpenEnum1.X1.<EEC>.hashCode|-8048879360829830756[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum1#compareTo(TestOpenEnum1){}
    //   Public signature: /TestOpenEnum1.compareTo|1125042758162309284[0]
    /* fake */ override fun hashCode(): Int

    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum1.X1#toString(){}kotlin.String
    //   Public signature: /TestOpenEnum1.X1.<EEC>.toString|6958853723545266802[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum1#equals(kotlin.Any?){}
    //   Public signature: /TestOpenEnum1.equals|4638265728071529943[0]
    override fun toString(): String

    // CHECK:
    //   Mangled name: TestOpenEnum1.X1{}name
    //   Public signature: /TestOpenEnum1.X1.<EEC>.name|4231860309499509769[0]
    /* fake */ override konst name: String
      // CHECK JVM_IR:
      //   Mangled name: TestOpenEnum1.X1#<get-name>(){}kotlin.String
      //   Public signature: /TestOpenEnum1.X1.<EEC>.name.<get-name>|-8006111524522882650[0]
      // CHECK JS_IR NATIVE:
      //   Mangled name: TestOpenEnum1#toString(){}
      //   Public signature: /TestOpenEnum1.toString|-1522858123163872138[0]
      /* fake */ override get(): String

    // CHECK:
    //   Mangled name: TestOpenEnum1.X1{}ordinal
    //   Public signature: /TestOpenEnum1.X1.<EEC>.ordinal|1912745122988592376[0]
    /* fake */ override konst ordinal: Int
      // CHECK JVM_IR:
      //   Mangled name: TestOpenEnum1.X1#<get-ordinal>(){}kotlin.Int
      //   Public signature: /TestOpenEnum1.X1.<EEC>.ordinal.<get-ordinal>|-6902664390061762634[0]
      // CHECK JS_IR NATIVE:
      //   Mangled name: TestOpenEnum1#<get-entries>#static(){}
      //   Public signature: /TestOpenEnum1.entries.<get-entries>|-6068527377476727729[0]
      /* fake */ override get(): Int

  }

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum1#konstueOf#static(kotlin.String){}TestOpenEnum1
  //   Public signature: /TestOpenEnum1.konstueOf|-3895494988240235128[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestOpenEnum1{}name
  //   Public signature: /TestOpenEnum1.name|4231860309499509769[0]
  fun konstueOf(konstue: String): TestOpenEnum1

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum1#konstues#static(){}kotlin.Array<TestOpenEnum1>
  //   Public signature: /TestOpenEnum1.konstues|3800638804003217382[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestOpenEnum1#<get-name>(){}
  //   Public signature: /TestOpenEnum1.name.<get-name>|5879344792307730109[0]
  fun konstues(): Array<TestOpenEnum1>

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum1#clone(){}kotlin.Any
  //   Public signature: /TestOpenEnum1.clone|-6903128697527593263[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestOpenEnum1{}ordinal
  //   Public signature: /TestOpenEnum1.ordinal|1912745122988592376[0]
  protected /* fake */ override fun clone(): Any

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum1#compareTo(TestOpenEnum1){}kotlin.Int
  //   Public signature: /TestOpenEnum1.compareTo|5969408945777389066[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestOpenEnum1#<get-ordinal>(){}
  //   Public signature: /TestOpenEnum1.ordinal.<get-ordinal>|8409904226035914023[0]
  /* fake */ override operator fun compareTo(other: TestOpenEnum1): Int

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum1#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /TestOpenEnum1.equals|722809408929142791[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestOpenEnum2
  //   Public signature: /TestOpenEnum2|null[0]
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum1#hashCode(){}kotlin.Int
  //   Public signature: /TestOpenEnum1.hashCode|-8048879360829830756[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestOpenEnum2#<init>(){}
  //   Public signature: /TestOpenEnum2.<init>|-5645683436151566731[0]
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum1#toString(){}kotlin.String
  //   Public signature: /TestOpenEnum1.toString|6958853723545266802[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestOpenEnum2.X1
  //   Public signature: /TestOpenEnum2.X1|null[0]
  /* fake */ override fun toString(): String

  // CHECK:
  //   Mangled name: TestOpenEnum1#static{}entries
  //   Public signature: /TestOpenEnum1.entries|-5134227801081826149[0]
  konst entries: EnumEntries<TestOpenEnum1>
    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum1#<get-entries>#static(){}kotlin.enums.EnumEntries<TestOpenEnum1>
    //   Public signature: /TestOpenEnum1.entries.<get-entries>|-4208283468290053503[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum2.X1#<init>(){}
    //   Public signature: /TestOpenEnum2.X1.<EEC>.<init>|-5645683436151566731[0]
    get(): EnumEntries<TestOpenEnum1>

  // CHECK:
  //   Mangled name: TestOpenEnum1{}name
  //   Public signature: /TestOpenEnum1.name|4231860309499509769[0]
  /* fake */ override konst name: String
    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum1#<get-name>(){}kotlin.String
    //   Public signature: /TestOpenEnum1.name.<get-name>|-8006111524522882650[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum2.X1#equals(kotlin.Any?){}
    //   Public signature: /TestOpenEnum2.X1.<EEC>.equals|4638265728071529943[0]
    /* fake */ override get(): String

  // CHECK:
  //   Mangled name: TestOpenEnum1{}ordinal
  //   Public signature: /TestOpenEnum1.ordinal|1912745122988592376[0]
  /* fake */ override konst ordinal: Int
    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum1#<get-ordinal>(){}kotlin.Int
    //   Public signature: /TestOpenEnum1.ordinal.<get-ordinal>|-6902664390061762634[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum2.X1#toString(){}
    //   Public signature: /TestOpenEnum2.X1.<EEC>.toString|-1522858123163872138[0]
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: TestOpenEnum2
//   Public signature: /TestOpenEnum2|null[0]
open enum class TestOpenEnum2 : Enum<TestOpenEnum2> {
  // CHECK:
  //   Mangled name: TestOpenEnum2#<init>(){}
  //   Public signature: /TestOpenEnum2.<init>|-5645683436151566731[0]
  private constructor() /* primary */
  // CHECK:
  //   Mangled name: TestOpenEnum2.X1
  //   Public signature: /TestOpenEnum2.X1|null[0]

  X1
  // CHECK:
  //   Mangled name: TestOpenEnum2.X1
  //   Public signature: /TestOpenEnum2.X1.<EEC>|null[0]
  private enum entry class X1 : TestOpenEnum2 {
    // CHECK:
    //   Mangled name: TestOpenEnum2.X1#<init>(){}
    //   Public signature: /TestOpenEnum2.X1.<EEC>.<init>|-5645683436151566731[0]
    private constructor() /* primary */
    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum2.X1#clone(){}kotlin.Any
    //   Public signature: /TestOpenEnum2.X1.<EEC>.clone|-6903128697527593263[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum2#konstueOf#static(kotlin.String){}
    //   Public signature: /TestOpenEnum2.konstueOf|-4683474617854611729[0]
    protected /* fake */ override fun clone(): Any

    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum2.X1#compareTo(TestOpenEnum2){}kotlin.Int
    //   Public signature: /TestOpenEnum2.X1.<EEC>.compareTo|-5309775767017986668[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum2#konstues#static(){}
    //   Public signature: /TestOpenEnum2.konstues|-8715569000920726747[0]
    /* fake */ override operator fun compareTo(other: TestOpenEnum2): Int

    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum2.X1#equals(kotlin.Any?){}kotlin.Boolean
    //   Public signature: /TestOpenEnum2.X1.<EEC>.equals|722809408929142791[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum2#compareTo(TestOpenEnum2){}
    //   Public signature: /TestOpenEnum2.compareTo|3305950527143248830[0]
    /* fake */ override operator fun equals(other: Any?): Boolean

    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum2.X1#hashCode(){}kotlin.Int
    //   Public signature: /TestOpenEnum2.X1.<EEC>.hashCode|-8048879360829830756[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum2#equals(kotlin.Any?){}
    //   Public signature: /TestOpenEnum2.equals|4638265728071529943[0]
    /* fake */ override fun hashCode(): Int

    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum2.X1#toString(){}kotlin.String
    //   Public signature: /TestOpenEnum2.X1.<EEC>.toString|6958853723545266802[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestOpenEnum2#hashCode(){}
    //   Public signature: /TestOpenEnum2.hashCode|3409210261493131192[0]
    /* fake */ override fun toString(): String

    // CHECK:
    //   Mangled name: TestOpenEnum2.X1#foo(){}
    //   Public signature: /TestOpenEnum2.X1.<EEC>.foo|-1041209573719867811[0]
    override fun foo(): Unit

    // CHECK:
    //   Mangled name: TestOpenEnum2.X1{}name
    //   Public signature: /TestOpenEnum2.X1.<EEC>.name|4231860309499509769[0]
    /* fake */ override konst name: String
      // CHECK JVM_IR:
      //   Mangled name: TestOpenEnum2.X1#<get-name>(){}kotlin.String
      //   Public signature: /TestOpenEnum2.X1.<EEC>.name.<get-name>|-8006111524522882650[0]
      // CHECK JS_IR NATIVE:
      //   Mangled name: TestOpenEnum2#static{}entries
      //   Public signature: /TestOpenEnum2.entries|-5134227801081826149[0]
      /* fake */ override get(): String

    // CHECK:
    //   Mangled name: TestOpenEnum2.X1{}ordinal
    //   Public signature: /TestOpenEnum2.X1.<EEC>.ordinal|1912745122988592376[0]
    /* fake */ override konst ordinal: Int
      // CHECK JVM_IR:
      //   Mangled name: TestOpenEnum2.X1#<get-ordinal>(){}kotlin.Int
      //   Public signature: /TestOpenEnum2.X1.<EEC>.ordinal.<get-ordinal>|-6902664390061762634[0]
      // CHECK JS_IR NATIVE:
      //   Mangled name: TestOpenEnum2{}name
      //   Public signature: /TestOpenEnum2.name|4231860309499509769[0]
      /* fake */ override get(): Int

  }

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum2#konstueOf#static(kotlin.String){}TestOpenEnum2
  //   Public signature: /TestOpenEnum2.konstueOf|-6277423759061924196[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestOpenEnum2#<get-name>(){}
  //   Public signature: /TestOpenEnum2.name.<get-name>|5879344792307730109[0]
  fun konstueOf(konstue: String): TestOpenEnum2

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum2#konstues#static(){}kotlin.Array<TestOpenEnum2>
  //   Public signature: /TestOpenEnum2.konstues|8731365896810749322[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestOpenEnum2{}ordinal
  //   Public signature: /TestOpenEnum2.ordinal|1912745122988592376[0]
  fun konstues(): Array<TestOpenEnum2>

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum2#clone(){}kotlin.Any
  //   Public signature: /TestOpenEnum2.clone|-6903128697527593263[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestOpenEnum2#<get-ordinal>(){}
  //   Public signature: /TestOpenEnum2.ordinal.<get-ordinal>|8409904226035914023[0]
  protected /* fake */ override fun clone(): Any

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum2#compareTo(TestOpenEnum2){}kotlin.Int
  //   Public signature: /TestOpenEnum2.compareTo|-5309775767017986668[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: IFoo
  //   Public signature: /IFoo|null[0]
  /* fake */ override operator fun compareTo(other: TestOpenEnum2): Int

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum2#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /TestOpenEnum2.equals|722809408929142791[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: IFoo#foo(){}
  //   Public signature: /IFoo.foo|-1041209573719867811[0]
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum2#hashCode(){}kotlin.Int
  //   Public signature: /TestOpenEnum2.hashCode|-8048879360829830756[0]
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: TestOpenEnum2#toString(){}kotlin.String
  //   Public signature: /TestOpenEnum2.toString|6958853723545266802[0]
  /* fake */ override fun toString(): String

  // CHECK:
  //   Mangled name: TestOpenEnum2#foo(){}
  //   Public signature: /TestOpenEnum2.foo|-1041209573719867811[0]
  open fun foo(): Unit

  // CHECK:
  //   Mangled name: TestOpenEnum2#static{}entries
  //   Public signature: /TestOpenEnum2.entries|-5134227801081826149[0]
  konst entries: EnumEntries<TestOpenEnum2>
    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum2#<get-entries>#static(){}kotlin.enums.EnumEntries<TestOpenEnum2>
    //   Public signature: /TestOpenEnum2.entries.<get-entries>|7144795131978512560[0]
    get(): EnumEntries<TestOpenEnum2>

  // CHECK:
  //   Mangled name: TestOpenEnum2{}name
  //   Public signature: /TestOpenEnum2.name|4231860309499509769[0]
  /* fake */ override konst name: String
    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum2#<get-name>(){}kotlin.String
    //   Public signature: /TestOpenEnum2.name.<get-name>|-8006111524522882650[0]
    /* fake */ override get(): String

  // CHECK:
  //   Mangled name: TestOpenEnum2{}ordinal
  //   Public signature: /TestOpenEnum2.ordinal|1912745122988592376[0]
  /* fake */ override konst ordinal: Int
    // CHECK JVM_IR:
    //   Mangled name: TestOpenEnum2#<get-ordinal>(){}kotlin.Int
    //   Public signature: /TestOpenEnum2.ordinal.<get-ordinal>|-6902664390061762634[0]
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: IFoo
//   Public signature: /IFoo|null[0]
interface IFoo {

  // CHECK:
  //   Mangled name: IFoo#foo(){}
  //   Public signature: /IFoo.foo|-1041209573719867811[0]
  abstract fun foo(): Unit

}

