// CHECK:
//   Mangled name: TestAnn
//   Public signature: /TestAnn|null[0]
open annotation class TestAnn : Annotation {
  // CHECK:
  //   Mangled name: TestAnn{}x
  //   Public signature: /TestAnn.x|-8060530855978347579[0]
  konst x: String
    // CHECK JVM_IR:
    //   Mangled name: TestAnn#<get-x>(){}kotlin.String
    //   Public signature: /TestAnn.x.<get-x>|316111172223894646[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestAnn#<get-x>(){}
    //   Public signature: /TestAnn.x.<get-x>|1482705010654679335[0]
    get

  // CHECK:
  //   Mangled name: TestAnn#<init>(kotlin.String){}
  //   Public signature: /TestAnn.<init>|1280618353163213788[0]
  constructor(x: String) /* primary */

}

// CHECK:
//   Mangled name: TestAnnotation
//   Public signature: /TestAnnotation|null[0]
@TestAnn(x = "annotation")
open annotation class TestAnnotation : Annotation {
  // CHECK:
  //   Mangled name: TestAnnotation#<init>(){}
  //   Public signature: /TestAnnotation.<init>|-5645683436151566731[0]
  constructor() /* primary */

}

// CHECK:
//   Mangled name: Host
//   Public signature: /Host|null[0]
class Host {
  // CHECK:
  //   Mangled name: Host.TestCompanion
  //   Public signature: /Host.TestCompanion|null[0]
  @TestAnn(x = "companion")
  companion object TestCompanion {
    // CHECK:
    //   Mangled name: Host.TestCompanion#<init>(){}
    //   Public signature: /Host.TestCompanion.<init>|-5645683436151566731[0]
    private constructor() /* primary */

  }

  // CHECK:
  //   Mangled name: Host#<init>(){}
  //   Public signature: /Host.<init>|-5645683436151566731[0]
  constructor() /* primary */

}

// CHECK:
//   Mangled name: TestClass
//   Public signature: /TestClass|null[0]
@TestAnn(x = "class")
class TestClass {
  // CHECK:
  //   Mangled name: TestClass#<init>(){}
  //   Public signature: /TestClass.<init>|-5645683436151566731[0]
  constructor() /* primary */

}

// CHECK:
//   Mangled name: TestEnum
//   Public signature: /TestEnum|null[0]
@TestAnn(x = "enum")
enum class TestEnum : Enum<TestEnum> {
  // CHECK:
  //   Mangled name: TestEnum#<init>(){}
  //   Public signature: /TestEnum.<init>|-5645683436151566731[0]
  private constructor() /* primary */
  // CHECK JVM_IR:
  //   Mangled name: TestEnum#konstueOf#static(kotlin.String){}TestEnum
  //   Public signature: /TestEnum.konstueOf|1811575739170804829[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestEnum#konstueOf#static(kotlin.String){}
  //   Public signature: /TestEnum.konstueOf|-4683474617854611729[0]
  fun konstueOf(konstue: String): TestEnum

  // CHECK JVM_IR:
  //   Mangled name: TestEnum#konstues#static(){}kotlin.Array<TestEnum>
  //   Public signature: /TestEnum.konstues|-4299804782350326897[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestEnum#konstues#static(){}
  //   Public signature: /TestEnum.konstues|-8715569000920726747[0]
  fun konstues(): Array<TestEnum>

  // CHECK JVM_IR:
  //   Mangled name: TestEnum#clone(){}kotlin.Any
  //   Public signature: /TestEnum.clone|-6903128697527593263[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestEnum#compareTo(TestEnum){}
  //   Public signature: /TestEnum.compareTo|7350720606720122863[0]
  protected /* fake */ override fun clone(): Any

  // CHECK JVM_IR:
  //   Mangled name: TestEnum#compareTo(TestEnum){}kotlin.Int
  //   Public signature: /TestEnum.compareTo|7559751212169934687[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestEnum#equals(kotlin.Any?){}
  //   Public signature: /TestEnum.equals|4638265728071529943[0]
  /* fake */ override operator fun compareTo(other: TestEnum): Int

  // CHECK JVM_IR:
  //   Mangled name: TestEnum#equals(kotlin.Any?){}kotlin.Boolean
  //   Public signature: /TestEnum.equals|722809408929142791[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestEnum#hashCode(){}
  //   Public signature: /TestEnum.hashCode|3409210261493131192[0]
  /* fake */ override operator fun equals(other: Any?): Boolean

  // CHECK JVM_IR:
  //   Mangled name: TestEnum#hashCode(){}kotlin.Int
  //   Public signature: /TestEnum.hashCode|-8048879360829830756[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestEnum#toString(){}
  //   Public signature: /TestEnum.toString|-1522858123163872138[0]
  /* fake */ override fun hashCode(): Int

  // CHECK JVM_IR:
  //   Mangled name: TestEnum#toString(){}kotlin.String
  //   Public signature: /TestEnum.toString|6958853723545266802[0]
  // CHECK JS_IR NATIVE:
  //   Mangled name: TestEnum#static{}entries
  //   Public signature: /TestEnum.entries|-5134227801081826149[0]
  /* fake */ override fun toString(): String

  // CHECK:
  //   Mangled name: TestEnum#static{}entries
  //   Public signature: /TestEnum.entries|-5134227801081826149[0]
  konst entries: EnumEntries<TestEnum>
    // CHECK JVM_IR:
    //   Mangled name: TestEnum#<get-entries>#static(){}kotlin.enums.EnumEntries<TestEnum>
    //   Public signature: /TestEnum.entries.<get-entries>|6962221716588245012[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestEnum{}name
    //   Public signature: /TestEnum.name|4231860309499509769[0]
    get(): EnumEntries<TestEnum>

  // CHECK:
  //   Mangled name: TestEnum{}name
  //   Public signature: /TestEnum.name|4231860309499509769[0]
  /* fake */ override konst name: String
    // CHECK JVM_IR:
    //   Mangled name: TestEnum#<get-name>(){}kotlin.String
    //   Public signature: /TestEnum.name.<get-name>|-8006111524522882650[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestEnum{}ordinal
    //   Public signature: /TestEnum.ordinal|1912745122988592376[0]
    /* fake */ override get(): String

  // CHECK:
  //   Mangled name: TestEnum{}ordinal
  //   Public signature: /TestEnum.ordinal|1912745122988592376[0]
  /* fake */ override konst ordinal: Int
    // CHECK JVM_IR:
    //   Mangled name: TestEnum#<get-ordinal>(){}kotlin.Int
    //   Public signature: /TestEnum.ordinal.<get-ordinal>|-6902664390061762634[0]
    // CHECK JS_IR NATIVE:
    //   Mangled name: TestInterface
    //   Public signature: /TestInterface|null[0]
    /* fake */ override get(): Int

}

// CHECK:
//   Mangled name: TestInterface
//   Public signature: /TestInterface|null[0]
@TestAnn(x = "interface")
interface TestInterface {

}

// CHECK:
//   Mangled name: TestObject
//   Public signature: /TestObject|null[0]
@TestAnn(x = "object")
object TestObject {
  // CHECK:
  //   Mangled name: TestObject#<init>(){}
  //   Public signature: /TestObject.<init>|-5645683436151566731[0]
  private constructor() /* primary */

}

