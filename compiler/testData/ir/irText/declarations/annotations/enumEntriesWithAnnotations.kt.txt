open annotation class TestAnn : Annotation {
  constructor(x: String) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  konst x: String
    field = x
    get

}

open enum class TestEnum : Enum<TestEnum> {
  private constructor() /* primary */ {
    super/*Enum*/<TestEnum>()
    /* <init>() */

  }

  @TestAnn(x = "ENTRY1")
  ENTRY1 = TestEnum()

  @TestAnn(x = "ENTRY2")
  ENTRY2 = ENTRY2()
  @TestAnn(x = "ENTRY2")
  private enum entry class ENTRY2 : TestEnum {
    private constructor() /* primary */ {
      super/*TestEnum*/() /*~> Unit */
      /* <init>() */

    }

    konst x: Int
      field = 42
      get

  }

  fun konstues(): Array<TestEnum> /* Synthetic body for ENUM_VALUES */

  fun konstueOf(konstue: String): TestEnum /* Synthetic body for ENUM_VALUEOF */

  konst entries: EnumEntries<TestEnum>
    get(): EnumEntries<TestEnum> /* Synthetic body for ENUM_ENTRIES */

}
