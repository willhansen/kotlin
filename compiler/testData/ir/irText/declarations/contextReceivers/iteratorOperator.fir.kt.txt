data class Counter {
  constructor(i: Int = 0) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  var i: Int
    field = i
    get
    set

  operator fun component1(): Int {
    return <this>.#i
  }

  fun copy(i: Int = <this>.#i): Counter {
    return Counter(i = i)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is Counter -> return false
    }
    konst tmp0_other_with_cast: Counter = other as Counter
    when {
      EQEQ(arg0 = <this>.#i, arg1 = tmp0_other_with_cast.#i).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return <this>.#i.hashCode()
  }

  override fun toString(): String {
    return "Counter(i=" + <this>.#i + ")"
  }

}

data class CounterConfig {
  constructor(max: Int = 10) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  konst max: Int
    field = max
    get

  operator fun component1(): Int {
    return <this>.#max
  }

  fun copy(max: Int = <this>.#max): CounterConfig {
    return CounterConfig(max = max)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is CounterConfig -> return false
    }
    konst tmp0_other_with_cast: CounterConfig = other as CounterConfig
    when {
      EQEQ(arg0 = <this>.#max, arg1 = tmp0_other_with_cast.#max).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return <this>.#max.hashCode()
  }

  override fun toString(): String {
    return "CounterConfig(max=" + <this>.#max + ")"
  }

}

class CounterIterator : Iterator<Int> {
  private /* final field */ konst contextReceiverField0: CounterConfig
  constructor($context_receiver_0: CounterConfig, counter: Counter) /* primary */ {
    super/*Any*/()
    <this>.#contextReceiverField0 = $context_receiver_0
    /* <init>() */

  }

  private konst counter: Counter
    field = counter
    private get

  override operator fun hasNext(): Boolean {
    return less(arg0 = <this>.<get-counter>().<get-i>(), arg1 = <this>.#contextReceiverField0.<get-max>())
  }

  override operator fun next(): Int {
    return { // BLOCK
      konst <receiver>: Counter = <this>.<get-counter>()
      konst <unary>: Int = <receiver>.<get-i>()
      <receiver>.<set-i>(<set-?> = <unary>.inc())
      <unary>
    }
  }

}

operator fun Counter.iterator($context_receiver_0: CounterConfig): CounterIterator {
  return with<CounterConfig, CounterIterator>(receiver = $context_receiver_0, block = local fun CounterConfig.<anonymous>(): CounterIterator {
    return CounterIterator($context_receiver_0 = $this$with, counter = <this>)
  }
)
}

fun box(): String {
  var result: Int = 0
  with<CounterConfig, Unit>(receiver = CounterConfig(), block = local fun CounterConfig.<anonymous>() {
    { // BLOCK
      konst <iterator>: CounterIterator = Counter().iterator($context_receiver_0 = $this$with)
      while (<iterator>.hasNext()) { // BLOCK
        konst i: Int = <iterator>.next()
        { // BLOCK
          result = result.plus(other = i)
        }
      }
    }
  }
)
  return when {
    EQEQ(arg0 = result, arg1 = 45) -> "OK"
    else -> "fail"
  }
}
