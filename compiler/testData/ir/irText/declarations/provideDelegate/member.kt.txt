class Delegate {
  constructor(konstue: String) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  konst konstue: String
    field = konstue
    get

  operator fun getValue(thisRef: Any?, property: Any?): String {
    return <this>.<get-konstue>()
  }

}

class DelegateProvider {
  constructor(konstue: String) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  konst konstue: String
    field = konstue
    get

  operator fun provideDelegate(thisRef: Any?, property: Any?): Delegate {
    return Delegate(konstue = <this>.<get-konstue>())
  }

}

class Host {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  konst testMember: String /* by */
    field = DelegateProvider(konstue = "OK").provideDelegate(thisRef = <this>, property = Host::testMember)
    get(): String {
      return <this>.#testMember$delegate.getValue(thisRef = <this>, property = Host::testMember)
    }

}
