FILE fqName:<root> fileName:/kt47527.kt
  FUN name:test_1 visibility:public modality:FINAL <> (konstue:kotlin.Any?) returnType:kotlin.String?
    VALUE_PARAMETER name:konstue index:0 type:kotlin.Any?
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun test_1 (konstue: kotlin.Any?): kotlin.String? declared in <root>'
        BLOCK type=kotlin.Nothing? origin=SAFE_CALL
          VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:kotlin.Any? [konst]
            GET_VAR 'konstue: kotlin.Any? declared in <root>.test_1' type=kotlin.Any? origin=null
          WHEN type=kotlin.Nothing? origin=null
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'konst tmp_0: kotlin.Any? declared in <root>.test_1' type=kotlin.Any? origin=null
                arg1: CONST Null type=kotlin.Nothing? konstue=null
              then: CONST Null type=kotlin.Nothing? konstue=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean konstue=true
              then: CALL 'public final fun let <T, R> (block: kotlin.Function1<T of kotlin.let, R of kotlin.let>): R of kotlin.let declared in kotlin' type=kotlin.Nothing origin=null
                <T>: kotlin.Any
                <R>: kotlin.Nothing
                $receiver: GET_VAR 'konst tmp_0: kotlin.Any? declared in <root>.test_1' type=kotlin.Any? origin=null
                block: FUN_EXPR type=kotlin.Function1<kotlin.Any, kotlin.Nothing> origin=LAMBDA
                  FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> (it:kotlin.Any) returnType:kotlin.Nothing
                    VALUE_PARAMETER name:it index:0 type:kotlin.Any
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from='public final fun test_1 (konstue: kotlin.Any?): kotlin.String? declared in <root>'
                        CONST String type=kotlin.String konstue="O"
  FUN name:test_2 visibility:public modality:FINAL <> (konstue:kotlin.Any?) returnType:kotlin.String?
    VALUE_PARAMETER name:konstue index:0 type:kotlin.Any?
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun test_2 (konstue: kotlin.Any?): kotlin.String? declared in <root>'
        CALL 'public final fun run <R> (block: kotlin.Function0<R of kotlin.run>): R of kotlin.run declared in kotlin' type=kotlin.Nothing? origin=null
          <R>: kotlin.Nothing?
          block: FUN_EXPR type=kotlin.Function0<kotlin.Nothing?> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:kotlin.Nothing?
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Nothing? declared in <root>.test_2'
                  BLOCK type=kotlin.Nothing? origin=SAFE_CALL
                    VAR IR_TEMPORARY_VARIABLE name:tmp_1 type:kotlin.Any? [konst]
                      GET_VAR 'konstue: kotlin.Any? declared in <root>.test_2' type=kotlin.Any? origin=null
                    WHEN type=kotlin.Nothing? origin=null
                      BRANCH
                        if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                          arg0: GET_VAR 'konst tmp_1: kotlin.Any? declared in <root>.test_2.<anonymous>' type=kotlin.Any? origin=null
                          arg1: CONST Null type=kotlin.Nothing? konstue=null
                        then: CONST Null type=kotlin.Nothing? konstue=null
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean konstue=true
                        then: CALL 'public final fun let <T, R> (block: kotlin.Function1<T of kotlin.let, R of kotlin.let>): R of kotlin.let declared in kotlin' type=kotlin.Nothing origin=null
                          <T>: kotlin.Any
                          <R>: kotlin.Nothing
                          $receiver: GET_VAR 'konst tmp_1: kotlin.Any? declared in <root>.test_2.<anonymous>' type=kotlin.Any? origin=null
                          block: FUN_EXPR type=kotlin.Function1<kotlin.Any, kotlin.Nothing> origin=LAMBDA
                            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> (it:kotlin.Any) returnType:kotlin.Nothing
                              VALUE_PARAMETER name:it index:0 type:kotlin.Any
                              BLOCK_BODY
                                RETURN type=kotlin.Nothing from='public final fun test_2 (konstue: kotlin.Any?): kotlin.String? declared in <root>'
                                  CONST String type=kotlin.String konstue="K"
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      VAR name:result type:kotlin.String [var]
        CONST String type=kotlin.String konstue=""
      SET_VAR 'var result: kotlin.String declared in <root>.box' type=kotlin.Unit origin=PLUSEQ
        CALL 'public final fun plus (other: kotlin.Any?): kotlin.String declared in kotlin.String' type=kotlin.String origin=PLUSEQ
          $this: GET_VAR 'var result: kotlin.String declared in <root>.box' type=kotlin.String origin=PLUSEQ
          other: BLOCK type=kotlin.String origin=ELVIS
            VAR IR_TEMPORARY_VARIABLE name:tmp_2 type:kotlin.String? [konst]
              CALL 'public final fun test_1 (konstue: kotlin.Any?): kotlin.String? declared in <root>' type=kotlin.String? origin=null
                konstue: CONST Int type=kotlin.Int konstue=1
            WHEN type=kotlin.String origin=null
              BRANCH
                if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                  arg0: GET_VAR 'konst tmp_2: kotlin.String? declared in <root>.box' type=kotlin.String? origin=null
                  arg1: CONST Null type=kotlin.Nothing? konstue=null
                then: RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
                  CONST String type=kotlin.String konstue="fail 1"
              BRANCH
                if: CONST Boolean type=kotlin.Boolean konstue=true
                then: GET_VAR 'konst tmp_2: kotlin.String? declared in <root>.box' type=kotlin.String? origin=null
      SET_VAR 'var result: kotlin.String declared in <root>.box' type=kotlin.Unit origin=PLUSEQ
        CALL 'public final fun plus (other: kotlin.Any?): kotlin.String declared in kotlin.String' type=kotlin.String origin=PLUSEQ
          $this: GET_VAR 'var result: kotlin.String declared in <root>.box' type=kotlin.String origin=PLUSEQ
          other: BLOCK type=kotlin.String origin=ELVIS
            VAR IR_TEMPORARY_VARIABLE name:tmp_3 type:kotlin.String? [konst]
              CALL 'public final fun test_2 (konstue: kotlin.Any?): kotlin.String? declared in <root>' type=kotlin.String? origin=null
                konstue: CONST Int type=kotlin.Int konstue=1
            WHEN type=kotlin.String origin=null
              BRANCH
                if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                  arg0: GET_VAR 'konst tmp_3: kotlin.String? declared in <root>.box' type=kotlin.String? origin=null
                  arg1: CONST Null type=kotlin.Nothing? konstue=null
                then: RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
                  CONST String type=kotlin.String konstue="fail 2"
              BRANCH
                if: CONST Boolean type=kotlin.Boolean konstue=true
                then: GET_VAR 'konst tmp_3: kotlin.String? declared in <root>.box' type=kotlin.String? origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        GET_VAR 'var result: kotlin.String declared in <root>.box' type=kotlin.String origin=null
