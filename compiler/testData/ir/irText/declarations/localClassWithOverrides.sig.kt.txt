// CHECK:
//   Mangled name: #outer(){}
//   Public signature: /outer|1607449560170809066[0]
fun outer(): Unit
  // CHECK:
  //   Mangled name: #outer(){}.ALocal
  local abstract class ALocal {
    // CHECK:
    //   Mangled name: #outer(){}.ALocal#<init>(){}
    constructor() /* primary */

    // CHECK:
    //   Mangled name: #outer(){}.ALocal#afun(){}
    abstract fun afun(): Unit

    // CHECK:
    //   Mangled name: #outer(){}.ALocal{}akonst
    abstract konst akonst: Int
      // CHECK JVM_IR:
      //   Mangled name: #outer(){}.ALocal#<get-akonst>(){}kotlin.Int
      // CHECK JS_IR NATIVE:
      //   Mangled name: #outer(){}.ALocal#<get-akonst>(){}
      abstract get

    // CHECK:
    //   Mangled name: #outer(){}.ALocal{}avar
    abstract var avar: Int
      // CHECK JVM_IR:
      //   Mangled name: #outer(){}.ALocal#<get-avar>(){}kotlin.Int
      // CHECK JS_IR NATIVE:
      //   Mangled name: #outer(){}.ALocal#<get-avar>(){}
      abstract get
      // CHECK:
      //   Mangled name: #outer(){}.ALocal#<set-avar>(kotlin.Int){}
      abstract set

  }

  // CHECK:
  //   Mangled name: #outer(){}.Local
  local class Local : ALocal {
    // CHECK:
    //   Mangled name: #outer(){}.Local{}akonst
    override konst akonst: Int
      field
      // CHECK JVM_IR:
      //   Mangled name: #outer(){}.Local#<get-akonst>(){}kotlin.Int
      // CHECK JS_IR NATIVE:
      //   Mangled name: #outer(){}.Local#<get-akonst>(){}
      override get

    // CHECK:
    //   Mangled name: #outer(){}.Local{}avar
    override var avar: Int
      field
      // CHECK JVM_IR:
      //   Mangled name: #outer(){}.Local#<get-avar>(){}kotlin.Int
      // CHECK JS_IR NATIVE:
      //   Mangled name: #outer(){}.Local#<get-avar>(){}
      override get
      // CHECK:
      //   Mangled name: #outer(){}.Local#<set-avar>(kotlin.Int){}
      override set

    // CHECK:
    //   Mangled name: #outer(){}.Local#<init>(){}
    constructor() /* primary */

    // CHECK:
    //   Mangled name: #outer(){}.Local#afun(){}
    override fun afun(): Unit

  }

