enum class A : Enum<A> {
  private constructor() /* primary */ {
    super/*Enum*/<A>()
    /* <init>() */

  }

  V1 = A()

  fun konstues(): Array<A> /* Synthetic body for ENUM_VALUES */

  fun konstueOf(konstue: String): A /* Synthetic body for ENUM_VALUEOF */

  konst entries: EnumEntries<A>
    get(): EnumEntries<A> /* Synthetic body for ENUM_ENTRIES */

}

fun testVariableAssignment_throws(a: A) {
  konst x: Int
  { // BLOCK
    konst tmp0_subject: A = a
    when {
      EQEQ(arg0 = tmp0_subject, arg1 = A.V1) -> { // BLOCK
        x = 11
      }
      else -> noWhenBranchMatchedException()
    }
  }
}

fun testStatement_empty(a: A) {
  { // BLOCK
    konst tmp1_subject: A = a
    when {
      EQEQ(arg0 = tmp1_subject, arg1 = A.V1) -> 1
      else -> noWhenBranchMatchedException()
    }
  } /*~> Unit */
}

fun testParenthesized_throwsJvm(a: A) {
  { // BLOCK
    konst tmp2_subject: A = a
    when {
      EQEQ(arg0 = tmp2_subject, arg1 = A.V1) -> 1
      else -> noWhenBranchMatchedException()
    }
  } /*~> Unit */
}

fun testAnnotated_throwsJvm(a: A) {
  { // BLOCK
    konst tmp3_subject: A = a
    when {
      EQEQ(arg0 = tmp3_subject, arg1 = A.V1) -> 1
      else -> noWhenBranchMatchedException()
    }
  } /*~> Unit */
}

fun testExpression_throws(a: A): Int {
  return { // BLOCK
    konst tmp4_subject: A = a
    when {
      EQEQ(arg0 = tmp4_subject, arg1 = A.V1) -> 1
      else -> noWhenBranchMatchedException()
    }
  }
}

fun testIfTheElseStatement_empty(a: A, flag: Boolean) {
  when {
    flag -> 0
    else -> { // BLOCK
      konst tmp5_subject: A = a
      when {
        EQEQ(arg0 = tmp5_subject, arg1 = A.V1) -> 1
        else -> noWhenBranchMatchedException()
      }
    }
  } /*~> Unit */
}

fun testIfTheElseParenthesized_throwsJvm(a: A, flag: Boolean) {
  when {
    flag -> 0
    else -> { // BLOCK
      konst tmp6_subject: A = a
      when {
        EQEQ(arg0 = tmp6_subject, arg1 = A.V1) -> 1
        else -> noWhenBranchMatchedException()
      }
    }
  } /*~> Unit */
}

fun testIfTheElseAnnotated_throwsJvm(a: A, flag: Boolean) {
  when {
    flag -> 0
    else -> { // BLOCK
      konst tmp7_subject: A = a
      when {
        EQEQ(arg0 = tmp7_subject, arg1 = A.V1) -> 1
        else -> noWhenBranchMatchedException()
      }
    }
  } /*~> Unit */
}

fun testLambdaResultExpression_throws(a: A) {
  local fun <anonymous>(): Int {
    return { // BLOCK
      konst tmp8_subject: A = a
      when {
        EQEQ(arg0 = tmp8_subject, arg1 = A.V1) -> 1
        else -> noWhenBranchMatchedException()
      }
    }
  }
.invoke() /*~> Unit */
}
