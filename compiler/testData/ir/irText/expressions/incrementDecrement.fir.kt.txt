var p: Int
  field = 0
  get
  set

konst arr: IntArray
  field = intArrayOf(elements = [1, 2, 3])
  get

class C {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  var p: Int
    field = 0
    get
    set

  operator fun get(i: Int): Int {
    return i
  }

  operator fun set(i: Int, konstue: Int) {
  }

}

object O {
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  var p: Int
    field = 0
    get
    set

  operator fun get(i: Int): Int {
    return i
  }

  operator fun set(i: Int, konstue: Int) {
  }

}

fun testVarPrefix() {
  var x: Int = 0
  konst x1: Int = { // BLOCK
    x = x.inc()
    x
  }
  konst x2: Int = { // BLOCK
    x = x.dec()
    x
  }
}

fun testVarPostfix() {
  var x: Int = 0
  konst x1: Int = { // BLOCK
    konst <unary>: Int = x
    x = <unary>.inc()
    <unary>
  }
  konst x2: Int = { // BLOCK
    konst <unary>: Int = x
    x = <unary>.dec()
    <unary>
  }
}

fun testPropPrefix() {
  konst p1: Int = { // BLOCK
    <set-p>(<set-?> = <get-p>().inc())
    <get-p>()
  }
  konst p2: Int = { // BLOCK
    <set-p>(<set-?> = <get-p>().dec())
    <get-p>()
  }
}

fun testPropPostfix() {
  konst p1: Int = { // BLOCK
    konst <unary>: Int = <get-p>()
    <set-p>(<set-?> = <unary>.inc())
    <unary>
  }
  konst p2: Int = { // BLOCK
    konst <unary>: Int = <get-p>()
    <set-p>(<set-?> = <unary>.dec())
    <unary>
  }
}

fun testArrayPrefix() {
  konst a1: Int = { // BLOCK
    konst <array>: IntArray = <get-arr>()
    konst <index_0>: Int = 0
    <array>.set(index = <index_0>, konstue = <array>.get(index = <index_0>).inc())
    <array>.get(index = <index_0>)
  }
  konst a2: Int = { // BLOCK
    konst <array>: IntArray = <get-arr>()
    konst <index_0>: Int = 0
    <array>.set(index = <index_0>, konstue = <array>.get(index = <index_0>).dec())
    <array>.get(index = <index_0>)
  }
}

fun testArrayPostfix() {
  konst a1: Int = { // BLOCK
    konst <array>: IntArray = <get-arr>()
    konst <index_0>: Int = 0
    konst <unary>: Int = <array>.get(index = <index_0>)
    <array>.set(index = <index_0>, konstue = <unary>.inc())
    <unary>
  }
  konst a2: Int = { // BLOCK
    konst <array>: IntArray = <get-arr>()
    konst <index_0>: Int = 0
    konst <unary>: Int = <array>.get(index = <index_0>)
    <array>.set(index = <index_0>, konstue = <unary>.dec())
    <unary>
  }
}

fun testClassPropPrefix() {
  konst p1: Int = { // BLOCK
    konst <receiver>: C = C()
    <receiver>.<set-p>(<set-?> = <receiver>.<get-p>().inc())
    <receiver>.<get-p>()
  }
  konst p2: Int = { // BLOCK
    konst <receiver>: C = C()
    <receiver>.<set-p>(<set-?> = <receiver>.<get-p>().dec())
    <receiver>.<get-p>()
  }
}

fun testClassPropPostfix() {
  konst p1: Int = { // BLOCK
    konst <receiver>: C = C()
    konst <unary>: Int = <receiver>.<get-p>()
    <receiver>.<set-p>(<set-?> = <unary>.inc())
    <unary>
  }
  konst p2: Int = { // BLOCK
    konst <receiver>: C = C()
    konst <unary>: Int = <receiver>.<get-p>()
    <receiver>.<set-p>(<set-?> = <unary>.dec())
    <unary>
  }
}

fun testClassOperatorPrefix() {
  konst a1: Int = { // BLOCK
    konst <array>: C = C()
    konst <index_0>: Int = 0
    <array>.set(i = <index_0>, konstue = <array>.get(i = <index_0>).inc())
    <array>.get(i = <index_0>)
  }
  konst a2: Int = { // BLOCK
    konst <array>: C = C()
    konst <index_0>: Int = 0
    <array>.set(i = <index_0>, konstue = <array>.get(i = <index_0>).dec())
    <array>.get(i = <index_0>)
  }
}

fun testClassOperatorPostfix() {
  konst a1: Int = { // BLOCK
    konst <array>: C = C()
    konst <index_0>: Int = 0
    konst <unary>: Int = <array>.get(i = <index_0>)
    <array>.set(i = <index_0>, konstue = <unary>.inc())
    <unary>
  }
  konst a2: Int = { // BLOCK
    konst <array>: C = C()
    konst <index_0>: Int = 0
    konst <unary>: Int = <array>.get(i = <index_0>)
    <array>.set(i = <index_0>, konstue = <unary>.dec())
    <unary>
  }
}

fun testObjectPropPrefix() {
  konst p1: Int = { // BLOCK
    O.<set-p>(<set-?> = O.<get-p>().inc())
    O.<get-p>()
  }
  konst p2: Int = { // BLOCK
    O.<set-p>(<set-?> = O.<get-p>().dec())
    O.<get-p>()
  }
}

fun testObjectPropPostfix() {
  konst p1: Int = { // BLOCK
    konst <unary>: Int = O.<get-p>()
    O.<set-p>(<set-?> = <unary>.inc())
    <unary>
  }
  konst p2: Int = { // BLOCK
    konst <unary>: Int = O.<get-p>()
    O.<set-p>(<set-?> = <unary>.dec())
    <unary>
  }
}

fun testObjectOperatorPrefix() {
  konst a1: Int = { // BLOCK
    konst <array>: O = O
    konst <index_0>: Int = 0
    <array>.set(i = <index_0>, konstue = <array>.get(i = <index_0>).inc())
    <array>.get(i = <index_0>)
  }
  konst a2: Int = { // BLOCK
    konst <array>: O = O
    konst <index_0>: Int = 0
    <array>.set(i = <index_0>, konstue = <array>.get(i = <index_0>).dec())
    <array>.get(i = <index_0>)
  }
}

fun testObjectOperatorPostfix() {
  konst a1: Int = { // BLOCK
    konst <array>: O = O
    konst <index_0>: Int = 0
    konst <unary>: Int = <array>.get(i = <index_0>)
    <array>.set(i = <index_0>, konstue = <unary>.inc())
    <unary>
  }
  konst a2: Int = { // BLOCK
    konst <array>: O = O
    konst <index_0>: Int = 0
    konst <unary>: Int = <array>.get(i = <index_0>)
    <array>.set(i = <index_0>, konstue = <unary>.dec())
    <unary>
  }
}
