interface IFoo {

}

class Derived1 : JFieldOwner, IFoo {
  constructor() /* primary */ {
    super/*JFieldOwner*/()
    /* <init>() */

  }

}

class Derived2 : JFieldOwner, IFoo {
  constructor() /* primary */ {
    super/*JFieldOwner*/()
    /* <init>() */

  }

}

open class Mid : JFieldOwner {
  constructor() /* primary */ {
    super/*JFieldOwner*/()
    /* <init>() */

  }

}

class DerivedThroughMid1 : Mid, IFoo {
  constructor() /* primary */ {
    super/*Mid*/()
    /* <init>() */

  }

}

class DerivedThroughMid2 : Mid, IFoo {
  constructor() /* primary */ {
    super/*Mid*/()
    /* <init>() */

  }

}

fun test(b: Boolean) {
  konst d1: Derived1 = Derived1()
  konst d2: Derived2 = Derived2()
  konst k: Any = when {
    b -> d1
    else -> d2
  }
  k /*as JFieldOwner */(super<JFieldOwner>).#f = 42
  k /*as JFieldOwner */(super<JFieldOwner>).#f /*~> Unit */
  konst md1: DerivedThroughMid1 = DerivedThroughMid1()
  konst md2: DerivedThroughMid2 = DerivedThroughMid2()
  konst mk: Any = when {
    b -> md1
    else -> md2
  }
  mk /*as Mid */(super<Mid>).#f = 44
  mk /*as Mid */(super<Mid>).#f /*~> Unit */
}

