FILE fqName:<root> fileName:/when.kt
  CLASS OBJECT name:A modality:FINAL visibility:public superTypes:[kotlin.Any]
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:<root>.A
    CONSTRUCTOR visibility:private <> () returnType:<root>.A [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS OBJECT name:A modality:FINAL visibility:public superTypes:[kotlin.Any]'
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
      VALUE_PARAMETER name:other index:0 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int [fake_override]
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String [fake_override]
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
  FUN name:testWithSubject visibility:public modality:FINAL <> (x:kotlin.Any?) returnType:kotlin.String
    VALUE_PARAMETER name:x index:0 type:kotlin.Any?
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun testWithSubject (x: kotlin.Any?): kotlin.String declared in <root>'
        BLOCK type=kotlin.String origin=WHEN
          VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:kotlin.Any? [konst]
            GET_VAR 'x: kotlin.Any? declared in <root>.testWithSubject' type=kotlin.Any? origin=null
          WHEN type=kotlin.String origin=WHEN
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'konst tmp_0: kotlin.Any? declared in <root>.testWithSubject' type=kotlin.Any? origin=null
                arg1: CONST Null type=kotlin.Nothing? konstue=null
              then: CONST String type=kotlin.String konstue="null"
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                arg0: GET_VAR 'konst tmp_0: kotlin.Any? declared in <root>.testWithSubject' type=kotlin.Any? origin=null
                arg1: GET_OBJECT 'CLASS OBJECT name:A modality:FINAL visibility:public superTypes:[kotlin.Any]' type=<root>.A
              then: CONST String type=kotlin.String konstue="A"
            BRANCH
              if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.String
                GET_VAR 'konst tmp_0: kotlin.Any? declared in <root>.testWithSubject' type=kotlin.Any? origin=null
              then: CONST String type=kotlin.String konstue="String"
            BRANCH
              if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=kotlin.Number
                GET_VAR 'konst tmp_0: kotlin.Any? declared in <root>.testWithSubject' type=kotlin.Any? origin=null
              then: CONST String type=kotlin.String konstue="!Number"
            BRANCH
              if: CALL 'public final fun contains <T> (element: T of kotlin.collections.contains): kotlin.Boolean declared in kotlin.collections' type=kotlin.Boolean origin=IN
                <T>: kotlin.Number
                $receiver: CALL 'public final fun setOf <T> (): kotlin.collections.Set<T of kotlin.collections.setOf> declared in kotlin.collections' type=kotlin.collections.Set<kotlin.Nothing> origin=null
                  <T>: kotlin.Nothing
                element: TYPE_OP type=kotlin.Number origin=IMPLICIT_CAST typeOperand=kotlin.Number
                  GET_VAR 'konst tmp_0: kotlin.Any? declared in <root>.testWithSubject' type=kotlin.Any? origin=null
              then: CONST String type=kotlin.String konstue="nothingness?"
            BRANCH
              if: CONST Boolean type=kotlin.Boolean konstue=true
              then: CONST String type=kotlin.String konstue="something"
  FUN name:test visibility:public modality:FINAL <> (x:kotlin.Any?) returnType:kotlin.String
    VALUE_PARAMETER name:x index:0 type:kotlin.Any?
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun test (x: kotlin.Any?): kotlin.String declared in <root>'
        WHEN type=kotlin.String origin=WHEN
          BRANCH
            if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'x: kotlin.Any? declared in <root>.test' type=kotlin.Any? origin=null
              arg1: CONST Null type=kotlin.Nothing? konstue=null
            then: CONST String type=kotlin.String konstue="null"
          BRANCH
            if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'x: kotlin.Any? declared in <root>.test' type=kotlin.Any? origin=null
              arg1: GET_OBJECT 'CLASS OBJECT name:A modality:FINAL visibility:public superTypes:[kotlin.Any]' type=<root>.A
            then: CONST String type=kotlin.String konstue="A"
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=INSTANCEOF typeOperand=kotlin.String
              GET_VAR 'x: kotlin.Any? declared in <root>.test' type=kotlin.Any? origin=null
            then: CONST String type=kotlin.String konstue="String"
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=kotlin.Number
              GET_VAR 'x: kotlin.Any? declared in <root>.test' type=kotlin.Any? origin=null
            then: CONST String type=kotlin.String konstue="!Number"
          BRANCH
            if: CALL 'public final fun contains <T> (element: T of kotlin.collections.contains): kotlin.Boolean declared in kotlin.collections' type=kotlin.Boolean origin=IN
              <T>: kotlin.Number
              $receiver: CALL 'public final fun setOf <T> (): kotlin.collections.Set<T of kotlin.collections.setOf> declared in kotlin.collections' type=kotlin.collections.Set<kotlin.Nothing> origin=null
                <T>: kotlin.Nothing
              element: TYPE_OP type=kotlin.Number origin=IMPLICIT_CAST typeOperand=kotlin.Number
                GET_VAR 'x: kotlin.Any? declared in <root>.test' type=kotlin.Any? origin=null
            then: CONST String type=kotlin.String konstue="nothingness?"
          BRANCH
            if: CONST Boolean type=kotlin.Boolean konstue=true
            then: CONST String type=kotlin.String konstue="something"
  FUN name:testComma visibility:public modality:FINAL <> (x:kotlin.Int) returnType:kotlin.String
    VALUE_PARAMETER name:x index:0 type:kotlin.Int
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun testComma (x: kotlin.Int): kotlin.String declared in <root>'
        BLOCK type=kotlin.String origin=WHEN
          VAR IR_TEMPORARY_VARIABLE name:tmp_1 type:kotlin.Int [konst]
            GET_VAR 'x: kotlin.Int declared in <root>.testComma' type=kotlin.Int origin=null
          WHEN type=kotlin.String origin=WHEN
            BRANCH
              if: WHEN type=kotlin.Boolean origin=OROR
                BRANCH
                  if: WHEN type=kotlin.Boolean origin=OROR
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR 'konst tmp_1: kotlin.Int declared in <root>.testComma' type=kotlin.Int origin=null
                        arg1: CONST Int type=kotlin.Int konstue=1
                      then: CONST Boolean type=kotlin.Boolean konstue=true
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean konstue=true
                      then: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR 'konst tmp_1: kotlin.Int declared in <root>.testComma' type=kotlin.Int origin=null
                        arg1: CONST Int type=kotlin.Int konstue=2
                  then: CONST Boolean type=kotlin.Boolean konstue=true
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean konstue=true
                  then: WHEN type=kotlin.Boolean origin=OROR
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR 'konst tmp_1: kotlin.Int declared in <root>.testComma' type=kotlin.Int origin=null
                        arg1: CONST Int type=kotlin.Int konstue=3
                      then: CONST Boolean type=kotlin.Boolean konstue=true
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean konstue=true
                      then: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR 'konst tmp_1: kotlin.Int declared in <root>.testComma' type=kotlin.Int origin=null
                        arg1: CONST Int type=kotlin.Int konstue=4
              then: CONST String type=kotlin.String konstue="1234"
            BRANCH
              if: WHEN type=kotlin.Boolean origin=OROR
                BRANCH
                  if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'konst tmp_1: kotlin.Int declared in <root>.testComma' type=kotlin.Int origin=null
                    arg1: CONST Int type=kotlin.Int konstue=5
                  then: CONST Boolean type=kotlin.Boolean konstue=true
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean konstue=true
                  then: WHEN type=kotlin.Boolean origin=OROR
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR 'konst tmp_1: kotlin.Int declared in <root>.testComma' type=kotlin.Int origin=null
                        arg1: CONST Int type=kotlin.Int konstue=6
                      then: CONST Boolean type=kotlin.Boolean konstue=true
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean konstue=true
                      then: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        arg0: GET_VAR 'konst tmp_1: kotlin.Int declared in <root>.testComma' type=kotlin.Int origin=null
                        arg1: CONST Int type=kotlin.Int konstue=7
              then: CONST String type=kotlin.String konstue="567"
            BRANCH
              if: WHEN type=kotlin.Boolean origin=OROR
                BRANCH
                  if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'konst tmp_1: kotlin.Int declared in <root>.testComma' type=kotlin.Int origin=null
                    arg1: CONST Int type=kotlin.Int konstue=8
                  then: CONST Boolean type=kotlin.Boolean konstue=true
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean konstue=true
                  then: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                    arg0: GET_VAR 'konst tmp_1: kotlin.Int declared in <root>.testComma' type=kotlin.Int origin=null
                    arg1: CONST Int type=kotlin.Int konstue=9
              then: CONST String type=kotlin.String konstue="89"
            BRANCH
              if: CONST Boolean type=kotlin.Boolean konstue=true
              then: CONST String type=kotlin.String konstue="?"
