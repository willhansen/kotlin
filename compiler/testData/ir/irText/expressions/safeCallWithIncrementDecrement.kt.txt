package test

class C {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

var C?.p: Int
  get(): Int {
    return 42
  }
  set(konstue: Int) {
  }

operator fun Int?.inc(): Int? {
  return { // BLOCK
    konst tmp0_safe_receiver: Int? = <this>
    when {
      EQEQ(arg0 = tmp0_safe_receiver, arg1 = null) -> null
      else -> tmp0_safe_receiver.inc()
    }
  }
}

operator fun Int?.get(index: Int): Int {
  return 42
}

operator fun Int?.set(index: Int, konstue: Int) {
}

fun testProperty(nc: C?) {
  { // BLOCK
    konst tmp0_safe_receiver: C? = nc
    when {
      EQEQ(arg0 = tmp0_safe_receiver, arg1 = null) -> null
      else -> { // BLOCK
        konst tmp1_receiver: C? = tmp0_safe_receiver
        { // BLOCK
          konst tmp2: Int = tmp1_receiver.<get-p>()
          tmp1_receiver.<set-p>(konstue = tmp2.inc())
          tmp2
        }
      }
    }
  } /*~> Unit */
}

fun testArrayAccess(nc: C?) {
  { // BLOCK
    konst tmp1_array: Int? = { // BLOCK
      konst tmp0_safe_receiver: C? = nc
      when {
        EQEQ(arg0 = tmp0_safe_receiver, arg1 = null) -> null
        else -> tmp0_safe_receiver.<get-p>()
      }
    }
    konst tmp2_index0: Int = 0
    konst tmp3: Int = tmp1_array.get(index = tmp2_index0)
    tmp1_array.set(index = tmp2_index0, konstue = tmp3.inc())
    tmp3
  } /*~> Unit */
}
