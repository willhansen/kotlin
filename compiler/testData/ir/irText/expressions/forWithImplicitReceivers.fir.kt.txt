object FiveTimes {
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class IntCell {
  constructor(konstue: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  var konstue: Int
    field = konstue
    get
    set

}

interface IReceiver {
  operator fun FiveTimes.iterator(): IntCell {
    return IntCell(konstue = 5)
  }

  operator fun IntCell.hasNext(): Boolean {
    return greater(arg0 = <this>.<get-konstue>(), arg1 = 0)
  }

  operator fun IntCell.next(): Int {
    return { // BLOCK
      konst <unary>: Int = <this>.<get-konstue>()
      <this>.<set-konstue>(<set-?> = <unary>.dec())
      <unary>
    }
  }

}

fun IReceiver.test() {
  { // BLOCK
    konst <iterator>: IntCell = (<this>, FiveTimes).iterator()
    while ((<this>, <iterator>).hasNext()) { // BLOCK
      konst i: Int = (<this>, <iterator>).next()
      println(message = i)
    }
  }
}
