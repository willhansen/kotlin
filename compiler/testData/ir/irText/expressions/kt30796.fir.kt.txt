fun <T : Any?> magic(): T {
  return throw Exception()
}

fun <T : Any?> test(konstue: T, konstue2: T) {
  konst x1: Any = { // BLOCK
    konst <elvis>: T = konstue
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> 42
      else -> <elvis>
    }
  }
  konst x2: Any = { // BLOCK
    konst <elvis>: T = konstue
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> { // BLOCK
        konst <elvis>: T = konstue2
        when {
          EQEQ(arg0 = <elvis>, arg1 = null) -> 42
          else -> <elvis>
        }
      }
      else -> <elvis>
    }
  }
  konst x3: Any = { // BLOCK
    konst <elvis>: Any? = { // BLOCK
      konst <elvis>: T = konstue
      when {
        EQEQ(arg0 = <elvis>, arg1 = null) -> konstue2
        else -> <elvis>
      }
    }
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> 42
      else -> <elvis>
    }
  }
  konst x4: Any = { // BLOCK
    konst <elvis>: Any? = { // BLOCK
      konst <elvis>: T = konstue
      when {
        EQEQ(arg0 = <elvis>, arg1 = null) -> konstue2
        else -> <elvis>
      }
    }
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> 42
      else -> <elvis>
    }
  }
  konst x5: Any = { // BLOCK
    konst <elvis>: Any? = magic<Any?>()
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> 42
      else -> <elvis>
    }
  }
  konst x6: Any = { // BLOCK
    konst <elvis>: Any? = { // BLOCK
      konst <elvis>: T = konstue
      when {
        EQEQ(arg0 = <elvis>, arg1 = null) -> magic<Any?>()
        else -> <elvis>
      }
    }
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> 42
      else -> <elvis>
    }
  }
  konst x7: Any = { // BLOCK
    konst <elvis>: Any? = { // BLOCK
      konst <elvis>: Any? = magic<Any?>()
      when {
        EQEQ(arg0 = <elvis>, arg1 = null) -> konstue
        else -> <elvis>
      }
    }
    when {
      EQEQ(arg0 = <elvis>, arg1 = null) -> 42
      else -> <elvis>
    }
  }
}
