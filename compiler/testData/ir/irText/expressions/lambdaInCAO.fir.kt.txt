operator fun Any.plusAssign(lambda: Function0<Unit>) {
}

operator fun Any.get(index: Function0<Unit>): Int {
  return 42
}

operator fun Any.set(index: Function0<Unit>, konstue: Int) {
}

fun test1(a: Any) {
  a.plusAssign(lambda = local fun <anonymous>() {
    return Unit
  }
)
}

fun test2(a: Any) {
  { // BLOCK
    konst <array>: Any = a
    konst <index_0>: Function0<Unit> = local fun <anonymous>() {
      return Unit
    }

    <array>.set(index = <index_0>, konstue = <array>.get(index = <index_0>).plus(other = 42))
  }
}

fun test3(a: Any) {
  konst <array>: Any = a
  konst <index_0>: Function0<Unit> = local fun <anonymous>() {
    return Unit
  }

  konst <unary>: Int = <array>.get(index = <index_0>)
  <array>.set(index = <index_0>, konstue = <unary>.inc())
  <unary> /*~> Unit */
}
