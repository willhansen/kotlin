fun WithCompanion.test() {
  konst test1: <no name provided> = { // BLOCK
    local class <no name provided> : WithCompanion {
      constructor() /* primary */ {
        super/*WithCompanion*/(a = Companion)
        /* <init>() */

      }

    }

    <no name provided>()
  }
  konst test2: <no name provided> = { // BLOCK
    local class <no name provided> : WithCompanion {
      constructor() /* primary */ {
        super/*WithCompanion*/(a = Companion.foo())
        /* <init>() */

      }

    }

    <no name provided>()
  }
}

open class WithCompanion {
  constructor(a: Companion) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun foo(): Companion {
      return <this>
    }

  }

}
