@kotlin.Metadata
public final class test/BoxKt {
    // source: 'box.kt'
    private final static @test.As(konstue=[test.A(konstue="field1"), test.A(konstue="field2")]) @org.jetbrains.annotations.NotNull field o: java.lang.String
    static method <clinit>(): void
    public final static @test.As(konstue=[test.A(konstue="useSitePropertyGetter1"), test.A(konstue="useSitePropertyGetter2")]) @org.jetbrains.annotations.NotNull method getO(): java.lang.String
    public synthetic deprecated static @test.As(konstue=[test.A(konstue="topLevelProperty1"), test.A(konstue="topLevelProperty2")]) method getZ$annotations(p0: java.lang.String): void
    public final static @test.As(konstue=[test.A(konstue="propertyGetter1"), test.A(konstue="propertyGetter2")]) @org.jetbrains.annotations.NotNull method getZ(@org.jetbrains.annotations.NotNull p0: java.lang.String): test.Z
    public final static @test.As(konstue=[test.A(konstue="propertySetter1"), test.A(konstue="propertySetter2")]) method setZ(@org.jetbrains.annotations.NotNull p0: java.lang.String, @org.jetbrains.annotations.NotNull p1: test.Z): void
    public final static @test.As(konstue=[test.A(konstue="topLevelFunction1"), test.A(konstue="topLevelFunction2")]) method topLevelFunction2(@test.As(konstue=[test.A(konstue="parameter1"), test.A(konstue="parameter2")]) @org.jetbrains.annotations.NotNull p0: java.lang.String): void
}

@test.As(konstue=[test.A(konstue="nestedClass1"), test.A(konstue="nestedClass2")])
@java.lang.annotation.Retention(konstue=RUNTIME)
@kotlin.Metadata
public annotation class test/Z$Nested {
    // source: 'box.kt'
    public inner class test/Z$Nested
}

@test.As(konstue=[test.A(konstue="class1"), test.A(konstue="class2")])
@kotlin.Metadata
public final class test/Z {
    // source: 'box.kt'
    public @test.As(konstue=[test.A(konstue="constructor1"), test.A(konstue="constructor2")]) method <init>(): void
    public synthetic deprecated static @test.As(konstue=[test.A(konstue="memberProperty1"), test.A(konstue="memberProperty2")]) method getMemberProperty$annotations(): void
    public final @test.As(konstue=[test.A(konstue="propertyGetter1"), test.A(konstue="propertyGetter2")]) method getMemberProperty(): int
    public final @test.As(konstue=[test.A(konstue="memberFunction1"), test.A(konstue="memberFunction2")]) method memberFunction(): void
    public final @test.As(konstue=[test.A(konstue="propertySetter1"), test.A(konstue="propertySetter2")]) method setMemberProperty(p0: int): void
    public inner class test/Z$Nested
}
