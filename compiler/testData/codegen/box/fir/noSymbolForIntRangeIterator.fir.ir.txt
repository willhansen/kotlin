FILE fqName:<root> fileName:/noSymbolForIntRangeIterator.kt
  PROPERTY name:result visibility:public modality:FINAL [var]
    FIELD PROPERTY_BACKING_FIELD name:result type:kotlin.Int visibility:private [static]
      EXPRESSION_BODY
        CONST Int type=kotlin.Int konstue=0
    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-result> visibility:public modality:FINAL <> () returnType:kotlin.Int
      correspondingProperty: PROPERTY name:result visibility:public modality:FINAL [var]
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun <get-result> (): kotlin.Int declared in <root>'
          GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:result type:kotlin.Int visibility:private [static]' type=kotlin.Int origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR name:<set-result> visibility:public modality:FINAL <> (<set-?>:kotlin.Int) returnType:kotlin.Unit
      correspondingProperty: PROPERTY name:result visibility:public modality:FINAL [var]
      VALUE_PARAMETER name:<set-?> index:0 type:kotlin.Int
      BLOCK_BODY
        SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:result type:kotlin.Int visibility:private [static]' type=kotlin.Unit origin=null
          konstue: GET_VAR '<set-?>: kotlin.Int declared in <root>.<set-result>' type=kotlin.Int origin=null
  FUN name:takeString visibility:public modality:FINAL <> (s:kotlin.String) returnType:kotlin.Unit
    VALUE_PARAMETER name:s index:0 type:kotlin.String
    BLOCK_BODY
      CALL 'public final fun forEach <T> (action: kotlin.Function1<T of kotlin.collections.forEach, kotlin.Unit>): kotlin.Unit declared in kotlin.collections' type=kotlin.Unit origin=null
        <T>: kotlin.String
        $receiver: CALL 'public final fun split (vararg delimiters: kotlin.String, ignoreCase: kotlin.Boolean, limit: kotlin.Int): kotlin.collections.List<kotlin.String> declared in kotlin.text' type=kotlin.collections.List<kotlin.String> origin=null
          $receiver: GET_VAR 's: kotlin.String declared in <root>.takeString' type=kotlin.String origin=null
          delimiters: VARARG type=kotlin.Array<out kotlin.String> varargElementType=kotlin.String
            CONST String type=kotlin.String konstue="\n"
        action: FUN_EXPR type=kotlin.Function1<kotlin.String, kotlin.Unit> origin=LAMBDA
          FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> (it:kotlin.String) returnType:kotlin.Unit
            VALUE_PARAMETER name:it index:0 type:kotlin.String
            BLOCK_BODY
              CALL 'public final fun <set-result> (<set-?>: kotlin.Int): kotlin.Unit declared in <root>' type=kotlin.Unit origin=EQ
                <set-?>: CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
                  $this: CALL 'public final fun <get-result> (): kotlin.Int declared in <root>' type=kotlin.Int origin=GET_PROPERTY
                  other: BLOCK type=kotlin.Int origin=ELVIS
                    VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:kotlin.Int? [konst]
                      CALL 'public final fun toIntOrNull (): kotlin.Int? declared in kotlin.text' type=kotlin.Int? origin=null
                        $receiver: GET_VAR 'it: kotlin.String declared in <root>.takeString.<anonymous>' type=kotlin.String origin=null
                    WHEN type=kotlin.Int origin=ELVIS
                      BRANCH
                        if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                          arg0: GET_VAR 'konst tmp_0: kotlin.Int? declared in <root>.takeString.<anonymous>' type=kotlin.Int? origin=null
                          arg1: CONST Null type=kotlin.Nothing? konstue=null
                        then: CONST Int type=kotlin.Int konstue=0
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean konstue=true
                        then: GET_VAR 'konst tmp_0: kotlin.Int? declared in <root>.takeString.<anonymous>' type=kotlin.Int? origin=null
  FUN name:test visibility:public modality:FINAL <> () returnType:kotlin.Unit
    BLOCK_BODY
      VAR name:x type:kotlin.Int [konst]
        CONST Int type=kotlin.Int konstue=10
      VAR name:y type:kotlin.Int [konst]
        CONST Int type=kotlin.Int konstue=10
      FUN LOCAL_FUNCTION name:localFunc visibility:local modality:FINAL <> () returnType:kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Unit origin=FOR_LOOP
            VAR FOR_LOOP_ITERATOR name:tmp_1 type:kotlin.collections.IntIterator [konst]
              CALL 'public open fun iterator (): kotlin.collections.IntIterator declared in kotlin.ranges.IntRange' type=kotlin.collections.IntIterator origin=FOR_LOOP_ITERATOR
                $this: CALL 'public final fun rangeTo (other: kotlin.Int): kotlin.ranges.IntRange declared in kotlin.Int' type=kotlin.ranges.IntRange origin=RANGE
                  $this: CONST Int type=kotlin.Int konstue=0
                  other: GET_VAR 'konst x: kotlin.Int declared in <root>.test' type=kotlin.Int origin=null
            WHILE label=null origin=FOR_LOOP_INNER_WHILE
              condition: CALL 'public abstract fun hasNext (): kotlin.Boolean declared in kotlin.collections.IntIterator' type=kotlin.Boolean origin=FOR_LOOP_HAS_NEXT
                $this: GET_VAR 'konst tmp_1: kotlin.collections.IntIterator declared in <root>.test.localFunc' type=kotlin.collections.IntIterator origin=null
              body: BLOCK type=kotlin.Unit origin=FOR_LOOP_INNER_WHILE
                VAR FOR_LOOP_VARIABLE name:i type:kotlin.Int [konst]
                  CALL 'public final fun next (): kotlin.Int declared in kotlin.collections.IntIterator' type=kotlin.Int origin=FOR_LOOP_NEXT
                    $this: GET_VAR 'konst tmp_1: kotlin.collections.IntIterator declared in <root>.test.localFunc' type=kotlin.collections.IntIterator origin=null
                BLOCK type=kotlin.Unit origin=null
                  VAR name:s type:kotlin.String [konst]
                    CALL 'public final fun buildString (builderAction: @[ExtensionFunctionType] kotlin.Function1<java.lang.StringBuilder, kotlin.Unit>): kotlin.String declared in kotlin.text' type=kotlin.String origin=null
                      builderAction: FUN_EXPR type=@[ExtensionFunctionType] kotlin.Function1<java.lang.StringBuilder, kotlin.Unit> origin=LAMBDA
                        FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> ($receiver:java.lang.StringBuilder) returnType:kotlin.Unit
                          $receiver: VALUE_PARAMETER name:$this$buildString type:java.lang.StringBuilder
                          BLOCK_BODY
                            BLOCK type=kotlin.Unit origin=FOR_LOOP
                              VAR FOR_LOOP_ITERATOR name:tmp_2 type:kotlin.collections.IntIterator [konst]
                                CALL 'public open fun iterator (): kotlin.collections.IntIterator declared in kotlin.ranges.IntRange' type=kotlin.collections.IntIterator origin=FOR_LOOP_ITERATOR
                                  $this: CALL 'public final fun rangeTo (other: kotlin.Int): kotlin.ranges.IntRange declared in kotlin.Int' type=kotlin.ranges.IntRange origin=RANGE
                                    $this: CONST Int type=kotlin.Int konstue=0
                                    other: GET_VAR 'konst y: kotlin.Int declared in <root>.test' type=kotlin.Int origin=null
                              WHILE label=null origin=FOR_LOOP_INNER_WHILE
                                condition: CALL 'public abstract fun hasNext (): kotlin.Boolean declared in kotlin.collections.IntIterator' type=kotlin.Boolean origin=FOR_LOOP_HAS_NEXT
                                  $this: GET_VAR 'konst tmp_2: kotlin.collections.IntIterator declared in <root>.test.localFunc.<anonymous>' type=kotlin.collections.IntIterator origin=null
                                body: BLOCK type=kotlin.Unit origin=FOR_LOOP_INNER_WHILE
                                  VAR FOR_LOOP_VARIABLE name:j type:kotlin.Int [konst]
                                    CALL 'public final fun next (): kotlin.Int declared in kotlin.collections.IntIterator' type=kotlin.Int origin=FOR_LOOP_NEXT
                                      $this: GET_VAR 'konst tmp_2: kotlin.collections.IntIterator declared in <root>.test.localFunc.<anonymous>' type=kotlin.collections.IntIterator origin=null
                                  CALL 'public final fun appendLine (konstue: kotlin.String?): java.lang.StringBuilder declared in kotlin.text' type=java.lang.StringBuilder origin=null
                                    $receiver: GET_VAR '$this$buildString: java.lang.StringBuilder declared in <root>.test.localFunc.<anonymous>' type=java.lang.StringBuilder origin=null
                                    konstue: STRING_CONCATENATION type=kotlin.String
                                      CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MUL
                                        $this: GET_VAR 'konst i: kotlin.Int declared in <root>.test.localFunc' type=kotlin.Int origin=null
                                        other: GET_VAR 'konst j: kotlin.Int declared in <root>.test.localFunc.<anonymous>' type=kotlin.Int origin=null
                  CALL 'public final fun takeString (s: kotlin.String): kotlin.Unit declared in <root>' type=kotlin.Unit origin=null
                    s: GET_VAR 'konst s: kotlin.String declared in <root>.test.localFunc' type=kotlin.String origin=null
      CALL 'local final fun localFunc (): kotlin.Unit declared in <root>.test' type=kotlin.Unit origin=null
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      CALL 'public final fun test (): kotlin.Unit declared in <root>' type=kotlin.Unit origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        WHEN type=kotlin.String origin=IF
          BRANCH
            if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: CALL 'public final fun <get-result> (): kotlin.Int declared in <root>' type=kotlin.Int origin=GET_PROPERTY
              arg1: CONST Int type=kotlin.Int konstue=3025
            then: CONST String type=kotlin.String konstue="OK"
          BRANCH
            if: CONST Boolean type=kotlin.Boolean konstue=true
            then: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String konstue="Fail: "
              CALL 'public final fun <get-result> (): kotlin.Int declared in <root>' type=kotlin.Int origin=GET_PROPERTY
