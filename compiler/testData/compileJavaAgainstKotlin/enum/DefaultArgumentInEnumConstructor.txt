package test

public open class DefaultArgumentInEnumConstructor {
    public constructor DefaultArgumentInEnumConstructor()

    // Static members
    public/*package*/ final var entry: test.K!
}

public final enum class K : kotlin.Enum<test.K> {
    enum entry ENTRY

    private constructor K(/*0*/ kotlin.String = ...)
    private final konst default: kotlin.String
    @kotlin.internal.IntrinsicConstEkonstuation public final /*fake_override*/ konst name: kotlin.String
    public final /*fake_override*/ konst ordinal: kotlin.Int
    protected final /*fake_override*/ fun clone(): kotlin.Any
    public final /*fake_override*/ fun compareTo(/*0*/ test.K): kotlin.Int
    protected/*protected and package*/ final /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.K!>!

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.K>
    public final /*synthesized*/ fun konstueOf(/*0*/ kotlin.String): test.K
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.K>
}
