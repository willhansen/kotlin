package test

public final enum class MyEnum : kotlin.Enum<test.MyEnum> {
    enum entry OK

    private constructor MyEnum()
    @kotlin.internal.IntrinsicConstEkonstuation public final /*fake_override*/ konst name: kotlin.String
    public final /*fake_override*/ konst ordinal: kotlin.Int
    protected final /*fake_override*/ fun clone(): kotlin.Any
    public final /*fake_override*/ fun compareTo(/*0*/ test.MyEnum): kotlin.Int
    protected/*protected and package*/ final /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.MyEnum!>!

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.MyEnum>
    public final /*synthesized*/ fun konstueOf(/*0*/ kotlin.String): test.MyEnum
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.MyEnum>
}

public open class kt3561 {
    public constructor kt3561()
    public open fun getEntryName(): test.MyEnum!
}
