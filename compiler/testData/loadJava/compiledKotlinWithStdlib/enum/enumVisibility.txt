package test

internal final enum class In : kotlin.Enum<test.In> {
    enum entry A

    /*primary*/ private constructor In()
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
        public final override /*1*/ /*fake_override*/ fun `<get-name>`(): kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
        public final override /*1*/ /*fake_override*/ fun `<get-ordinal>`(): kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.In): kotlin.Int
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.In!>!

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.In>
        public final /*synthesized*/ fun `<get-entries>`(): kotlin.enums.EnumEntries<test.In>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.In
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.In>
}

private final enum class Pr : kotlin.Enum<test.Pr> {
    enum entry A

    /*primary*/ private constructor Pr()
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
        public final override /*1*/ /*fake_override*/ fun `<get-name>`(): kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
        public final override /*1*/ /*fake_override*/ fun `<get-ordinal>`(): kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.Pr): kotlin.Int
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.Pr!>!

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.Pr>
        public final /*synthesized*/ fun `<get-entries>`(): kotlin.enums.EnumEntries<test.Pr>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.Pr
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.Pr>
}

public final enum class Pu : kotlin.Enum<test.Pu> {
    enum entry A

    /*primary*/ private constructor Pu()
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
        public final override /*1*/ /*fake_override*/ fun `<get-name>`(): kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
        public final override /*1*/ /*fake_override*/ fun `<get-ordinal>`(): kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.Pu): kotlin.Int
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.Pu!>!

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.Pu>
        public final /*synthesized*/ fun `<get-entries>`(): kotlin.enums.EnumEntries<test.Pu>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.Pu
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.Pu>
}
