package test

public final enum class En : kotlin.Enum<test.En> {
    enum entry E1

    enum entry E2

    enum entry E3

    /*primary*/ private constructor En(/*0*/ b: kotlin.Boolean = ..., /*1*/ i: kotlin.Int = ...)
    public final konst b: kotlin.Boolean
        public final fun `<get-b>`(): kotlin.Boolean
    public final konst i: kotlin.Int
        public final fun `<get-i>`(): kotlin.Int
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
        public final override /*1*/ /*fake_override*/ fun `<get-name>`(): kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
        public final override /*1*/ /*fake_override*/ fun `<get-ordinal>`(): kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.En): kotlin.Int
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.En!>!

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.En>
        public final /*synthesized*/ fun `<get-entries>`(): kotlin.enums.EnumEntries<test.En>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.En
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.En>
}
