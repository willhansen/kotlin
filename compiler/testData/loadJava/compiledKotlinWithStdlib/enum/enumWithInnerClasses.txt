package test

public final enum class Enum : kotlin.Enum<test.Enum> {
    enum entry ENTRY1

    enum entry ENTRY2

    /*primary*/ private constructor Enum()
    public final konst c: kotlin.Int
        public final fun `<get-c>`(): kotlin.Int
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
        public final override /*1*/ /*fake_override*/ fun `<get-name>`(): kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
        public final override /*1*/ /*fake_override*/ fun `<get-ordinal>`(): kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.Enum): kotlin.Int
    public final fun f(): kotlin.Int
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.Enum!>!

    public final inner class Inner {
        /*primary*/ public constructor Inner()
    }

    public final class Nested {
        /*primary*/ public constructor Nested()
    }

    public interface Trait {
    }

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.Enum>
        public final /*synthesized*/ fun `<get-entries>`(): kotlin.enums.EnumEntries<test.Enum>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.Enum
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.Enum>
}
