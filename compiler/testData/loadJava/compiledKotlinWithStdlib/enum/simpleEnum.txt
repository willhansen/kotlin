package test

public final enum class MyEnum : kotlin.Enum<test.MyEnum> {
    enum entry ENTRY

    /*primary*/ private constructor MyEnum()
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
        public final override /*1*/ /*fake_override*/ fun `<get-name>`(): kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
        public final override /*1*/ /*fake_override*/ fun `<get-ordinal>`(): kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.MyEnum): kotlin.Int
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.MyEnum!>!

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.MyEnum>
        public final /*synthesized*/ fun `<get-entries>`(): kotlin.enums.EnumEntries<test.MyEnum>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.MyEnum
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.MyEnum>
}
