package test

public final annotation class A : kotlin.Annotation {
    /*primary*/ public constructor A()
}

public final annotation class B : kotlin.Annotation {
    /*primary*/ public constructor B()
}

public final enum class E : kotlin.Enum<test.E> {
    /*primary*/ private constructor E(/*0*/ @test.A x: kotlin.String, /*1*/ @test.B y: kotlin.Int)
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
        public final override /*1*/ /*fake_override*/ fun `<get-name>`(): kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
        public final override /*1*/ /*fake_override*/ fun `<get-ordinal>`(): kotlin.Int
    public final konst x: kotlin.String
        public final fun `<get-x>`(): kotlin.String
    public final konst y: kotlin.Int
        public final fun `<get-y>`(): kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.E): kotlin.Int
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.E!>!

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.E>
        public final /*synthesized*/ fun `<get-entries>`(): kotlin.enums.EnumEntries<test.E>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.E
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.E>
}
