public final enum class E : R|kotlin/Enum<test/E>| {
    private constructor(): R|test/E|

    public final static enum entry CAKE: R|test/E|
    public final static fun konstues(): R|kotlin/Array<test/E>| {
    }

    public final static fun konstueOf(konstue: R|kotlin/String|): R|test/E| {
    }

    public final static konst entries: R|kotlin/enums/EnumEntries<test/E>|
        public get(): R|kotlin/enums/EnumEntries<test/E>|

}

public final annotation class EnumAnno : R|kotlin/Annotation| {
    public final konst konstue: R|test/E|
        public get(): R|test/E|

    public constructor(konstue: R|test/E|): R|test/EnumAnno|

}

public final class EnumArgumentWithCustomToString : R|kotlin/Any| {
    @R|test/EnumAnno|(konstue = R|test/E.CAKE|) @R|test/EnumArrayAnno|(konstue = <implicitArrayOf>(R|test/E.CAKE|, R|test/E.CAKE|)) public final fun annotated(): R|kotlin/Unit|

    public constructor(): R|test/EnumArgumentWithCustomToString|

}

public final annotation class EnumArrayAnno : R|kotlin/Annotation| {
    public final konst konstue: R|kotlin/Array<out test/E>|
        public get(): R|kotlin/Array<out test/E>|

    public constructor(vararg konstue: R|kotlin/Array<out test/E>|): R|test/EnumArrayAnno|

}
