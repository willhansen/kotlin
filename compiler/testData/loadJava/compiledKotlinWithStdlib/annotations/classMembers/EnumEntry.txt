package test

public final annotation class Anno : kotlin.Annotation {
    /*primary*/ public constructor Anno(/*0*/ konstue: kotlin.String = ..., /*1*/ x: kotlin.Int = ...)
    public final konst konstue: kotlin.String = "0"
        public final fun `<get-konstue>`(): kotlin.String
    public final konst x: kotlin.Int = 0
        public final fun `<get-x>`(): kotlin.Int
}

public final annotation class Bnno : kotlin.Annotation {
    /*primary*/ public constructor Bnno()
}

public final enum class Eee : kotlin.Enum<test.Eee> {
    @test.Anno enum entry Entry1

    enum entry Entry2

    @test.Anno(konstue = "3") @test.Bnno enum entry Entry3

    @test.Anno(konstue = "4", x = 4) enum entry Entry4

    /*primary*/ private constructor Eee()
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
        public final override /*1*/ /*fake_override*/ fun `<get-name>`(): kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
        public final override /*1*/ /*fake_override*/ fun `<get-ordinal>`(): kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.Eee): kotlin.Int
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.Eee!>!

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.Eee>
        public final /*synthesized*/ fun `<get-entries>`(): kotlin.enums.EnumEntries<test.Eee>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.Eee
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.Eee>
}
