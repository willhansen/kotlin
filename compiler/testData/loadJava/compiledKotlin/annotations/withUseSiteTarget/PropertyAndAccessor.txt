package test

public final annotation class A : kotlin.Annotation {
    /*primary*/ public constructor A(/*0*/ konstue: kotlin.String)
    public final konst konstue: kotlin.String
        public final fun `<get-konstue>`(): kotlin.String
}

public final annotation class B : kotlin.Annotation {
    /*primary*/ public constructor B(/*0*/ konstue: kotlin.Array<kotlin.String>)
    public final konst konstue: kotlin.Array<kotlin.String>
        public final fun `<get-konstue>`(): kotlin.Array<kotlin.String>
}

public interface I {
    public abstract var getterAndSetter: kotlin.Int
        @test.A(konstue = "getter") public abstract fun `<get-getterAndSetter>`(): kotlin.Int
        @test.B(konstue = {"setter"}) public abstract fun `<set-getterAndSetter>`(/*0*/ `<set-?>`: kotlin.Int): kotlin.Unit
    @test.A(konstue = "property") public abstract var propertyAndGetter: kotlin.Int
        @test.B(konstue = {"getter"}) public abstract fun `<get-propertyAndGetter>`(): kotlin.Int
        public abstract fun `<set-propertyAndGetter>`(/*0*/ `<set-?>`: kotlin.Int): kotlin.Unit
    @test.A(konstue = "property") public abstract var propertyAndSetter: kotlin.Int
        public abstract fun `<get-propertyAndSetter>`(): kotlin.Int
        @test.B(konstue = {"setter"}) public abstract fun `<set-propertyAndSetter>`(/*0*/ `<set-?>`: kotlin.Int): kotlin.Unit
}
