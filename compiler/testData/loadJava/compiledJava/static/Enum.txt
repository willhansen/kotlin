package test

public final enum class Enum : kotlin.Enum<test.Enum!> {
    enum entry A

    enum entry B

    enum entry C

    private constructor Enum()
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.Enum!): kotlin.Int
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.Enum!>!

    public open inner class Inner {
        public constructor Inner()
        public/*package*/ open fun bar(): kotlin.Unit
        public/*package*/ open fun konstueOf(/*0*/ p0: kotlin.String!): kotlin.Unit
    }

    public open class Nested {
        public constructor Nested()
        public/*package*/ open fun foo(): kotlin.Unit
        public/*package*/ open fun konstues(): kotlin.Unit
    }

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.Enum>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.Enum
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.Enum>
}
