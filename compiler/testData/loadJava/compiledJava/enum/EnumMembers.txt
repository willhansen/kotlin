package test

public final enum class EnumMembers : kotlin.Enum<test.EnumMembers!> {
    enum entry FIRST

    enum entry SECOND

    private constructor EnumMembers(/*0*/ p0: kotlin.Boolean)
    public final konst isFirst: kotlin.Boolean
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.EnumMembers!): kotlin.Int
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public open fun first(): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.EnumMembers!>!

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.EnumMembers>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.EnumMembers
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.EnumMembers>
}
