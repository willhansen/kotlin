package test

public interface CustomAnnotation {

    public final annotation class MyAnnotation : kotlin.Annotation {
        public constructor MyAnnotation(/*0*/ konstue: test.CustomAnnotation.MyEnum)
        public final konst konstue: test.CustomAnnotation.MyEnum
    }

    public final enum class MyEnum : kotlin.Enum<test.CustomAnnotation.MyEnum!> {
        enum entry ONE

        private constructor MyEnum()
        @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
        public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
        protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.CustomAnnotation.MyEnum!): kotlin.Int
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.CustomAnnotation.MyEnum!>!

        // Static members
        public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.CustomAnnotation.MyEnum>
        public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.CustomAnnotation.MyEnum
        public final /*synthesized*/ fun konstues(): kotlin.Array<test.CustomAnnotation.MyEnum>
    }

    @test.CustomAnnotation.MyAnnotation(konstue = MyEnum.ONE) public open class MyTest {
        public constructor MyTest()
    }
}
