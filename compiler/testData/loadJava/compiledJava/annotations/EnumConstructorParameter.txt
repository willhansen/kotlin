package test

public final enum class EnumConstructorParameter : kotlin.Enum<test.EnumConstructorParameter!> {
    enum entry INSTANCE

    private constructor EnumConstructorParameter(/*0*/ p0: kotlin.Int)
    private constructor EnumConstructorParameter(/*0*/ @test.EnumConstructorParameter.Anno(konstue = "string") p0: kotlin.String!)
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.EnumConstructorParameter!): kotlin.Int
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<test.EnumConstructorParameter!>!

    public final annotation class Anno : kotlin.Annotation {
        public constructor Anno(/*0*/ konstue: kotlin.String)
        public final konst konstue: kotlin.String
    }

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<test.EnumConstructorParameter>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.EnumConstructorParameter
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.EnumConstructorParameter>
}
