package

@JR @JR.Container(konstue = {}) public fun jr1(): kotlin.Unit
@JR @JR.Container(konstue = {}) @JR public fun jr2(): kotlin.Unit
@JR @JR.Container(konstue = {JR}) @JR public fun jr3(): kotlin.Unit
@JR @JR.Container(konstue = {JR}) public fun jr4(): kotlin.Unit
@JR @JR.Container(konstue = {JR, JR}) public fun jr5(): kotlin.Unit
@JS @JS.Container(konstue = {}) public fun js1(): kotlin.Unit
@JS @JS.Container(konstue = {}) @JS public fun js2(): kotlin.Unit
@JS @JS.Container(konstue = {JS}) @JS public fun js3(): kotlin.Unit
@JS @JS.Container(konstue = {JS}) public fun js4(): kotlin.Unit
@JS @JS.Container(konstue = {JS, JS}) public fun js5(): kotlin.Unit
@KR.Container(konstue = {}) @KR public fun kr1(): kotlin.Unit
@KR.Container(konstue = {}) @KR @KR public fun kr2(): kotlin.Unit
@KR @KR @KR.Container(konstue = {KR}) public fun kr3(): kotlin.Unit
@KR.Container(konstue = {KR}) @KR public fun kr4(): kotlin.Unit
@KR @KR.Container(konstue = {KR, KR}) public fun kr5(): kotlin.Unit
@KS.Container(konstue = {}) @KS public fun ks1(): kotlin.Unit
@KS.Container(konstue = {}) @KS @KS public fun ks2(): kotlin.Unit
@KS @KS @KS.Container(konstue = {KS}) public fun ks3(): kotlin.Unit
@KS.Container(konstue = {KS}) @KS public fun ks4(): kotlin.Unit
@KS @KS.Container(konstue = {KS, KS}) public fun ks5(): kotlin.Unit

@java.lang.annotation.Repeatable(konstue = JR.Container::class) @kotlin.annotation.Retention(konstue = AnnotationRetention.RUNTIME) public final annotation class JR : kotlin.Annotation {
    public constructor JR()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final annotation class Container : kotlin.Annotation {
        public constructor Container(/*0*/ vararg konstue: JR /*kotlin.Array<out JR>*/)
        public final konst konstue: kotlin.Array<JR>
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

@java.lang.annotation.Repeatable(konstue = JS.Container::class) @kotlin.annotation.Retention(konstue = AnnotationRetention.SOURCE) public final annotation class JS : kotlin.Annotation {
    public constructor JS()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final annotation class Container : kotlin.Annotation {
        public constructor Container(/*0*/ vararg konstue: JS /*kotlin.Array<out JS>*/)
        public final konst konstue: kotlin.Array<JS>
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

@java.lang.annotation.Repeatable(konstue = KR.Container::class) @kotlin.annotation.Retention(konstue = AnnotationRetention.RUNTIME) public final annotation class KR : kotlin.Annotation {
    public constructor KR()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final annotation class Container : kotlin.Annotation {
        public constructor Container(/*0*/ konstue: kotlin.Array<KR>)
        public final konst konstue: kotlin.Array<KR>
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

@java.lang.annotation.Repeatable(konstue = KS.Container::class) @kotlin.annotation.Retention(konstue = AnnotationRetention.SOURCE) public final annotation class KS : kotlin.Annotation {
    public constructor KS()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final annotation class Container : kotlin.Annotation {
        public constructor Container(/*0*/ konstue: kotlin.Array<KS>)
        public final konst konstue: kotlin.Array<KS>
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

