package

public const konst constInitializer1: kotlin.Double = Infinity.toDouble()
public const konst constInitializer10: kotlin.Double = NaN.toDouble()
public const konst constInitializer11: kotlin.Double = NaN.toDouble()
public const konst constInitializer12: kotlin.Double = NaN.toDouble()
public const konst constInitializer13: kotlin.Double = NaN.toDouble()
public const konst constInitializer15: kotlin.Double = Infinity.toDouble()
public const konst constInitializer2: kotlin.Double = Infinity.toDouble()
public const konst constInitializer3: kotlin.Double = Infinity.toDouble()
public const konst constInitializer4: kotlin.Double = -Infinity.toDouble()
public const konst constInitializer5: kotlin.Double = NaN.toDouble()
public const konst constInitializer6: kotlin.Double = Infinity.toDouble()
public const konst constInitializer7: kotlin.Double = -Infinity.toDouble()
public const konst constInitializer8: kotlin.Double = NaN.toDouble()
public const konst constInitializer9: kotlin.Double = NaN.toDouble()
public const konst defaultGetter: kotlin.Int = 19
public const konst delegated: kotlin.Int
public const konst nonConstInitializer1: kotlin.Int
public const konst nonConstInitializer10: kotlin.Int
public const konst nonConstInitializer11: kotlin.Int
public const konst nonConstInitializer12: kotlin.Int
public const konst nonConstInitializer14: kotlin.Int
public const konst nonConstInitializer15: kotlin.Int
public const konst nonConstInitializer2: kotlin.String
public const konst nonConstInitializer3: kotlin.String
public const konst nonConstInitializer4: kotlin.Double
public const konst nonConstInitializer5: kotlin.Int
public const konst nonConstInitializer6: kotlin.Int
public const konst nonConstInitializer7: kotlin.Int
public const konst nonConstInitializer8: kotlin.Int
public const konst nonConstInitializer9: kotlin.Double
private konst privateTopLevel: kotlin.Int = 3
public const var topLeveLVar: kotlin.Int
public const konst topLevel: kotlin.Int = 0
public const konst topLevelInferred: kotlin.Int = 1
public const konst withExplicitDefaultGetter: kotlin.Int = 1
public const konst withGetter: kotlin.Int
public fun foo(): kotlin.Int

public object A {
    private constructor A()
    public const final konst inObject: kotlin.Int = 4
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class B {
    public constructor B(/*0*/ constructor: kotlin.Int = ...)
    public final konst constructor: kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public abstract class C {
    public constructor C()
    public const open konst x: kotlin.Int = 6
    public const abstract konst y: kotlin.Int = 7
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        private constructor Companion()
        public const final konst inCompaionObject: kotlin.Int = 8
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

public object D : C {
    private constructor D()
    public const final konst final: kotlin.Int = 11
    public const final konst inObject: kotlin.Int = 10
    public const final konst withoutInitializer: kotlin.Int
    public const open override /*1*/ konst x: kotlin.Int = 9
    public const abstract override /*1*/ /*fake_override*/ konst y: kotlin.Int = 7
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Delegate {
    public constructor Delegate()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final operator fun getValue(/*0*/ thisRef: kotlin.Any?, /*1*/ prop: kotlin.reflect.KProperty<*>): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final operator fun setValue(/*0*/ thisRef: kotlin.Any?, /*1*/ prop: kotlin.reflect.KProperty<*>, /*2*/ konstue: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final enum class MyEnum : kotlin.Enum<MyEnum> {
    enum entry A

    private constructor MyEnum()
    public const final konst inEnum: kotlin.Int = 17
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: MyEnum): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<MyEnum!>!
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<MyEnum>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): MyEnum
    public final /*synthesized*/ fun konstues(): kotlin.Array<MyEnum>
}

public final class Outer {
    public constructor Outer()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final inner class Inner {
        public constructor Inner()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        public object C {
            private constructor C()
            public const final konst a: kotlin.Int = 18
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }
}
