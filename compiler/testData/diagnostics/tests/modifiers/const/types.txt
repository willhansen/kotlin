package

public const konst arrayConst: kotlin.Array<kotlin.String>
public const konst boolConst: kotlin.Boolean = true
public const konst enumConst: MyEnum
public const konst intArrayConst: kotlin.IntArray
public const konst intConst: kotlin.Int = 1
public const konst longConst: kotlin.Long = 1.toLong()
public const konst stringConst: kotlin.String = "empty"
public const konst unresolvedConst1: [Error type: Not found recorded type for Unresolved]
public const var unresolvedConst2: [Error type: Not found recorded type for Unresolved]
public const konst unresolvedConst3: [Error type: Not found recorded type for Unresolved]

public final enum class MyEnum : kotlin.Enum<MyEnum> {
    enum entry A

    private constructor MyEnum()
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: MyEnum): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<MyEnum!>!
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<MyEnum>
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): MyEnum
    public final /*synthesized*/ fun konstues(): kotlin.Array<MyEnum>
}
