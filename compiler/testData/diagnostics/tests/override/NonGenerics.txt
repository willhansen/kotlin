package

package override {

    package override.normal {

        public abstract class MyAbstractClass {
            public constructor MyAbstractClass()
            public abstract konst prr: kotlin.Unit
            public abstract fun bar(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public final class MyChildClass : override.normal.MyClass {
            public constructor MyChildClass()
            public open override /*1*/ /*fake_override*/ konst pr: kotlin.Unit
            public open override /*1*/ /*fake_override*/ konst prr: kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun bar(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun foo(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public final class MyChildClass1 : override.normal.MyClass {
            public constructor MyChildClass1()
            public final override /*1*/ konst pr: kotlin.Unit
            public open override /*1*/ konst prr: kotlin.Unit
            public open override /*1*/ fun bar(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ fun foo(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public open class MyClass : override.normal.MyTrait, override.normal.MyAbstractClass {
            public constructor MyClass()
            public open override /*1*/ konst pr: kotlin.Unit
            public open override /*1*/ konst prr: kotlin.Unit
            public open override /*1*/ fun bar(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ fun foo(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public final class MyIllegalClass : override.normal.MyTrait, override.normal.MyAbstractClass {
            public constructor MyIllegalClass()
            public abstract override /*1*/ /*fake_override*/ konst pr: kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ konst prr: kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun bar(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun foo(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public final class MyIllegalClass2 : override.normal.MyTrait, override.normal.MyAbstractClass {
            public constructor MyIllegalClass2()
            public open override /*1*/ konst pr: kotlin.Unit
            public open override /*1*/ konst prr: kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun bar(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ fun foo(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public final class MyIllegalClass3 : override.normal.MyTrait, override.normal.MyAbstractClass {
            public constructor MyIllegalClass3()
            public open override /*1*/ konst pr: kotlin.Unit
            public open override /*1*/ konst prr: kotlin.Unit
            public open override /*1*/ fun bar(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun foo(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public final class MyIllegalClass4 : override.normal.MyTrait, override.normal.MyAbstractClass {
            public constructor MyIllegalClass4()
            public open konst otherPr: kotlin.Int = 1
            public final override /*1*/ konst pr: kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ konst prr: kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun bar(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ fun foo(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun other(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public interface MyTrait {
            public abstract konst pr: kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public abstract fun foo(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }
}
