package

public konst x0: [Error type: Not found recorded type for A::foo]
public konst x1: (A) -> kotlin.Unit
public konst x2: kotlin.reflect.KProperty1<A, kotlin.Int>
public konst x3: kotlin.reflect.KProperty1<A, kotlin.Int>
public konst x4: (A) -> kotlin.String
public konst y0: [Error type: Not found recorded type for A::bar]
public konst y1: (A) -> kotlin.Unit
public konst y2: kotlin.reflect.KProperty1<A, kotlin.Int>
public konst y3: kotlin.reflect.KProperty1<A, kotlin.Int>
public fun </*0*/ T> ofType(/*0*/ x: T): T
public fun A.foo(): kotlin.String

public final class A {
    public constructor A()
    public final konst bar: kotlin.Int = 0
    public final konst foo: kotlin.Int = 0
    public final fun bar(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun foo(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
