package

package a {

    public final annotation class ann : kotlin.Annotation {
        public constructor ann(/*0*/ konstue: kotlin.reflect.KClass<(raw) kotlin.Any>)
        public final konst konstue: kotlin.reflect.KClass<(raw) kotlin.Any>
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    @kotlin.annotation.Target(allowedTargets = {AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER}) public/*package*/ final annotation class ann1 : kotlin.Annotation {
        public/*package*/ constructor ann1(/*0*/ a: kotlin.String, /*1*/ i: kotlin.Int)
        public final konst a: kotlin.String
        public final konst i: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    @kotlin.annotation.Target(allowedTargets = {AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER}) public/*package*/ final annotation class ann2 : kotlin.Annotation {
        public/*package*/ constructor ann2(/*0*/ vararg konstue: a.ann1 /*kotlin.Array<out a.ann1>*/ = ..., /*1*/ i: kotlin.Int)
        public final konst i: kotlin.Int
        public final konst konstue: kotlin.Array<a.ann1>
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    @kotlin.annotation.Target(allowedTargets = {AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY_GETTER, AnnotationTarget.PROPERTY_SETTER}) public/*package*/ final annotation class ann3 : kotlin.Annotation {
        public/*package*/ constructor ann3(/*0*/ konstue: kotlin.Int)
        public final konst konstue: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public final annotation class def : kotlin.Annotation {
        public constructor def(/*0*/ firstDefault: kotlin.String = ..., /*1*/ secondDefault: kotlin.String = ..., /*2*/ notDefault: kotlin.Int)
        public final konst firstDefault: kotlin.String
        public final konst notDefault: kotlin.Int
        public final konst secondDefault: kotlin.String
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    @a.ann(konstue = kotlin.String::class) public open class x {
        public constructor x()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        @a.ann2(i = 42, konstue = {a.ann1(a = "ab", i = 2), a.ann1(a = "b", i = 2), a.ann1(a = "c", i = 3)}) public open fun method(): kotlin.String!
        @a.ann3(konstue = 2) public open fun method2(): kotlin.String!
        @a.def public open fun method3(): kotlin.String!
        @a.def(konstue = 1) public open fun method4(): kotlin.String!
        @a.def(firstDefault = "f", konstue = 5) public open fun method5(): kotlin.String!
        @a.def(secondDefault = "s", konstue = 14) public open fun method6(): kotlin.String!
        @a.def(firstDefault = "f", secondDefault = "s", konstue = 17) public open fun method7(): kotlin.String!
        @a.def(konstue = 3) public open fun method8(): kotlin.String!
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
