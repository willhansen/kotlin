package

public konst test11: AnObject
public konst test12: GenericTestObject<*> /* = AnObject */
public konst test13: kotlin.String = "OK"
public konst test14: kotlin.String
public konst test25: GenericClassWithCompanion.Companion
public konst test26: GenericClassWithCompanion.Companion
public konst test27: kotlin.String = "OK"
public konst test28: kotlin.String

public object AnObject {
    private constructor AnObject()
    public final konst ok: kotlin.String = "OK"
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun foo(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class GenericClassWithCompanion</*0*/ T> {
    public constructor GenericClassWithCompanion</*0*/ T>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        private constructor Companion()
        public final konst ok: kotlin.String = "OK"
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final fun foo(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
public typealias GenericTestObject</*0*/ T> = AnObject
public typealias TestGCWC</*0*/ T> = GenericClassWithCompanion<T>
