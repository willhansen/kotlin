package

public konst p1: Pair<kotlin.Int, kotlin.Int>
public konst test1: kotlin.Int
public konst test2: kotlin.Int
public fun C.testExtFun1(/*0*/ x: C.P2 /* = Pair<kotlin.Int, kotlin.Int> */): C.P2 /* = Pair<kotlin.Int, kotlin.Int> */
public fun C.testExtFun2(): C.P2 /* = Pair<kotlin.Int, kotlin.Int> */

public final class C {
    public constructor C()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun first(/*0*/ p: C.P2 /* = Pair<kotlin.Int, kotlin.Int> */): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final fun p(): C.P2 /* = Pair<kotlin.Int, kotlin.Int> */
    public final fun second(/*0*/ p: C.P2 /* = Pair<kotlin.Int, kotlin.Int> */): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public typealias P2 = Pair<kotlin.Int, kotlin.Int>
}

public final class Pair</*0*/ T1, /*1*/ T2> {
    public constructor Pair</*0*/ T1, /*1*/ T2>(/*0*/ x1: T1, /*1*/ x2: T2)
    public final konst x1: T1
    public final konst x2: T2
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
