package

public konst test1: CIntA /* = Cell<kotlin.Int> */
public konst test2: CA<kotlin.Int> /* = Cell<kotlin.Int> */
public konst test3: CA<kotlin.Int> /* = Cell<kotlin.Int> */
public konst test4: PIntIntA /* = Pair<kotlin.Int, kotlin.Int> */
public konst test5: PA<kotlin.Int, kotlin.Int> /* = Pair<kotlin.Int, kotlin.Int> */
public konst test6: PA<kotlin.Int, kotlin.Int> /* = Pair<kotlin.Int, kotlin.Int> */
public konst test7: P2A<kotlin.Int> /* = Pair<kotlin.Int, kotlin.Int> */
public konst test8: P2A<kotlin.Int> /* = Pair<kotlin.Int, kotlin.Int> */

public final class Cell</*0*/ T> {
    public constructor Cell</*0*/ T>(/*0*/ x: T)
    public final konst x: T
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Pair</*0*/ T1, /*1*/ T2> {
    public constructor Pair</*0*/ T1, /*1*/ T2>(/*0*/ x1: T1, /*1*/ x2: T2)
    public final konst x1: T1
    public final konst x2: T2
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
public typealias CA</*0*/ TA> = Cell<TA>
public typealias CIntA = Cell<kotlin.Int>
public typealias P2A</*0*/ TA> = Pair<TA, TA>
public typealias PA</*0*/ T1A, /*1*/ T2A> = Pair<T1A, T2A>
public typealias PIntIntA = Pair<kotlin.Int, kotlin.Int>
