package

package bug {

    public final enum class Foo</*0*/ T> : kotlin.Enum<bug.Foo<T>> {
        enum entry A

        private constructor Foo</*0*/ T>()
        @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
        public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
        protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: bug.Foo<T>): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<bug.Foo<T>!>!
        public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<bug.Foo<T>>
        public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): bug.Foo<T>
        public final /*synthesized*/ fun konstues(): kotlin.Array<bug.Foo<T>>
    }
}
