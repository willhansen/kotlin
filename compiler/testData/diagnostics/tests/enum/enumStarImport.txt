package

public fun f(/*0*/ e: enum.HappyEnum): kotlin.Unit

package enum {

    public final enum class HappyEnum : kotlin.Enum<enum.HappyEnum> {
        enum entry CASE1

        enum entry CASE2

        private constructor HappyEnum()
        @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
        public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
        protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: enum.HappyEnum): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<enum.HappyEnum!>!
        public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<enum.HappyEnum>
        public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): enum.HappyEnum
        public final /*synthesized*/ fun konstues(): kotlin.Array<enum.HappyEnum>
    }
}
