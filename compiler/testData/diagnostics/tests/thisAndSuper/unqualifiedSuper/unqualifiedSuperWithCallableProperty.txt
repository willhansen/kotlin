package

public open class BaseWithCallableProp {
    public constructor BaseWithCallableProp()
    public final konst bar: () -> kotlin.String
    public final konst fn: () -> kotlin.String
    public open fun bar(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class DerivedUsingFun : BaseWithCallableProp, InterfaceWithFun {
    public constructor DerivedUsingFun()
    public final override /*1*/ /*fake_override*/ konst bar: () -> kotlin.String
    public final override /*1*/ /*fake_override*/ konst fn: () -> kotlin.String
    public open override /*1*/ fun bar(): kotlin.String
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun fn(): kotlin.String
    public final fun foo(): kotlin.String
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface InterfaceWithFun {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open fun fn(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
