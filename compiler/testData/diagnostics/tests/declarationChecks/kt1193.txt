package

package kt1193 {
    public konst x: kt1193.MyEnum

    public open class A {
        public constructor A(/*0*/ x: kotlin.Int = ...)
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public final enum class MyEnum : kotlin.Enum<kt1193.MyEnum> {
        enum entry A

        enum entry B

        private constructor MyEnum(/*0*/ i: kotlin.Int)
        public final konst i: kotlin.Int
        @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
        public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
        protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: kt1193.MyEnum): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun finalize(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ /*isHiddenForResolutionEverywhereBesideSupercalls*/ fun getDeclaringClass(): java.lang.Class<kt1193.MyEnum!>!
        public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public final /*synthesized*/ konst entries: kotlin.enums.EnumEntries<kt1193.MyEnum>
        public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): kt1193.MyEnum
        public final /*synthesized*/ fun konstues(): kotlin.Array<kt1193.MyEnum>
    }
}
