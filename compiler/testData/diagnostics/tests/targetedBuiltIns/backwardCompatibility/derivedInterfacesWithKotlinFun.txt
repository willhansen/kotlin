package

public interface IBaseWithKotlinDeclaration : kotlin.collections.Map<kotlin.String, kotlin.String> {
    public abstract override /*1*/ /*fake_override*/ konst entries: kotlin.collections.Set<kotlin.collections.Map.Entry<kotlin.String, kotlin.String>>
    public abstract override /*1*/ /*fake_override*/ konst keys: kotlin.collections.Set<kotlin.String>
    public abstract override /*1*/ /*fake_override*/ konst size: kotlin.Int
    public abstract override /*1*/ /*fake_override*/ konst konstues: kotlin.collections.Collection<kotlin.String>
    public abstract override /*1*/ /*fake_override*/ fun containsKey(/*0*/ key: kotlin.String): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun containsValue(/*0*/ konstue: kotlin.String): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun get(/*0*/ key: kotlin.String): kotlin.String?
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
    public abstract fun replace(/*0*/ key: kotlin.String, /*1*/ konstue: kotlin.String): kotlin.String?
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface TestDerivedInterfaceDefaultWithKotlinDeclaration : IBaseWithKotlinDeclaration {
    public abstract override /*1*/ /*fake_override*/ konst entries: kotlin.collections.Set<kotlin.collections.Map.Entry<kotlin.String, kotlin.String>>
    public abstract override /*1*/ /*fake_override*/ konst keys: kotlin.collections.Set<kotlin.String>
    public abstract override /*1*/ /*fake_override*/ konst size: kotlin.Int
    public abstract override /*1*/ /*fake_override*/ konst konstues: kotlin.collections.Collection<kotlin.String>
    public abstract override /*1*/ /*fake_override*/ fun containsKey(/*0*/ key: kotlin.String): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun containsValue(/*0*/ konstue: kotlin.String): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun get(/*0*/ key: kotlin.String): kotlin.String?
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
    public open override /*1*/ fun replace(/*0*/ key: kotlin.String, /*1*/ konstue: kotlin.String): kotlin.String?
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface TestDerivedInterfaceHidingWithKotlinDeclaration : IBaseWithKotlinDeclaration {
    public abstract override /*1*/ /*fake_override*/ konst entries: kotlin.collections.Set<kotlin.collections.Map.Entry<kotlin.String, kotlin.String>>
    public abstract override /*1*/ /*fake_override*/ konst keys: kotlin.collections.Set<kotlin.String>
    public abstract override /*1*/ /*fake_override*/ konst size: kotlin.Int
    public abstract override /*1*/ /*fake_override*/ konst konstues: kotlin.collections.Collection<kotlin.String>
    public abstract override /*1*/ /*fake_override*/ fun containsKey(/*0*/ key: kotlin.String): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun containsValue(/*0*/ konstue: kotlin.String): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract override /*1*/ /*fake_override*/ fun get(/*0*/ key: kotlin.String): kotlin.String?
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
    public abstract override /*1*/ fun replace(/*0*/ key: kotlin.String, /*1*/ konstue: kotlin.String): kotlin.String?
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
