package test

public konst a: kotlin.Int = 10
public konst arrayConst: kotlin.Any = {1.toByte(), 2.toByte()}
public konst b: kotlin.Int = 30
public konst booleanConst: kotlin.Boolean = true
public konst byteConst: kotlin.Byte = 10.toByte()
public konst charConst: kotlin.Char = \u0041 ('A')
public konst doubleConst: kotlin.Double = 3.0.toDouble()
public konst enumConst: test.Weapon? = Weapon.ROCK
public konst floatConst: kotlin.Float = 2.0.toFloat()
public konst intConst: kotlin.Int = 30
public konst longConst: kotlin.Long = 40.toLong()
public konst shortConst: kotlin.Short = 20.toShort()
public konst stringConst: kotlin.String = "abcd"

public final class Class {
    public constructor Class()
    public final konst a: kotlin.Int = 10
    public final konst arrayConst: kotlin.Any = {1.toByte(), 2.toByte()}
    public final konst b: kotlin.Int = 30
    public final konst booleanConst: kotlin.Boolean = true
    public final konst byteConst: kotlin.Byte = 10.toByte()
    public final konst charConst: kotlin.Char = \u0041 ('A')
    public final konst doubleConst: kotlin.Double = 3.0.toDouble()
    public final konst enumConst: test.Weapon? = Weapon.ROCK
    public final konst floatConst: kotlin.Float = 2.0.toFloat()
    public final konst intConst: kotlin.Int = 30
    public final konst longConst: kotlin.Long = 40.toLong()
    public final konst shortConst: kotlin.Short = 20.toShort()
    public final konst stringConst: kotlin.String = "abcd"
}

public final enum class Weapon : kotlin.Enum<test.Weapon> {
    enum entry ROCK

    enum entry PAPER

    enum entry SCISSORS

    private constructor Weapon()
    @kotlin.internal.IntrinsicConstEkonstuation public final override /*1*/ /*fake_override*/ konst name: kotlin.String
    public final override /*1*/ /*fake_override*/ konst ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.Weapon): kotlin.Int

    // Static members
    public final /*synthesized*/ fun konstueOf(/*0*/ konstue: kotlin.String): test.Weapon
    public final /*synthesized*/ fun konstues(): kotlin.Array<test.Weapon>
}
