FILE: annotation.kt
    @Target(AnnotationTarget#.CLASS#, AnnotationTarget#.PROPERTY#, AnnotationTarget#.LOCAL_VARIABLE#, AnnotationTarget#.VALUE_PARAMETER#, AnnotationTarget#.CONSTRUCTOR#, AnnotationTarget#.FUNCTION#, AnnotationTarget#.TYPE#) public? final? annotation class base : R|kotlin/Annotation| {
        public? [ContainingClassKey=base] constructor(): R|base| {
            super<R|kotlin/Any|>()
        }

    }
    @base() public? final? class correct : R|kotlin/Any| {
        public? [ContainingClassKey=correct] constructor([CorrespondingProperty=/correct.x] @base() x: Int): R|correct| {
            super<R|kotlin/Any|>()
        }

        @base() public? final? [IsFromPrimaryConstructor=true] konst x: Int = R|<local>/x|
            public? [ContainingClassKey=correct] get(): Int

        @base() public? [ContainingClassKey=correct] constructor(): R|correct| {
            this<R|correct|>(IntegerLiteral(0))
        }

    }
    @base() public? final? enum class My : R|kotlin/Enum<My>| {
        private [ContainingClassKey=My] constructor(): R|My| {
            super<R|kotlin/Enum<My>|>()
        }

        @base() public final static [ContainingClassKey=My] enum entry FIRST: R|My| = object : R|My| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|My|>()
            }

        }

        @base() public final static [ContainingClassKey=My] enum entry SECOND: R|My| = object : R|My| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|My|>()
            }

        }

        public final static [ContainingClassKey=My] fun konstues(): R|kotlin/Array<My>| {
        }

        public final static [ContainingClassKey=My] fun konstueOf(konstue: R|kotlin/String|): R|My| {
        }

        public final static [ContainingClassKey=My] konst entries: R|kotlin/enums/EnumEntries<My>|
            public get(): R|kotlin/enums/EnumEntries<My>|

    }
    @base() public? final? fun foo(@base() y: @base() Int): Int {
        @base() local final? fun bar(@base() z: @base() Int): <implicit> {
            ^bar z#.plus#(IntegerLiteral(1))
        }

        @base() lkonst local: <implicit> = bar#(y#)
        ^foo local#
    }
    @base() public? final? konst z: <implicit> = IntegerLiteral(0)
        public? get(): <implicit>
    @base() public? final? konst x: Map<@base() Int, List<@base() Int>> = mapOf#()
        public? get(): Map<@base() Int, List<@base() Int>>
    @Target(AnnotationTarget#.CLASS#, AnnotationTarget#.PROPERTY#, AnnotationTarget#.LOCAL_VARIABLE#, AnnotationTarget#.VALUE_PARAMETER#, AnnotationTarget#.CONSTRUCTOR#, AnnotationTarget#.FUNCTION#, AnnotationTarget#.TYPE#) @base() public? final? annotation class derived : base, R|kotlin/Annotation| {
        public? [ContainingClassKey=derived] constructor([CorrespondingProperty=/derived.x] x: Int): R|derived| {
            super<R|kotlin/Any|>()
        }

        public? final? [IsFromPrimaryConstructor=true] konst x: Int = R|<local>/x|
            public? [ContainingClassKey=derived] get(): Int

    }
    @derived(IntegerLiteral(1)) public? final? class correctDerived : R|kotlin/Any| {
        public? [ContainingClassKey=correctDerived] constructor([CorrespondingProperty=/correctDerived.x] @derived(IntegerLiteral(1)) x: Int): R|correctDerived| {
            super<R|kotlin/Any|>()
        }

        @derived(IntegerLiteral(1)) public? final? [IsFromPrimaryConstructor=true] konst x: Int = R|<local>/x|
            public? [ContainingClassKey=correctDerived] get(): Int

        @base() public? [ContainingClassKey=correctDerived] constructor(): R|correctDerived| {
            this<R|correctDerived|>(IntegerLiteral(0))
        }

    }
    @derived(IntegerLiteral(1)) public? final? enum class MyDerived : R|kotlin/Enum<MyDerived>| {
        private [ContainingClassKey=MyDerived] constructor(): R|MyDerived| {
            super<R|kotlin/Enum<MyDerived>|>()
        }

        @derived(IntegerLiteral(1)) public final static [ContainingClassKey=MyDerived] enum entry FIRST: R|MyDerived| = object : R|MyDerived| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|MyDerived|>()
            }

        }

        @derived(IntegerLiteral(1)) public final static [ContainingClassKey=MyDerived] enum entry SECOND: R|MyDerived| = object : R|MyDerived| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|MyDerived|>()
            }

        }

        public final static [ContainingClassKey=MyDerived] fun konstues(): R|kotlin/Array<MyDerived>| {
        }

        public final static [ContainingClassKey=MyDerived] fun konstueOf(konstue: R|kotlin/String|): R|MyDerived| {
        }

        public final static [ContainingClassKey=MyDerived] konst entries: R|kotlin/enums/EnumEntries<MyDerived>|
            public get(): R|kotlin/enums/EnumEntries<MyDerived>|

    }
    @derived(IntegerLiteral(1)) public? final? fun fooDerived(@derived(IntegerLiteral(1)) y: @derived(IntegerLiteral(1)) Int): Int {
        @derived(IntegerLiteral(1)) local final? fun bar(@derived(IntegerLiteral(1)) z: @derived(IntegerLiteral(1)) Int): <implicit> {
            ^bar z#.plus#(IntegerLiteral(1))
        }

        @derived(IntegerLiteral(1)) lkonst local: <implicit> = bar#(y#)
        ^fooDerived local#
    }
    @derived(IntegerLiteral(1)) public? final? konst zDerived: <implicit> = IntegerLiteral(0)
        public? get(): <implicit>
    @derived(IntegerLiteral(1)) public? final? konst xDerived: Map<@derived(IntegerLiteral(1)) Int, List<@derived(IntegerLiteral(1)) Int>> = mapOf#()
        public? get(): Map<@derived(IntegerLiteral(1)) Int, List<@derived(IntegerLiteral(1)) Int>>
