FILE: simpleClass.kt
    public? final? interface SomeInterface : R|kotlin/Any| {
        public? final? fun foo(x: Int, y: String): String

        public? final? konst bar: Boolean
            public? get(): Boolean

    }
    public? final? class SomeClass : SomeInterface {
        public? constructor(): R|SomeClass| {
            LAZY_super<<implicit>>
        }

        private final? konst baz: <implicit> = LAZY_EXPRESSION
            private get(): <implicit>

        public? open? override fun foo(x: Int, y: String): String { LAZY_BLOCK }

        public? open? override var bar: Boolean
            public? get(): Boolean { LAZY_BLOCK }
            public? set(konstue: Boolean): R|kotlin/Unit| { LAZY_BLOCK }

        public? final? lateinit var fau: Double
            public? get(): Double
            public? set(konstue: Double): R|kotlin/Unit|

    }
    public? final? inline class InlineClass : R|kotlin/Any| {
        public? constructor(): R|InlineClass| {
            LAZY_super<R|kotlin/Any|>
        }

    }
