FILE: enums.kt
    public? final? enum class Order : R|kotlin/Enum<Order>| {
        private [ContainingClassKey=Order] constructor(): R|Order| {
            super<R|kotlin/Enum<Order>|>()
        }

        public final static [ContainingClassKey=Order] enum entry FIRST: R|Order|
        public final static [ContainingClassKey=Order] enum entry SECOND: R|Order|
        public final static [ContainingClassKey=Order] enum entry THIRD: R|Order|
        public final static [ContainingClassKey=Order] fun konstues(): R|kotlin/Array<Order>| {
        }

        public final static [ContainingClassKey=Order] fun konstueOf(konstue: R|kotlin/String|): R|Order| {
        }

        public final static [ContainingClassKey=Order] konst entries: R|kotlin/enums/EnumEntries<Order>|
            public get(): R|kotlin/enums/EnumEntries<Order>|

    }
    public? final? enum class Planet : R|kotlin/Enum<Planet>| {
        private [ContainingClassKey=Planet] constructor([CorrespondingProperty=/Planet.m] m: Double, [CorrespondingProperty=/Planet.r] r: Double): R|Planet| {
            super<R|kotlin/Enum<Planet>|>()
        }

        public? final? [IsFromPrimaryConstructor=true] konst m: Double = R|<local>/m|
            public? [ContainingClassKey=Planet] get(): Double

        internal final? [IsFromPrimaryConstructor=true] konst r: Double = R|<local>/r|
            internal [ContainingClassKey=Planet] get(): Double

        public final static [ContainingClassKey=Planet] enum entry MERCURY: R|Planet| = object : R|Planet| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|Planet|>(Double(1.0), Double(2.0))
            }

            public? open? override fun sayHello(): R|kotlin/Unit| {
                println#(String(Hello!!!))
            }

        }

        public final static [ContainingClassKey=Planet] enum entry VENERA: R|Planet| = object : R|Planet| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|Planet|>(Double(3.0), Double(4.0))
            }

            public? open? override fun sayHello(): R|kotlin/Unit| {
                println#(String(Ola!!!))
            }

        }

        public final static [ContainingClassKey=Planet] enum entry EARTH: R|Planet| = object : R|Planet| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|Planet|>(Double(5.0), Double(6.0))
            }

            public? open? override fun sayHello(): R|kotlin/Unit| {
                println#(String(Privet!!!))
            }

        }

        public? final? konst g: Double = G#.times#(m#).div#(r#.times#(r#))
            public? [ContainingClassKey=Planet] get(): Double

        public? abstract fun sayHello(): R|kotlin/Unit|

        public? final? companion object Companion : R|kotlin/Any| {
            private [ContainingClassKey=Companion] constructor(): R|Planet.Companion| {
                super<R|kotlin/Any|>()
            }

            public? final? const konst G: <implicit> = Double(6.67E-11)
                public? [ContainingClassKey=Companion] get(): <implicit>

        }

        public final static [ContainingClassKey=Planet] fun konstues(): R|kotlin/Array<Planet>| {
        }

        public final static [ContainingClassKey=Planet] fun konstueOf(konstue: R|kotlin/String|): R|Planet| {
        }

        public final static [ContainingClassKey=Planet] konst entries: R|kotlin/enums/EnumEntries<Planet>|
            public get(): R|kotlin/enums/EnumEntries<Planet>|

    }
    public? final? enum class PseudoInsn : R|kotlin/Enum<PseudoInsn>| {
        private [ContainingClassKey=PseudoInsn] constructor([CorrespondingProperty=/PseudoInsn.signature] signature: String = String(()V)): R|PseudoInsn| {
            super<R|kotlin/Enum<PseudoInsn>|>()
        }

        public? final? [IsFromPrimaryConstructor=true] konst signature: String = R|<local>/signature|
            public? [ContainingClassKey=PseudoInsn] get(): String

        public final static [ContainingClassKey=PseudoInsn] enum entry FIX_STACK_BEFORE_JUMP: R|PseudoInsn| = object : R|PseudoInsn| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|PseudoInsn|>()
            }

        }

        public final static [ContainingClassKey=PseudoInsn] enum entry FAKE_ALWAYS_TRUE_IFEQ: R|PseudoInsn| = object : R|PseudoInsn| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|PseudoInsn|>(String(()I))
            }

        }

        public final static [ContainingClassKey=PseudoInsn] enum entry FAKE_ALWAYS_FALSE_IFEQ: R|PseudoInsn| = object : R|PseudoInsn| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|PseudoInsn|>(String(()I))
            }

        }

        public final static [ContainingClassKey=PseudoInsn] enum entry SAVE_STACK_BEFORE_TRY: R|PseudoInsn| = object : R|PseudoInsn| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|PseudoInsn|>()
            }

        }

        public final static [ContainingClassKey=PseudoInsn] enum entry RESTORE_STACK_IN_TRY_CATCH: R|PseudoInsn| = object : R|PseudoInsn| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|PseudoInsn|>()
            }

        }

        public final static [ContainingClassKey=PseudoInsn] enum entry STORE_NOT_NULL: R|PseudoInsn| = object : R|PseudoInsn| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|PseudoInsn|>()
            }

        }

        public final static [ContainingClassKey=PseudoInsn] enum entry AS_NOT_NULL: R|PseudoInsn| = object : R|PseudoInsn| {
            private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                super<R|PseudoInsn|>(String((Ljava/lang/Object;)Ljava/lang/Object;))
            }

        }

        public? final? fun emit(): R|kotlin/Unit| {
        }

        public final static [ContainingClassKey=PseudoInsn] fun konstues(): R|kotlin/Array<PseudoInsn>| {
        }

        public final static [ContainingClassKey=PseudoInsn] fun konstueOf(konstue: R|kotlin/String|): R|PseudoInsn| {
        }

        public final static [ContainingClassKey=PseudoInsn] konst entries: R|kotlin/enums/EnumEntries<PseudoInsn>|
            public get(): R|kotlin/enums/EnumEntries<PseudoInsn>|

    }
