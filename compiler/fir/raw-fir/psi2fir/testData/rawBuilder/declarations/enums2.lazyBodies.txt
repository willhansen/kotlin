FILE: enums2.kt
    public? final? interface Some : R|kotlin/Any| {
    }
    public? final? object O1 : Some {
        private constructor(): R|O1| {
            LAZY_super<<implicit>>
        }

    }
    public? final? object O2 : Some {
        private constructor(): R|O2| {
            LAZY_super<<implicit>>
        }

    }
    public? final? enum class SomeEnum : R|kotlin/Enum<SomeEnum>| {
        private constructor(x: Some): R|SomeEnum| {
            LAZY_super<R|kotlin/Enum<SomeEnum>|>
        }

        public? final? konst x: Some = R|<local>/x|
            public? get(): Some

        public final static enum entry FIRST: R|SomeEnum| = LAZY_EXPRESSION
        public final static enum entry SECOND: R|SomeEnum| = LAZY_EXPRESSION
        public? abstract fun check(y: Some): Boolean

        public final static fun konstues(): R|kotlin/Array<SomeEnum>| {
        }

        public final static fun konstueOf(konstue: R|kotlin/String|): R|SomeEnum| {
        }

        public final static konst entries: R|kotlin/enums/EnumEntries<SomeEnum>|
            public get(): R|kotlin/enums/EnumEntries<SomeEnum>|

    }
