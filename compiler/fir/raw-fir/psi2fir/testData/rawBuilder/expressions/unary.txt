FILE: unary.kt
    public? final? fun test(): R|kotlin/Unit| {
        lvar x: <implicit> = IntegerLiteral(0)
        lkonst x1: <implicit> = x#++
        lkonst x2: <implicit> = ++x#
        lkonst x3: <implicit> = --x#
        lkonst x4: <implicit> = x#--
        when () {
            ==(x#, IntegerLiteral(0)).not#() ->  {
                println#(String(000))
            }
        }

    }
    public? final? class X : R|kotlin/Any| {
        public? [ContainingClassKey=X] constructor([CorrespondingProperty=/X.i] i: Int): R|X| {
            super<R|kotlin/Any|>()
        }

        public? final? [IsFromPrimaryConstructor=true] konst i: Int = R|<local>/i|
            public? [ContainingClassKey=X] get(): Int

    }
    public? final? fun test2(x: X): R|kotlin/Unit| {
        lkonst x1: <implicit> = x#.i#++
        lkonst x2: <implicit> = ++x#.i#
    }
    public? final? fun test3(arr: Array<Int>): R|kotlin/Unit| {
        lkonst x1: <implicit> =  {
            lkonst <array>: <implicit> = arr#
            lkonst <index_0>: <implicit> = IntegerLiteral(0)
            lkonst <unary>: <implicit> = R|<local>/<array>|.get#(R|<local>/<index_0>|)
            R|<local>/<array>|.set#(R|<local>/<index_0>|, R|<local>/<unary>|.inc#())
            R|<local>/<unary>|
        }

        lkonst x2: <implicit> =  {
            lkonst <array>: <implicit> = arr#
            lkonst <index_0>: <implicit> = IntegerLiteral(1)
            R|<local>/<array>|.set#(R|<local>/<index_0>|, R|<local>/<array>|.get#(R|<local>/<index_0>|).inc#())
            R|<local>/<array>|.get#(R|<local>/<index_0>|)
        }

    }
    public? final? class Y : R|kotlin/Any| {
        public? [ContainingClassKey=Y] constructor([CorrespondingProperty=/Y.arr] arr: Array<Int>): R|Y| {
            super<R|kotlin/Any|>()
        }

        public? final? [IsFromPrimaryConstructor=true] konst arr: Array<Int> = R|<local>/arr|
            public? [ContainingClassKey=Y] get(): Array<Int>

    }
    public? final? fun test4(y: Y): R|kotlin/Unit| {
        lkonst x1: <implicit> =  {
            lkonst <array>: <implicit> = y#.arr#
            lkonst <index_0>: <implicit> = IntegerLiteral(0)
            lkonst <unary>: <implicit> = R|<local>/<array>|.get#(R|<local>/<index_0>|)
            R|<local>/<array>|.set#(R|<local>/<index_0>|, R|<local>/<unary>|.inc#())
            R|<local>/<unary>|
        }

        lkonst x2: <implicit> =  {
            lkonst <array>: <implicit> = y#.arr#
            lkonst <index_0>: <implicit> = IntegerLiteral(1)
            R|<local>/<array>|.set#(R|<local>/<index_0>|, R|<local>/<array>|.get#(R|<local>/<index_0>|).inc#())
            R|<local>/<array>|.get#(R|<local>/<index_0>|)
        }

    }
