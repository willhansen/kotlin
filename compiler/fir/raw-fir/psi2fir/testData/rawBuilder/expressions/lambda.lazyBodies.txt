FILE: lambda.kt
    public? final? data class Tuple : R|kotlin/Any| {
        public? constructor(x: Int, y: Int): R|Tuple| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? konst x: Int = R|<local>/x|
            public? get(): Int

        public? final? konst y: Int = R|<local>/y|
            public? get(): Int

        public? final operator fun component1(): Int

        public? final operator fun component2(): Int

        public final fun copy(x: Int = this@R|/Tuple|.R|/Tuple.x|, y: Int = this@R|/Tuple|.R|/Tuple.y|): R|Tuple|

    }
    public? final? inline fun use(f: ( (Tuple) -> Int )): <implicit> { LAZY_BLOCK }
    public? final? fun foo(): Int { LAZY_BLOCK }
    public? final? fun bar(): Int { LAZY_BLOCK }
    public? final? fun test(list: List<Int>): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? konst simple: <implicit> = LAZY_EXPRESSION
        public? get(): <implicit>
    public? final? konst simpleWithArrow: <implicit> = LAZY_EXPRESSION
        public? get(): <implicit>
    public? final? konst another: <implicit> = LAZY_EXPRESSION
        public? get(): <implicit>
