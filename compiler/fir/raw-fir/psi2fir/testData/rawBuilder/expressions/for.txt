FILE: for.kt
    public? final? fun foo(): R|kotlin/Unit| {
         {
            lkonst <iterator>: <implicit> = IntegerLiteral(1).rangeTo#(IntegerLiteral(10)).iterator#()
            while(R|<local>/<iterator>|.hasNext#()) {
                lkonst i: <implicit> = R|<local>/<iterator>|.next#()
                 {
                    println#(i#)
                }

            }

        }

    }
    public? final? fun fooLabeled(): R|kotlin/Unit| {
        println#(String(!!!))
         {
            lkonst <iterator>: <implicit> = IntegerLiteral(1).rangeTo#(IntegerLiteral(10)).iterator#()
            label@while(R|<local>/<iterator>|.hasNext#()) {
                lkonst i: <implicit> = R|<local>/<iterator>|.next#()
                 {
                    when () {
                        ==(i#, IntegerLiteral(5)) ->  {
                            continue@@@[R|<local>/<iterator>|.hasNext#()]
                        }
                    }

                    println#(i#)
                }

            }

        }

        println#(String(!!!))
    }
    public? final? fun bar(list: List<String>): R|kotlin/Unit| {
         {
            lkonst <iterator>: <implicit> = list#.subList#(IntegerLiteral(0), IntegerLiteral(10)).iterator#()
            while(R|<local>/<iterator>|.hasNext#()) {
                lkonst element: <implicit> = R|<local>/<iterator>|.next#()
                 {
                    println#(element#)
                }

            }

        }

         {
            lkonst <iterator>: <implicit> = list#.subList#(IntegerLiteral(10), IntegerLiteral(20)).iterator#()
            while(R|<local>/<iterator>|.hasNext#()) {
                lkonst element: <implicit> = R|<local>/<iterator>|.next#()
                 {
                    println#(element#)
                }

            }

        }

    }
    public? final? data class Some : R|kotlin/Any| {
        public? [ContainingClassKey=Some] constructor([CorrespondingProperty=/Some.x] x: Int, [CorrespondingProperty=/Some.y] y: Int): R|Some| {
            super<R|kotlin/Any|>()
        }

        public? final? [ComponentFunctionSymbolKey=/Some.component1, IsFromPrimaryConstructor=true] konst x: Int = R|<local>/x|
            public? [ContainingClassKey=Some] get(): Int

        public? final? [ComponentFunctionSymbolKey=/Some.component2, IsFromPrimaryConstructor=true] konst y: Int = R|<local>/y|
            public? [ContainingClassKey=Some] get(): Int

        public? final operator fun component1(): Int

        public? final operator fun component2(): Int

        public final fun copy(x: Int = this@R|/Some|.R|/Some.x|, y: Int = this@R|/Some|.R|/Some.y|): R|Some|

    }
    public? final? fun baz(set: Set<Some>): R|kotlin/Unit| {
         {
            lkonst <iterator>: <implicit> = set#.iterator#()
            while(R|<local>/<iterator>|.hasNext#()) {
                lkonst <destruct>: <implicit> = R|<local>/<iterator>|.next#()
                lkonst x: <implicit> = R|<local>/<destruct>|.component1#()
                lkonst y: <implicit> = R|<local>/<destruct>|.component2#()
                 {
                    println#(<strcat>(String(x = ), x#, String( y = ), y#))
                }

            }

        }

    }
    public? final? fun withParameter(list: List<Some>): R|kotlin/Unit| {
         {
            lkonst <iterator>: <implicit> = list#.iterator#()
            while(R|<local>/<iterator>|.hasNext#()) {
                lkonst s: Some = R|<local>/<iterator>|.next#()
                 {
                    println#(s#)
                }

            }

        }

    }
