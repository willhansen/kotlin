FILE: main.kt
    public final fun test_1(e: R|JavaEnum|): R|kotlin/Unit| {
        lkonst a: <ERROR TYPE REF: Unresolved name: plus> = when (R|<local>/e|) {
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.A|) ->  {
                Int(1)
            }
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.B|) ->  {
                Int(2)
            }
        }
        .<Unresolved name: plus>#(Int(0))
        lkonst b: <ERROR TYPE REF: Unresolved name: plus> = when (R|<local>/e|) {
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.A|) ->  {
                Int(1)
            }
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.B|) ->  {
                Int(2)
            }
            ($subj$ is R|kotlin/String|) ->  {
                Int(3)
            }
        }
        .<Unresolved name: plus>#(Int(0))
        lkonst c: R|kotlin/Int| = when (R|<local>/e|) {
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.A|) ->  {
                Int(1)
            }
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.B|) ->  {
                Int(2)
            }
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.C|) ->  {
                Int(3)
            }
        }
        .R|kotlin/Int.plus|(Int(0))
        lkonst d: R|kotlin/Int| = when (R|<local>/e|) {
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.A|) ->  {
                Int(1)
            }
            else ->  {
                Int(2)
            }
        }
        .R|kotlin/Int.plus|(Int(0))
    }
    public final fun test_2(e: R|JavaEnum?|): R|kotlin/Unit| {
        lkonst a: <ERROR TYPE REF: Unresolved name: plus> = when (R|<local>/e|) {
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.A|) ->  {
                Int(1)
            }
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.B|) ->  {
                Int(2)
            }
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.C|) ->  {
                Int(3)
            }
        }
        .<Unresolved name: plus>#(Int(0))
        lkonst b: R|kotlin/Int| = when (R|<local>/e|) {
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.A|) ->  {
                Int(1)
            }
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.B|) ->  {
                Int(2)
            }
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.C|) ->  {
                Int(3)
            }
            ==($subj$, Null(null)) ->  {
                Int(4)
            }
        }
        .R|kotlin/Int.plus|(Int(0))
        lkonst c: R|kotlin/Int| = when (R|<local>/e|) {
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.A|) ->  {
                Int(1)
            }
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.B|) ->  {
                Int(2)
            }
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.C|) ->  {
                Int(3)
            }
            else ->  {
                Int(4)
            }
        }
        .R|kotlin/Int.plus|(Int(0))
    }
    public final fun test_3(e: R|JavaEnum|): R|kotlin/Unit| {
        lkonst a: R|kotlin/Int| = when (R|<local>/e|) {
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.A|) || ==($subj$, Q|JavaEnum|.R|/JavaEnum.B|) ->  {
                Int(1)
            }
            ==($subj$, Q|JavaEnum|.R|/JavaEnum.C|) ->  {
                Int(2)
            }
        }
        .R|kotlin/Int.plus|(Int(0))
    }
