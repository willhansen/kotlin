FILE: constantValues.kt
    public abstract class ConstantValue<out T> : R|kotlin/Any| {
        public constructor<out T>(konstue: R|T|): R|ConstantValue<T>| {
            super<R|kotlin/Any|>()
        }

        public open konst konstue: R|T| = R|<local>/konstue|
            public get(): R|T|

    }
    public final data class ClassLiteralValue : R|kotlin/Any| {
        public constructor(classId: R|ClassId|, arrayNestedness: R|kotlin/Int|): R|ClassLiteralValue| {
            super<R|kotlin/Any|>()
        }

        public final konst classId: R|ClassId| = R|<local>/classId|
            public get(): R|ClassId|

        public final konst arrayNestedness: R|kotlin/Int| = R|<local>/arrayNestedness|
            public get(): R|kotlin/Int|

        public final operator fun component1(): R|ClassId|

        public final operator fun component2(): R|kotlin/Int|

        public final fun copy(classId: R|ClassId| = this@R|/ClassLiteralValue|.R|/ClassLiteralValue.classId|, arrayNestedness: R|kotlin/Int| = this@R|/ClassLiteralValue|.R|/ClassLiteralValue.arrayNestedness|): R|ClassLiteralValue|

    }
    public final class ClassId : R|kotlin/Any| {
        public constructor(): R|ClassId| {
            super<R|kotlin/Any|>()
        }

    }
    public final class KotlinType : R|kotlin/Any| {
        public constructor(): R|KotlinType| {
            super<R|kotlin/Any|>()
        }

    }
    public final class KClassValue : R|ConstantValue<KClassValue.Value>| {
        public constructor(konstue: R|KClassValue.Value|): R|KClassValue| {
            super<R|ConstantValue<KClassValue.Value>|>(R|<local>/konstue|)
        }

        public sealed class Value : R|kotlin/Any| {
            protected constructor(): R|KClassValue.Value| {
                super<R|kotlin/Any|>()
            }

            public final data class NormalClass : R|KClassValue.Value| {
                public constructor(konstue: R|ClassLiteralValue|): R|KClassValue.Value.NormalClass| {
                    super<R|KClassValue.Value|>()
                }

                public final konst konstue: R|ClassLiteralValue| = R|<local>/konstue|
                    public get(): R|ClassLiteralValue|

                public final konst classId: R|ClassId|
                    public get(): R|ClassId|

                public final konst arrayDimensions: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final operator fun component1(): R|ClassLiteralValue|

                public final fun copy(konstue: R|ClassLiteralValue| = this@R|/KClassValue.Value.NormalClass|.R|/KClassValue.Value.NormalClass.konstue|): R|KClassValue.Value.NormalClass|

            }

            public final data class LocalClass : R|KClassValue.Value| {
                public constructor(type: R|KotlinType|): R|KClassValue.Value.LocalClass| {
                    super<R|KClassValue.Value|>()
                }

                public final konst type: R|KotlinType| = R|<local>/type|
                    public get(): R|KotlinType|

                public final operator fun component1(): R|KotlinType|

                public final fun copy(type: R|KotlinType| = this@R|/KClassValue.Value.LocalClass|.R|/KClassValue.Value.LocalClass.type|): R|KClassValue.Value.LocalClass|

            }

        }

        public final fun getArgumentType(): R|KotlinType| {
            when (this@R|/KClassValue|.R|SubstitutionOverride</KClassValue.konstue: R|KClassValue.Value|>|) {
                ($subj$ is R|KClassValue.Value.LocalClass|) ->  {
                    ^getArgumentType this@R|/KClassValue|.R|SubstitutionOverride</KClassValue.konstue: R|KClassValue.Value|>|.R|/KClassValue.Value.LocalClass.type|
                }
                ($subj$ is R|KClassValue.Value.NormalClass|) ->  {
                    lkonst <destruct>: R|ClassLiteralValue| = this@R|/KClassValue|.R|SubstitutionOverride</KClassValue.konstue: R|KClassValue.Value|>|.R|/KClassValue.Value.NormalClass.konstue|
                    lkonst classId: R|ClassId| = R|<local>/<destruct>|.R|/ClassLiteralValue.component1|()
                    lkonst arrayDimensions: R|kotlin/Int| = R|<local>/<destruct>|.R|/ClassLiteralValue.component2|()
                }
            }

        }

    }
