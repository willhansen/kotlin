FILE: localObject.kt
    public final fun <T> run(block: R|() -> T|): R|T| {
        ^run R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|()
    }
    public abstract interface Foo : R|kotlin/Any| {
        public abstract fun foo(): R|kotlin/Int|

    }
    public final fun tesLambda(x: R|kotlin/Int|): R|kotlin/Int| {
        ^tesLambda R|/run|<R|kotlin/Int|>(<L> = run@fun <anonymous>(): R|kotlin/Int| <inline=NoInline>  {
            lkonst obj: R|<anonymous>| = object : R|Foo| {
                private constructor(): R|<anonymous>| {
                    super<R|kotlin/Any|>()
                }

                public open override fun foo(): R|kotlin/Int| {
                    ^foo R|<local>/x|.R|kotlin/Int.plus|(Int(1))
                }

            }

            ^ Int(2)
        }
        )
    }
    public final class TestProperty : R|kotlin/Any| {
        public constructor(): R|TestProperty| {
            super<R|kotlin/Any|>()
        }

        public final konst intConst: R|kotlin/Int| = Int(1)
            public get(): R|kotlin/Int|

        public final var x: R|kotlin/Int| = Int(1)
            public get(): R|kotlin/Int|
            public set(konstue: R|kotlin/Int|): R|kotlin/Unit| {
                lkonst obj: R|<anonymous>| = object : R|Foo| {
                    private constructor(): R|<anonymous>| {
                        super<R|kotlin/Any|>()
                    }

                    public open override fun foo(): R|kotlin/Int| {
                        ^foo this@R|/TestProperty|.R|/TestProperty.intConst|.R|kotlin/Int.plus|(Int(1))
                    }

                }

                this@R|/TestProperty|.F|/TestProperty.x| = R|<local>/konstue|
            }

        public final konst y: R|kotlin/Int|
            public get(): R|kotlin/Int| {
                lkonst obj: R|<anonymous>| = object : R|Foo| {
                    private constructor(): R|<anonymous>| {
                        super<R|kotlin/Any|>()
                    }

                    public open override fun foo(): R|kotlin/Int| {
                        ^foo this@R|/TestProperty|.R|/TestProperty.intConst|.R|kotlin/Int.plus|(Int(1))
                    }

                }

                ^ Int(1)
            }

        public final konst z: R|kotlin/Int| = this@R|/TestProperty|.R|kotlin/run|<R|TestProperty|, R|kotlin/Int|>(<L> = run@fun R|TestProperty|.<anonymous>(): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
            lkonst obj: R|<anonymous>| = object : R|Foo| {
                private constructor(): R|<anonymous>| {
                    super<R|kotlin/Any|>()
                }

                public open override fun foo(): R|kotlin/Int| {
                    ^foo this@R|special/anonymous|.R|/TestProperty.x|.R|kotlin/Int.plus|(Int(1))
                }

            }

            ^ Int(2)
        }
        )
            public get(): R|kotlin/Int|

    }
