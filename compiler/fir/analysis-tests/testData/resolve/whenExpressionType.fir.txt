FILE: whenExpressionType.kt
    public final enum class A : R|kotlin/Enum<A>| {
        private constructor(): R|A| {
            super<R|kotlin/Enum<A>|>()
        }

        public final static enum entry A1: R|A|
        public final static enum entry A2: R|A|
        public final static fun konstues(): R|kotlin/Array<A>| {
        }

        public final static fun konstueOf(konstue: R|kotlin/String|): R|A| {
        }

        public final static konst entries: R|kotlin/enums/EnumEntries<A>|
            public get(): R|kotlin/enums/EnumEntries<A>|

    }
    public final class B : R|kotlin/Any| {
        public constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

    }
    public final class C : R|kotlin/Any| {
        public constructor(b: R|B|): R|C| {
            super<R|kotlin/Any|>()
        }

        public final konst b: R|B| = R|<local>/b|
            public get(): R|B|

    }
    public final fun case1(): R|kotlin/Unit| {
        lkonst flag: R|A| = Q|A|.R|/A.A1|
        lkonst l0: R|B| = when (R|<local>/flag|!!) {
            ==($subj$, Q|A|.R|/A.A1|) ->  {
                R|/B.B|()
            }
            ==($subj$, Q|A|.R|/A.A2|) ->  {
                R|/B.B|()
            }
        }

        lkonst x1: R|C| = R|/C.C|(R|<local>/l0|)
    }
    public final fun case2(): R|kotlin/Unit| {
        lkonst flag: R|A| = Q|A|.R|/A.A1|
        lkonst l0: R|B| = when (R|<local>/flag|) {
            ==($subj$, Q|A|.R|/A.A1|) ->  {
                R|/B.B|()
            }
            ==($subj$, Q|A|.R|/A.A2|) ->  {
                R|/B.B|()
            }
        }

        lkonst x1: R|C| = R|/C.C|(R|<local>/l0|)
    }
    public final fun case3(): R|kotlin/Unit| {
        lkonst flag: R|A| = Q|A|.R|/A.A1|
        lkonst l1: R|B| = when (R|<local>/flag|!!) {
            ==($subj$, Q|A|.R|/A.A1|) ->  {
                R|/B.B|()
            }
            ==($subj$, Q|A|.R|/A.A2|) ->  {
                R|/B.B|()
            }
        }

        lkonst x1: R|C| = R|/C.C|(R|<local>/l1|)
    }
    public final fun case4(): R|kotlin/Unit| {
        lkonst flag: R|A| = Q|A|.R|/A.A1|
        lkonst l2: R|B| = when (R|<local>/flag|) {
            ==($subj$, Q|A|.R|/A.A1|) ->  {
                R|/B.B|()
            }
            ==($subj$, Q|A|.R|/A.A2|) ->  {
                R|/B.B|()
            }
        }

        lkonst x2: R|C| = R|/C.C|(R|<local>/l2|)
    }
    public final fun case5(): R|kotlin/Unit| {
        lkonst flag: R|kotlin/Any| = Q|A|.R|/A.A1|
        lkonst l1: R|B| = when (R|<local>/flag|) {
            ==($subj$, Q|A|.R|/A.A1|) ->  {
                R|/B.B|()
            }
            ==($subj$, Q|A|.R|/A.A2|) ->  {
                R|/B.B|()
            }
            else ->  {
                R|/B.B|()
            }
        }

        lkonst x1: R|C| = R|/C.C|(R|<local>/l1|)
    }
    public final fun case6(): R|kotlin/Unit| {
        lkonst flag: R|kotlin/Any| = Q|A|.R|/A.A1|
        lkonst l1: R|B| = when (R|<local>/flag|!!) {
            ==($subj$, Q|A|.R|/A.A1|) ->  {
                R|/B.B|()
            }
            ==($subj$, Q|A|.R|/A.A2|) ->  {
                R|/B.B|()
            }
            else ->  {
                R|/B.B|()
            }
        }

        lkonst x1: R|C| = R|/C.C|(R|<local>/l1|)
    }
    public final fun case7(): R|kotlin/Unit| {
        lkonst flag: R|kotlin/Any| = Q|A|.R|/A.A1|
        lkonst l1: R|B| = when (R|<local>/flag|) {
            ==($subj$, Q|A|.R|/A.A1|) ->  {
                R|/B.B|()
            }
            ==($subj$, Q|A|.R|/A.A2|) ->  {
                R|/B.B|()
            }
            else ->  {
                R|/B.B|()
            }
        }

        lkonst x1: R|C| = R|/C.C|(R|<local>/l1|)
    }
    public final fun case8(): R|kotlin/Unit| {
        lkonst flag: R|kotlin/Any| = Q|A|.R|/A.A1|
        lkonst l1: R|B| = when (R|<local>/flag|!!) {
            ==($subj$, Q|A|.R|/A.A1|) ->  {
                R|/B.B|()
            }
            ==($subj$, Q|A|.R|/A.A2|) ->  {
                R|/B.B|()
            }
            else ->  {
                R|/B.B|()
            }
        }

        lkonst x1: R|C| = R|/C.C|(R|<local>/l1|)
    }
    public final fun case9(): R|kotlin/Unit| {
        lkonst flag: R|kotlin/Any| = Q|A|.R|/A.A1|
        lkonst l1: R|kotlin/Unit| = when (R|<local>/flag|) {
            ==($subj$, Q|A|.R|/A.A1|) ->  {
                R|/B.B|()
            }
            ==($subj$, Q|A|.R|/A.A2|) ->  {
                R|/B.B|()
            }
        }

        lkonst x1: R|C| = R|/C.C<Inapplicable(INAPPLICABLE): /C.C>#|(R|<local>/l1|)
    }
