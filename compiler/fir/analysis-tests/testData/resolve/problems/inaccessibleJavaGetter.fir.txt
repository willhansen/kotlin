FILE: test.kt
    public abstract interface DescriptorWithAccessor : R|kotlin/Any| {
        public abstract konst setter: R|kotlin/String|
            public get(): R|kotlin/String|

        public abstract konst isDelegated: R|kotlin/Boolean|
            public get(): R|kotlin/Boolean|

    }
    public final class WrappedPropertyDescriptor : R|PropertyDescriptor| {
        public constructor(): R|WrappedPropertyDescriptor| {
            super<R|kotlin/Any|>()
        }

        public open override konst setter: R|kotlin/String|
            public get(): R|kotlin/String| {
                ^ String(K)
            }

        public open override konst isDelegated: R|kotlin/Boolean|
            public get(): R|kotlin/Boolean| {
                ^ Boolean(false)
            }

    }
    public final fun test(): R|kotlin/Unit| {
        lkonst descriptor: R|WrappedPropertyDescriptor| = R|/WrappedPropertyDescriptor.WrappedPropertyDescriptor|()
        lkonst res1: R|kotlin/String| = R|<local>/descriptor|.R|/WrappedPropertyDescriptor.setter|
        lkonst res2: <ERROR TYPE REF: Unresolved name: getSetter> = R|<local>/descriptor|.<Unresolved name: getSetter>#()
        lkonst res3: R|kotlin/Boolean| = R|<local>/descriptor|.R|/WrappedPropertyDescriptor.isDelegated|
        lkonst res4: <ERROR TYPE REF: Expression 'isDelegated' of type 'kotlin/Boolean' cannot be invoked as a function> = R|<local>/descriptor|.<Expression 'isDelegated' of type 'kotlin/Boolean' cannot be invoked as a function>#()
    }
