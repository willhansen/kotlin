package

public fun case_1(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Unit
public fun case_2(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Unit
public fun case_4(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Unit
public fun case_5(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Unit

public final class case_3_class {
    public constructor case_3_class()
    public final konst prop_1: kotlin.Int? = 10
    public final fun case_3(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Number?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class case_6_class {
    public constructor case_6_class()
    public final konst prop_1: kotlin.Int? = 10
    public final fun case_6(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Number?): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

package contracts {
    public fun case_1(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Unit
        Returns(WILDCARD) -> konstue_1 is String && konstue_2 is Number

    public fun case_2(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Unit
        Returns(WILDCARD) -> konstue_1 is String && konstue_2 == null

    public fun case_3(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?, /*2*/ konstue_3: kotlin.Any?, /*3*/ konstue_4: kotlin.Any?): kotlin.Unit
        Returns(WILDCARD) -> konstue_1 is Float? && konstue_1 != null && konstue_2 != null && konstue_3 != null && konstue_4 != null

    public fun case_4_1(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Boolean
        Returns(TRUE) -> konstue_1 is String && konstue_2 is Number

    public fun case_4_2(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Boolean
        Returns(FALSE) -> konstue_1 is String && konstue_2 is Number

    public fun case_4_3(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Boolean?
        Returns(NOT_NULL) -> konstue_1 is String && konstue_2 is Number

    public fun case_4_4(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Boolean?
        Returns(NULL) -> konstue_1 is String && konstue_2 is Number

    public fun case_5_1(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Boolean
        Returns(TRUE) -> konstue_1 is String && konstue_2 == null

    public fun case_5_2(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Boolean
        Returns(FALSE) -> konstue_1 is String && konstue_2 == null

    public fun case_5_3(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Boolean?
        Returns(NOT_NULL) -> konstue_1 is String && konstue_2 == null

    public fun case_5_4(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?): kotlin.Boolean?
        Returns(NULL) -> konstue_1 is String && konstue_2 == null

    public fun case_6_1(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?, /*2*/ konstue_3: kotlin.Any?, /*3*/ konstue_4: kotlin.Any?): kotlin.Boolean
        Returns(TRUE) -> konstue_1 is Float? && konstue_1 != null && konstue_2 != null && konstue_3 != null && konstue_4 != null

    public fun case_6_2(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?, /*2*/ konstue_3: kotlin.Any?, /*3*/ konstue_4: kotlin.Any?): kotlin.Boolean
        Returns(FALSE) -> konstue_1 is Float? && konstue_1 != null && konstue_2 != null && konstue_3 != null && konstue_4 != null

    public fun case_6_3(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?, /*2*/ konstue_3: kotlin.Any?, /*3*/ konstue_4: kotlin.Any?): kotlin.Boolean?
        Returns(NOT_NULL) -> konstue_1 is Float? && konstue_1 != null && konstue_2 != null && konstue_3 != null && konstue_4 != null

    public fun case_6_4(/*0*/ konstue_1: kotlin.Any?, /*1*/ konstue_2: kotlin.Any?, /*2*/ konstue_3: kotlin.Any?, /*3*/ konstue_4: kotlin.Any?): kotlin.Boolean?
        Returns(NULL) -> konstue_1 is Float? && konstue_1 != null && konstue_2 != null && konstue_3 != null && konstue_4 != null

}
