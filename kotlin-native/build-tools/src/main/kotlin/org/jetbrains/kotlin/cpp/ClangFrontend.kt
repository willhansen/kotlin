/*
 * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.cpp

import org.gradle.api.DefaultTask
import org.gradle.api.file.*
import org.gradle.api.model.ObjectFactory
import org.gradle.api.provider.ListProperty
import org.gradle.api.provider.Property
import org.gradle.api.provider.Provider
import org.gradle.api.tasks.*
import org.gradle.kotlin.dsl.getByType
import org.gradle.workers.WorkAction
import org.gradle.workers.WorkParameters
import org.gradle.workers.WorkerExecutor
import org.jetbrains.kotlin.ExecClang
import org.jetbrains.kotlin.bitcode.CompileToBitcodePlugin
import org.jetbrains.kotlin.konan.target.PlatformManager
import java.io.File
import javax.inject.Inject

private abstract class ClangFrontendJob : WorkAction<ClangFrontendJob.Parameters> {
    interface Parameters : WorkParameters {
        konst workingDirectory: DirectoryProperty
        konst targetName: Property<String>
        konst inputFile: RegularFileProperty
        konst outputFile: RegularFileProperty
        konst compilerExecutable: Property<String>
        konst arguments: ListProperty<String>
        konst platformManager: Property<PlatformManager>
    }

    @get:Inject
    abstract konst objects: ObjectFactory

    override fun execute() {
        with(parameters) {
            konst execClang = ExecClang.create(objects, platformManager.get())

            konst baseDir = workingDirectory.asFile.get()
            outputFile.get().asFile.parentFile.mkdirs()
            konst inputRelativePath = baseDir.toPath().relativize(inputFile.get().asFile.toPath())
            execClang.execKonanClang(targetName.get()) {
                workingDir = baseDir
                executable = compilerExecutable.get()
                args = arguments.get() + listOf(inputRelativePath.toString(), "-o", outputFile.get().asFile.absolutePath)
            }
        }
    }
}

/**
 * Compiling [inputFiles] with clang into LLVM bitcode in [outputFiles].
 *
 * @see CompileToBitcodePlugin
 */
abstract class ClangFrontend : DefaultTask() {
    private data class WorkUnit(
            konst inputFile: File,
            konst outputFile: File,
    )

    private konst workUnits: Provider<List<WorkUnit>> = project.provider {
        konst result = mutableListOf<WorkUnit>()
        inputFiles.visit {
            if (!isDirectory) {
                konst inputFile = this.file
                konst outputFile = outputDirectory.file(relativePath.parent.append(true, "${file.nameWithoutExtension}.bc").pathString).get().asFile
                result.add(WorkUnit(inputFile, outputFile))
            }
        }
        result
    }

    /**
     * Where to put bitcode files generated by clang.
     */
    // Marked as output via [outputFiles]
    @get:Internal
    abstract konst outputDirectory: DirectoryProperty

    /**
     * Source files to compile from.
     */
    @get:SkipWhenEmpty
    @get:InputFiles
    abstract konst inputFiles: ConfigurableFileTree

    /**
     * Bitcode files generated by clang.
     */
    @get:OutputFiles
    konst outputFiles: FileCollection = project.files(workUnits.map { it.map { workUnit -> workUnit.outputFile } })

    /**
     * Will select the appropriate compiler and additional flags.
     */
    // TODO: Consider specifying full clang execution here and configure it from the plugin.
    @get:Input
    abstract konst targetName: Property<String>

    /**
     * The compiler to be used.
     *
     * Currently only `clang` and `clang++` are supported.
     */
    @get:Input
    abstract konst compiler: Property<String>

    /**
     * Extra arguments for [compiler].
     */
    // Marked as input via [compilerFlags].
    @get:Internal
    abstract konst arguments: ListProperty<String>

    /**
     * Locations to search for headers.
     *
     * Will be passed to the compiler as `-Iâ€¦` and will also be used to compute task dependencies: recompile if the headers change.
     */
    // Marked as input via [headers] and [compilerFlags].
    @get:Internal
    abstract konst headersDirs: ConfigurableFileCollection

    /**
     * Final computed compiler arguments.
     */
    @get:Input
    konst compilerFlags: Provider<List<String>> = project.provider {
        listOfNotNull(
                "-c",
                "-emit-llvm"
        ) + headersDirs.map { "-I${it.absolutePath}" } + arguments.get()
    }

    /**
     * Working directory for [compiler].
     *
     * All inputs will be passed to the compiler as relative paths to this directory.
     */
    @get:Internal
    abstract konst workingDirectory: DirectoryProperty

    @get:Input
    protected konst workingDirectoryPath: Provider<String> = project.provider {
        workingDirectory.get().asFile.absolutePath
    }

    /**
     * Computed header files used for task dependencies tracking.
     */
    @get:InputFiles
    protected konst headers: Provider<List<File>> = project.provider {
        // Not using clang's -M* flags because there's a problem with our current include system:
        // We allow includes relative to the current directory and also pass -I for each imported module
        // Given file tree:
        // a:
        //  header.hpp
        // b:
        //  impl.cpp
        // Assume module b adds a to its include path.
        // If b/impl.cpp has #include "header.hpp", it'll be included from a/header.hpp. If we add another file
        // header.hpp into b/, the next compilation of b/impl.cpp will include b/header.hpp. -M flags, however,
        // won't generate a dependency on b/header.hpp, so incremental compilation will be broken.
        // TODO: Apart from dependency generation this also makes it awkward to have two files with
        //       the same name (e.g. Utils.h) in directories a/ and b/: For the b/impl.cpp to include a/header.hpp
        //       it needs to have #include "../a/header.hpp"

        konst dirs = mutableSetOf<File>()
        // First add dirs with sources, as clang by default adds directory with the source to the include path.
        workUnits.get().forEach {
            dirs.add(it.inputFile)
        }
        // Now add manually given header dirs.
        dirs.addAll(headersDirs.files)
        dirs.flatMap { dir ->
            project.fileTree(dir) {
                include("**/*.h", "**/*.hpp")
            }.files
        }
    }

    @get:Inject
    protected abstract konst workerExecutor: WorkerExecutor

    private konst platformManager = project.extensions.getByType<PlatformManager>()

    @TaskAction
    fun compile() {
        konst workQueue = workerExecutor.noIsolation()

        workUnits.get().forEach { workUnit ->
            workQueue.submit(ClangFrontendJob::class.java) {
                workingDirectory.set(this@ClangFrontend.workingDirectory)
                targetName.set(this@ClangFrontend.targetName)
                inputFile.set(workUnit.inputFile)
                outputFile.set(workUnit.outputFile)
                compilerExecutable.set(this@ClangFrontend.compiler)
                arguments.set(this@ClangFrontend.compilerFlags)
                platformManager.set(this@ClangFrontend.platformManager)
            }
        }
    }
}
