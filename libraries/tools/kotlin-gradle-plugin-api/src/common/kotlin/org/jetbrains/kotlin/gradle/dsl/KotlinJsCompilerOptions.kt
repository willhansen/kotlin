// DO NOT EDIT MANUALLY!
// Generated by org/jetbrains/kotlin/generators/arguments/GenerateGradleOptions.kt
// To regenerate run 'generateGradleOptions' task
@file:Suppress("RemoveRedundantQualifierName", "Deprecation", "DuplicatedCode")

package org.jetbrains.kotlin.gradle.dsl

interface KotlinJsCompilerOptions : org.jetbrains.kotlin.gradle.dsl.KotlinCommonCompilerOptions {

    /**
     * Disable internal declaration export
     * Default konstue: false
     */
    @get:org.gradle.api.tasks.Input
    konst friendModulesDisabled: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Define whether the `main` function should be called upon execution
     * Possible konstues: "call", "noCall"
     * Default konstue: JsMainFunctionExecutionMode.CALL
     */
    @get:org.gradle.api.tasks.Input
    konst main: org.gradle.api.provider.Property<org.jetbrains.kotlin.gradle.dsl.JsMainFunctionExecutionMode>

    /**
     * Generate .meta.js and .kjsm files with metadata. Use to create a library
     * Default konstue: true
     */
    @get:org.gradle.api.tasks.Input
    konst metaInfo: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Kind of the JS module generated by the compiler
     * Possible konstues: "plain", "amd", "commonjs", "umd"
     * Default konstue: JsModuleKind.MODULE_PLAIN
     */
    @get:org.gradle.api.tasks.Input
    konst moduleKind: org.gradle.api.provider.Property<org.jetbrains.kotlin.gradle.dsl.JsModuleKind>

    /**
     * Base name of generated files
     * Default konstue: null
     */
    @get:org.gradle.api.tasks.Optional
    @get:org.gradle.api.tasks.Input
    konst moduleName: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Don't automatically include the default Kotlin/JS stdlib into compilation dependencies
     * Default konstue: true
     */
    @get:org.gradle.api.tasks.Input
    konst noStdlib: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Destination *.js file for the compilation result
     * Default konstue: null
     */
    @Deprecated(message = "Only for legacy backend. For IR backend please use task.destinationDirectory and moduleName", level = DeprecationLevel.WARNING)
    @get:org.gradle.api.tasks.Internal
    konst outputFile: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Generate source map
     * Default konstue: false
     */
    @get:org.gradle.api.tasks.Input
    konst sourceMap: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Embed source files into source map
     * Possible konstues: "never", "always", "inlining"
     * Default konstue: null
     */
    @get:org.gradle.api.tasks.Optional
    @get:org.gradle.api.tasks.Input
    konst sourceMapEmbedSources: org.gradle.api.provider.Property<org.jetbrains.kotlin.gradle.dsl.JsSourceMapEmbedMode>

    /**
     * How to map generated names to original names (IR backend only)
     * Possible konstues: "no", "simple-names", "fully-qualified-names"
     * Default konstue: null
     */
    @get:org.gradle.api.tasks.Optional
    @get:org.gradle.api.tasks.Input
    konst sourceMapNamesPolicy: org.gradle.api.provider.Property<org.jetbrains.kotlin.gradle.dsl.JsSourceMapNamesPolicy>

    /**
     * Add the specified prefix to paths in the source map
     * Default konstue: null
     */
    @get:org.gradle.api.tasks.Optional
    @get:org.gradle.api.tasks.Input
    konst sourceMapPrefix: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Generate JS files for specific ECMA version
     * Possible konstues: "v5"
     * Default konstue: "v5"
     */
    @get:org.gradle.api.tasks.Input
    konst target: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Translate primitive arrays to JS typed arrays
     * Default konstue: true
     */
    @get:org.gradle.api.tasks.Input
    konst typedArrays: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Generated JavaScript will use ES2015 classes.
     * Default konstue: false
     */
    @get:org.gradle.api.tasks.Input
    konst useEsClasses: org.gradle.api.provider.Property<kotlin.Boolean>
}
