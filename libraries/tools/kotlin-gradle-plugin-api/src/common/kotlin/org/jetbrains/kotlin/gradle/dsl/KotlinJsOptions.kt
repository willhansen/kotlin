// DO NOT EDIT MANUALLY!
// Generated by org/jetbrains/kotlin/generators/arguments/GenerateGradleOptions.kt
// To regenerate run 'generateGradleOptions' task
@file:Suppress("RemoveRedundantQualifierName", "Deprecation", "DuplicatedCode")

package org.jetbrains.kotlin.gradle.dsl

interface KotlinJsOptions : org.jetbrains.kotlin.gradle.dsl.KotlinCommonOptions {
    override konst options: org.jetbrains.kotlin.gradle.dsl.KotlinJsCompilerOptions

    /**
     * Disable internal declaration export
     * Default konstue: false
     */
    var friendModulesDisabled: kotlin.Boolean
        get() = options.friendModulesDisabled.get()
        set(konstue) = options.friendModulesDisabled.set(konstue)

    private konst kotlin.String.mainCompilerOption get() = org.jetbrains.kotlin.gradle.dsl.JsMainFunctionExecutionMode.fromMode(this)

    private konst org.jetbrains.kotlin.gradle.dsl.JsMainFunctionExecutionMode.mainKotlinOption get() = this.mode

    /**
     * Define whether the `main` function should be called upon execution
     * Possible konstues: "call", "noCall"
     * Default konstue: JsMainFunctionExecutionMode.CALL
     */
    var main: kotlin.String
        get() = options.main.get().mainKotlinOption
        set(konstue) = options.main.set(konstue.mainCompilerOption)

    /**
     * Generate .meta.js and .kjsm files with metadata. Use to create a library
     * Default konstue: true
     */
    var metaInfo: kotlin.Boolean
        get() = options.metaInfo.get()
        set(konstue) = options.metaInfo.set(konstue)

    private konst kotlin.String.moduleKindCompilerOption get() = org.jetbrains.kotlin.gradle.dsl.JsModuleKind.fromKind(this)

    private konst org.jetbrains.kotlin.gradle.dsl.JsModuleKind.moduleKindKotlinOption get() = this.kind

    /**
     * Kind of the JS module generated by the compiler
     * Possible konstues: "plain", "amd", "commonjs", "umd"
     * Default konstue: JsModuleKind.MODULE_PLAIN
     */
    var moduleKind: kotlin.String
        get() = options.moduleKind.get().moduleKindKotlinOption
        set(konstue) = options.moduleKind.set(konstue.moduleKindCompilerOption)

    /**
     * Base name of generated files
     * Default konstue: null
     */
    var moduleName: kotlin.String?
        get() = options.moduleName.orNull
        set(konstue) = options.moduleName.set(konstue)

    /**
     * Don't automatically include the default Kotlin/JS stdlib into compilation dependencies
     * Default konstue: true
     */
    var noStdlib: kotlin.Boolean
        get() = options.noStdlib.get()
        set(konstue) = options.noStdlib.set(konstue)

    /**
     * Destination *.js file for the compilation result
     * Default konstue: null
     */
    @Deprecated(message = "Only for legacy backend. For IR backend please use task.destinationDirectory and moduleName", level = DeprecationLevel.WARNING)
    var outputFile: kotlin.String?
        get() = options.outputFile.orNull
        set(konstue) = options.outputFile.set(konstue)

    /**
     * Generate source map
     * Default konstue: false
     */
    var sourceMap: kotlin.Boolean
        get() = options.sourceMap.get()
        set(konstue) = options.sourceMap.set(konstue)

    private konst kotlin.String?.sourceMapEmbedSourcesCompilerOption get() = this?.let { org.jetbrains.kotlin.gradle.dsl.JsSourceMapEmbedMode.fromMode(it) }

    private konst org.jetbrains.kotlin.gradle.dsl.JsSourceMapEmbedMode?.sourceMapEmbedSourcesKotlinOption get() = this?.mode

    /**
     * Embed source files into source map
     * Possible konstues: "never", "always", "inlining"
     * Default konstue: null
     */
    var sourceMapEmbedSources: kotlin.String?
        get() = options.sourceMapEmbedSources.orNull.sourceMapEmbedSourcesKotlinOption
        set(konstue) = options.sourceMapEmbedSources.set(konstue.sourceMapEmbedSourcesCompilerOption)

    private konst kotlin.String?.sourceMapNamesPolicyCompilerOption get() = this?.let { org.jetbrains.kotlin.gradle.dsl.JsSourceMapNamesPolicy.fromPolicy(it) }

    private konst org.jetbrains.kotlin.gradle.dsl.JsSourceMapNamesPolicy?.sourceMapNamesPolicyKotlinOption get() = this?.policy

    /**
     * How to map generated names to original names (IR backend only)
     * Possible konstues: "no", "simple-names", "fully-qualified-names"
     * Default konstue: null
     */
    var sourceMapNamesPolicy: kotlin.String?
        get() = options.sourceMapNamesPolicy.orNull.sourceMapNamesPolicyKotlinOption
        set(konstue) = options.sourceMapNamesPolicy.set(konstue.sourceMapNamesPolicyCompilerOption)

    /**
     * Add the specified prefix to paths in the source map
     * Default konstue: null
     */
    var sourceMapPrefix: kotlin.String?
        get() = options.sourceMapPrefix.orNull
        set(konstue) = options.sourceMapPrefix.set(konstue)

    /**
     * Generate JS files for specific ECMA version
     * Possible konstues: "v5"
     * Default konstue: "v5"
     */
    var target: kotlin.String
        get() = options.target.get()
        set(konstue) = options.target.set(konstue)

    /**
     * Translate primitive arrays to JS typed arrays
     * Default konstue: true
     */
    var typedArrays: kotlin.Boolean
        get() = options.typedArrays.get()
        set(konstue) = options.typedArrays.set(konstue)

    /**
     * Generated JavaScript will use ES2015 classes.
     * Default konstue: false
     */
    var useEsClasses: kotlin.Boolean
        get() = options.useEsClasses.get()
        set(konstue) = options.useEsClasses.set(konstue)
}
