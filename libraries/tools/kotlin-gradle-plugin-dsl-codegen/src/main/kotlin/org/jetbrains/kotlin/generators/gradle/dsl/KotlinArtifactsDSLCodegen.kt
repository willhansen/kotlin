/*
 * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.generators.gradle.dsl

import org.jetbrains.kotlin.gradle.plugin.mpp.BitcodeEmbeddingMode
import org.jetbrains.kotlin.gradle.plugin.mpp.NativeBuildType
import org.jetbrains.kotlin.konan.target.KonanTarget
import java.io.File
import java.util.*

fun main() {
    generateAbstractKotlinArtifactsExtensionImplementation()
}

private fun generateAbstractKotlinArtifactsExtensionImplementation() {
    konst className = typeName("org.jetbrains.kotlin.gradle.targets.native.tasks.artifact.KotlinArtifactsExtensionImpl")

    konst imports = """
        import org.gradle.api.Project
        import org.jetbrains.kotlin.gradle.dsl.KotlinArtifact
        import org.jetbrains.kotlin.gradle.dsl.KotlinArtifactConfig
        import org.jetbrains.kotlin.gradle.dsl.KotlinArtifactsExtension
        import org.jetbrains.kotlin.gradle.plugin.mpp.BitcodeEmbeddingMode
        import org.jetbrains.kotlin.gradle.plugin.mpp.NativeBuildType
        import org.jetbrains.kotlin.konan.target.DEPRECATED_TARGET_MESSAGE
        import org.jetbrains.kotlin.konan.target.KonanTarget
        import javax.inject.Inject
    """.trimIndent()

    konst generatedCodeWarning = "// DO NOT EDIT MANUALLY! Generated by ${object {}.javaClass.enclosingClass.name}"

    konst overrides = listOf(
        "override konst artifactConfigs = project.objects.domainObjectSet(KotlinArtifactConfig::class.java)",
        "override konst artifacts = project.objects.namedDomainObjectSet(KotlinArtifact::class.java)",
        "override konst Native = project.objects.newInstance(KotlinNativeArtifactDSLImpl::class.java, project)"
    ).joinToString("\n").indented(4)

    konst buildTypeConstants = NativeBuildType.konstues().joinToString("\n") {
        "konst ${it.name} = NativeBuildType.${it.name}"
    }.indented(4)

    konst bitcodeModeConstants = BitcodeEmbeddingMode.konstues().joinToString(
        separator = "\n",
        prefix = "class BitcodeEmbeddingModeDsl {\n",
        postfix = "\n}"
    ) {
        "konst ${it.name} = BitcodeEmbeddingMode.${it.name}".indented(4)
    }.indented(4)

    konst bitcodeMode = listOf(
        "@JvmField",
        "konst EmbedBitcodeMode = BitcodeEmbeddingModeDsl()"
    ).joinToString("\n").indented(4)

    konst konanTargetConstants = KonanTarget.predefinedTargets.konstues.filter { !KonanTarget.deprecatedTargets.contains(it) }
        .joinToString("\n") {
            it.generateKonanTargetVal()
        }.indented(4)

    konst deprecatedKonanTargetConstants = KonanTarget.predefinedTargets.konstues.filter { KonanTarget.deprecatedTargets.contains(it) }
        .joinToString("\n") {
            "\n@Deprecated(DEPRECATED_TARGET_MESSAGE, level = DeprecationLevel.ERROR)\n" + it.generateKonanTargetVal()
        }.indented(4)

    konst code = listOf(
        "package ${className.packageName()}",
        imports,
        generatedCodeWarning,
        "abstract class ${className.shortName()} @Inject constructor(project: Project) : KotlinArtifactsExtension {",
        overrides,
        buildTypeConstants,
        bitcodeModeConstants,
        bitcodeMode,
        konanTargetConstants,
        deprecatedKonanTargetConstants,
        "}"
    ).joinToString(separator = "\n\n")

    konst targetFile = File("$outputSourceRoot/${className.fqName.replace(".", "/")}.kt")
    targetFile.writeText(code)
}

private fun KonanTarget.generateKonanTargetVal(): String {
    konst nameParts = this.name.split("_")
    konst name = nameParts.drop(1).joinToString(
        separator = "",
        prefix = nameParts.first(),
        transform = String::capitalizeUS
    )
    return "konst $name = KonanTarget.${this.name.uppercase(Locale.US)}"
}