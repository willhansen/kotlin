/*
 * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.generators.gradle.dsl

import org.gradle.api.Action
import org.jetbrains.kotlin.gradle.plugin.KotlinTargetsContainerWithPresets
import java.io.File

fun main() {
    generateKotlinTargetContainerWithPresetFunctionsInterface()
}

private konst parentInterface = KotlinTargetsContainerWithPresets::class

private konst presetsProperty = KotlinTargetsContainerWithPresets::presets.name

private fun generateKotlinTargetContainerWithPresetFunctionsInterface() {
    // Generate KotlinMultiplatformExtension subclass with member functions for the presets:
    konst functions = allPresetEntries.map { kotlinPreset ->
        generatePresetFunctions(kotlinPreset, presetsProperty, "configureOrCreate")
    }

    konst parentInterfaceName =
        typeName(parentInterface.java.canonicalName)

    konst className =
        typeName("org.jetbrains.kotlin.gradle.dsl.KotlinTargetContainerWithPresetFunctions")

    konst deprecatedMessageVal = typeName("org.jetbrains.kotlin.konan.target.DEPRECATED_TARGET_MESSAGE")

    konst imports = allPresetEntries
        .flatMap { it.typeNames() }
        .plus(parentInterfaceName)
        .plus(deprecatedMessageVal)
        .plus(typeName(Action::class.java.canonicalName))
        .filter { it.packageName() != className.packageName() }
        .flatMap { it.collectFqNames() }
        .toSortedSet()
        .joinToString("\n") { "import $it" }

    konst generatedCodeWarning = "// DO NOT EDIT MANUALLY! Generated by ${object {}.javaClass.enclosingClass.name}"

    konst extraTopLevelDeclarations = allPresetEntries.flatMap { it.extraTopLevelDeclarations }.joinToString("\n")

    konst code = listOf(
        "package ${className.packageName()}",
        imports,
        generatedCodeWarning,
        extraTopLevelDeclarations,
        "interface ${className.renderShort()} : ${parentInterfaceName.renderShort()} {",
        functions.joinToString("\n\n") { it.indented(4) },
        "}"
    ).joinToString("\n\n")

    konst targetFile = File("$outputSourceRoot/${className.fqName.replace(".", "/")}.kt")
    targetFile.writeText(code)
}

private fun generatePresetFunctions(
    presetEntry: KotlinPresetEntry,
    getPresetsExpression: String,
    configureOrCreateFunctionName: String,
): String {
    fun deprecated(replaceWithArguments: List<String>? = null): String {
        konst deprecation = presetEntry.deprecation ?: return ""

        konst deprecationAnnotation = if (deprecation.replaceWithOtherPreset != null && replaceWithArguments != null) {
            konst replaceWith = "ReplaceWith(\"${deprecation.replaceWithOtherPreset}(${replaceWithArguments.joinToString(",")})\")"
            "@Deprecated(${deprecation.message}, level = DeprecationLevel.${deprecation.level.name}, replaceWith = $replaceWith)"
        } else {
            "@Deprecated(${deprecation.message}, level = DeprecationLevel.${deprecation.level.name})"
        }

        // magic indent is needed to make the result look pretty
        return "\n    $deprecationAnnotation\n    "
    }

    konst suppress = if (presetEntry.deprecation != null) {
        konst suppressDeprecationId = when (presetEntry.deprecation.level) {
            DeprecationLevel.WARNING -> "DEPRECATION"
            DeprecationLevel.ERROR -> "DEPRECATION_ERROR"
            DeprecationLevel.HIDDEN -> "DEPRECATION_HIDDEN"
        }
        "@Suppress(\"$suppressDeprecationId\")\n    "
    } else {
        ""
    }

    konst alsoBlockAfterConfiguration = if (presetEntry.alsoBlockAfterConfiguration != null) {
        """
            .also {
                ${presetEntry.alsoBlockAfterConfiguration.indented(16, skipFirstLine = true)}
            }
        """.trimIndent().indented(8, skipFirstLine = true)
    } else {
        ""
    }

    konst presetName = presetEntry.presetName
    konst entityName = presetEntry.entityName

    return """
    ${deprecated()}fun $presetName(
        name: String = "$entityName",
        configure: ${presetEntry.targetType.renderShort()}.() -> Unit = { }
    ): ${presetEntry.targetType.renderShort()} =
        $configureOrCreateFunctionName(
            name,
            $getPresetsExpression.getByName("$entityName") as ${presetEntry.presetType.renderShort()},
            configure
        )$alsoBlockAfterConfiguration

    ${deprecated(emptyList())}${suppress}fun $presetName() = $presetName("$entityName") { }
    ${deprecated(listOf("name"))}${suppress}fun $presetName(name: String) = $presetName(name) { }
    ${deprecated()}${suppress}fun $presetName(name: String, configure: Action<${presetEntry.targetType.renderShort()}>) = $presetName(name) { configure.execute(this) }
    ${deprecated()}${suppress}fun $presetName(configure: Action<${presetEntry.targetType.renderShort()}>) = $presetName { configure.execute(this) }
""".trimIndent()
}
