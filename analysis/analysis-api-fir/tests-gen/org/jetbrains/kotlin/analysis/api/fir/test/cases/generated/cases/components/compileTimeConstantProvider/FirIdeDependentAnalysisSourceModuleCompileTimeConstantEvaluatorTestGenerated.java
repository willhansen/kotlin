/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.fir.test.cases.generated.cases.components.compileTimeConstantProvider;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.kotlin.analysis.api.fir.test.configurators.AnalysisApiFirTestConfiguratorFactory;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfiguratorFactoryData;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfigurator;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.TestModuleKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.FrontendKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisSessionMode;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiMode;
import org.jetbrains.kotlin.analysis.api.impl.base.test.cases.components.compileTimeConstantProvider.AbstractCompileTimeConstantEkonstuatorTest;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate")
@TestDataPath("$PROJECT_ROOT")
public class FirIdeDependentAnalysisSourceModuleCompileTimeConstantEkonstuatorTestGenerated extends AbstractCompileTimeConstantEkonstuatorTest {
    @NotNull
    @Override
    public AnalysisApiTestConfigurator getConfigurator() {
        return AnalysisApiFirTestConfiguratorFactory.INSTANCE.createConfigurator(
            new AnalysisApiTestConfiguratorFactoryData(
                FrontendKind.Fir,
                TestModuleKind.Source,
                AnalysisSessionMode.Dependent,
                AnalysisApiMode.Ide
            )
        );
    }

    @Test
    public void testAllFilesPresentInEkonstuate() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("arrayWithInc.kt")
    public void testArrayWithInc() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/arrayWithInc.kt");
    }

    @Test
    @TestMetadata("binaryExpressionWithString.kt")
    public void testBinaryExpressionWithString() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/binaryExpressionWithString.kt");
    }

    @Test
    @TestMetadata("integerLiteral_minusOne_entire.kt")
    public void testIntegerLiteral_minusOne_entire() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/integerLiteral_minusOne_entire.kt");
    }

    @Test
    @TestMetadata("integerLiteral_minusOne_justOne.kt")
    public void testIntegerLiteral_minusOne_justOne() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/integerLiteral_minusOne_justOne.kt");
    }

    @Test
    @TestMetadata("integerLiteral_plusOne_entire.kt")
    public void testIntegerLiteral_plusOne_entire() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/integerLiteral_plusOne_entire.kt");
    }

    @Test
    @TestMetadata("integerLiteral_plusOne_justOne.kt")
    public void testIntegerLiteral_plusOne_justOne() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/integerLiteral_plusOne_justOne.kt");
    }

    @Test
    @TestMetadata("interpolationWithInc.kt")
    public void testInterpolationWithInc() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/interpolationWithInc.kt");
    }

    @Test
    @TestMetadata("javaFinalField.kt")
    public void testJavaFinalField() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/javaFinalField.kt");
    }

    @Test
    @TestMetadata("javaStaticField.kt")
    public void testJavaStaticField() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/javaStaticField.kt");
    }

    @Test
    @TestMetadata("javaStaticFinalField.kt")
    public void testJavaStaticFinalField() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/javaStaticFinalField.kt");
    }

    @Test
    @TestMetadata("namedReference_const.kt")
    public void testNamedReference_const() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/namedReference_const.kt");
    }

    @Test
    @TestMetadata("namedReference_konst.kt")
    public void testNamedReference_konst() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/namedReference_konst.kt");
    }

    @Test
    @TestMetadata("namedReference_var.kt")
    public void testNamedReference_var() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/namedReference_var.kt");
    }

    @Test
    @TestMetadata("propertyInCompanionObject.kt")
    public void testPropertyInCompanionObject() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/propertyInCompanionObject.kt");
    }

    @Test
    @TestMetadata("propertyInCompanionObject_indirect.kt")
    public void testPropertyInCompanionObject_indirect() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/propertyInCompanionObject_indirect.kt");
    }

    @Test
    @TestMetadata("propertyInCompanionObject_indirect_twice.kt")
    public void testPropertyInCompanionObject_indirect_twice() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/propertyInCompanionObject_indirect_twice.kt");
    }

    @Test
    @TestMetadata("propertyInit_Byte.kt")
    public void testPropertyInit_Byte() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/propertyInit_Byte.kt");
    }

    @Test
    @TestMetadata("propertyInit_DivByOtherProperty_const.kt")
    public void testPropertyInit_DivByOtherProperty_const() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/propertyInit_DivByOtherProperty_const.kt");
    }

    @Test
    @TestMetadata("propertyInit_DivByOtherProperty_konst.kt")
    public void testPropertyInit_DivByOtherProperty_konst() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/propertyInit_DivByOtherProperty_konst.kt");
    }

    @Test
    @TestMetadata("propertyInit_DivByZero.kt")
    public void testPropertyInit_DivByZero() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/propertyInit_DivByZero.kt");
    }

    @Test
    @TestMetadata("propertyInit_Double.kt")
    public void testPropertyInit_Double() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/propertyInit_Double.kt");
    }

    @Test
    @TestMetadata("propertyInit_Float.kt")
    public void testPropertyInit_Float() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/propertyInit_Float.kt");
    }

    @Test
    @TestMetadata("propertyInit_Int.kt")
    public void testPropertyInit_Int() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/propertyInit_Int.kt");
    }

    @Test
    @TestMetadata("propertyInit_Long.kt")
    public void testPropertyInit_Long() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/propertyInit_Long.kt");
    }

    @Test
    @TestMetadata("propertyInit_UInt.kt")
    public void testPropertyInit_UInt() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/propertyInit_UInt.kt");
    }

    @Test
    @TestMetadata("stringLiteral.kt")
    public void testStringLiteral() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/stringLiteral.kt");
    }

    @Test
    @TestMetadata("string_compareTo.kt")
    public void testString_compareTo() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/string_compareTo.kt");
    }

    @Test
    @TestMetadata("string_length.kt")
    public void testString_length() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/string_length.kt");
    }

    @Test
    @TestMetadata("string_plusMany.kt")
    public void testString_plusMany() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/string_plusMany.kt");
    }

    @Test
    @TestMetadata("string_plusOnce.kt")
    public void testString_plusOnce() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/string_plusOnce.kt");
    }

    @Test
    @TestMetadata("string_plusTwice.kt")
    public void testString_plusTwice() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/string_plusTwice.kt");
    }

    @Test
    @TestMetadata("string_templateConst.kt")
    public void testString_templateConst() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/string_templateConst.kt");
    }

    @Test
    @TestMetadata("string_templateNonConst.kt")
    public void testString_templateNonConst() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/string_templateNonConst.kt");
    }

    @Test
    @TestMetadata("string_toString.kt")
    public void testString_toString() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/string_toString.kt");
    }

    @Test
    @TestMetadata("string_trimIndent.kt")
    public void testString_trimIndent() throws Exception {
        runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/string_trimIndent.kt");
    }

    @Nested
    @TestMetadata("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/incompleteCode")
    @TestDataPath("$PROJECT_ROOT")
    public class IncompleteCode {
        @Test
        public void testAllFilesPresentInIncompleteCode() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/incompleteCode"), Pattern.compile("^(.+)\\.kt$"), null, true);
        }

        @Test
        @TestMetadata("incompleteRange.kt")
        public void testIncompleteRange() throws Exception {
            runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/incompleteCode/incompleteRange.kt");
        }

        @Test
        @TestMetadata("noRightOperand.kt")
        public void testNoRightOperand() throws Exception {
            runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/incompleteCode/noRightOperand.kt");
        }

        @Test
        @TestMetadata("noRightOperandLong.kt")
        public void testNoRightOperandLong() throws Exception {
            runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/incompleteCode/noRightOperandLong.kt");
        }

        @Test
        @TestMetadata("noRightOperandUnsignedLong.kt")
        public void testNoRightOperandUnsignedLong() throws Exception {
            runTest("analysis/analysis-api/testData/components/compileTimeConstantProvider/ekonstuate/incompleteCode/noRightOperandUnsignedLong.kt");
        }
    }
}
