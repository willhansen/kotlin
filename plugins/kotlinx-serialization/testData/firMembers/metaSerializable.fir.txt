FILE: metaSerializable.kt
    @R|kotlinx/serialization/MetaSerializable|() @R|kotlin/annotation/Target|(allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.CLASS|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|)) public final annotation class MySerializable : R|kotlin/Annotation| {
        public constructor(): R|MySerializable| {
            super<R|kotlin/Any|>()
        }

    }
    @R|kotlinx/serialization/MetaSerializable|() @R|kotlin/annotation/Target|(allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.CLASS|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|)) public final annotation class MySerializableWithInfo : R|kotlin/Annotation| {
        public constructor(konstue: R|kotlin/Int|, kclass: R|kotlin/reflect/KClass<*>|): R|MySerializableWithInfo| {
            super<R|kotlin/Any|>()
        }

        public final konst konstue: R|kotlin/Int| = R|<local>/konstue|
            public get(): R|kotlin/Int|

        public final konst kclass: R|kotlin/reflect/KClass<*>| = R|<local>/kclass|
            public get(): R|kotlin/reflect/KClass<*>|

    }
    @R|MySerializable|() public final class Project1 : R|kotlin/Any| {
        public constructor(name: R|kotlin/String|, language: R|kotlin/String|): R|Project1| {
            super<R|kotlin/Any|>()
        }

        public final konst name: R|kotlin/String| = R|<local>/name|
            public get(): R|kotlin/String|

        public final konst language: R|kotlin/String| = R|<local>/language|
            public get(): R|kotlin/String|

        public final companion object Companion : R|kotlin/Any| {
            public final fun serializer(): R|kotlinx/serialization/KSerializer<Project1>|

            private constructor(): R|Project1.Companion| {
                super<R|kotlin/Any|>()
            }

        }

        public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<Project1>| {
            public final fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, konstue: R|Project1|): R|kotlin/Unit|

            public final fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|Project1|

            public final konst descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

            public final fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

            private constructor(): R|Project1.$serializer| {
                super<R|kotlin/Any|>()
            }

        }

    }
    @R|MySerializableWithInfo|(konstue = Int(123), kclass = <getClass>(Q|kotlin/String|)) public final class Project2 : R|kotlin/Any| {
        public constructor(name: R|kotlin/String|, language: R|kotlin/String|): R|Project2| {
            super<R|kotlin/Any|>()
        }

        public final konst name: R|kotlin/String| = R|<local>/name|
            public get(): R|kotlin/String|

        public final konst language: R|kotlin/String| = R|<local>/language|
            public get(): R|kotlin/String|

        public final companion object Companion : R|kotlin/Any| {
            public final fun serializer(): R|kotlinx/serialization/KSerializer<Project2>|

            private constructor(): R|Project2.Companion| {
                super<R|kotlin/Any|>()
            }

        }

        public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<Project2>| {
            public final fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, konstue: R|Project2|): R|kotlin/Unit|

            public final fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|Project2|

            public final konst descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

            public final fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

            private constructor(): R|Project2.$serializer| {
                super<R|kotlin/Any|>()
            }

        }

    }
    @R|kotlinx/serialization/Serializable|() public final class Wrapper : R|kotlin/Any| {
        public constructor(project: R|Project2|): R|Wrapper| {
            super<R|kotlin/Any|>()
        }

        @R|MySerializableWithInfo|(konstue = Int(234), kclass = <getClass>(Q|kotlin/Int|)) public final konst project: R|Project2| = R|<local>/project|
            public get(): R|Project2|

        public final companion object Companion : R|kotlin/Any| {
            public final fun serializer(): R|kotlinx/serialization/KSerializer<Wrapper>|

            private constructor(): R|Wrapper.Companion| {
                super<R|kotlin/Any|>()
            }

        }

        public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<Wrapper>| {
            public final fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, konstue: R|Wrapper|): R|kotlin/Unit|

            public final fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|Wrapper|

            public final konst descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

            public final fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

            private constructor(): R|Wrapper.$serializer| {
                super<R|kotlin/Any|>()
            }

        }

    }
    @R|kotlinx/serialization/Serializable|() @R|MySerializableWithInfo|(konstue = Int(123), kclass = <getClass>(Q|kotlin/String|)) public final class Project3 : R|kotlin/Any| {
        public constructor(name: R|kotlin/String|, language: R|kotlin/String|): R|Project3| {
            super<R|kotlin/Any|>()
        }

        public final konst name: R|kotlin/String| = R|<local>/name|
            public get(): R|kotlin/String|

        public final konst language: R|kotlin/String| = R|<local>/language|
            public get(): R|kotlin/String|

        public final companion object Companion : R|kotlin/Any| {
            public final fun serializer(): R|kotlinx/serialization/KSerializer<Project3>|

            private constructor(): R|Project3.Companion| {
                super<R|kotlin/Any|>()
            }

        }

        public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<Project3>| {
            public final fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, konstue: R|Project3|): R|kotlin/Unit|

            public final fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|Project3|

            public final konst descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

            public final fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

            private constructor(): R|Project3.$serializer| {
                super<R|kotlin/Any|>()
            }

        }

    }
    @R|kotlinx/serialization/Serializable|(with = <getClass>(Q|MySerializer|)) @R|MySerializableWithInfo|(konstue = Int(123), kclass = <getClass>(Q|kotlin/String|)) public final class Project4 : R|kotlin/Any| {
        public constructor(name: R|kotlin/String|, language: R|kotlin/String|): R|Project4| {
            super<R|kotlin/Any|>()
        }

        public final konst name: R|kotlin/String| = R|<local>/name|
            public get(): R|kotlin/String|

        public final konst language: R|kotlin/String| = R|<local>/language|
            public get(): R|kotlin/String|

        public final companion object Companion : R|kotlin/Any| {
            public final fun serializer(): R|kotlinx/serialization/KSerializer<Project4>|

            private constructor(): R|Project4.Companion| {
                super<R|kotlin/Any|>()
            }

        }

    }
    @R|MySerializableWithInfo|(konstue = Int(123), kclass = <getClass>(Q|kotlin/String|)) public sealed class TestSealed : R|kotlin/Any| {
        protected constructor(): R|TestSealed| {
            super<R|kotlin/Any|>()
        }

        @R|MySerializableWithInfo|(konstue = Int(123), kclass = <getClass>(Q|kotlin/String|)) public final class A : R|TestSealed| {
            public constructor(konstue1: R|kotlin/String|): R|TestSealed.A| {
                super<R|TestSealed|>()
            }

            public final konst konstue1: R|kotlin/String| = R|<local>/konstue1|
                public get(): R|kotlin/String|

            public final companion object Companion : R|kotlin/Any| {
                public final fun serializer(): R|kotlinx/serialization/KSerializer<TestSealed.A>|

                private constructor(): R|TestSealed.A.Companion| {
                    super<R|kotlin/Any|>()
                }

            }

            public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<TestSealed.A>| {
                public final fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, konstue: R|TestSealed.A|): R|kotlin/Unit|

                public final fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|TestSealed.A|

                public final konst descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                    public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

                public final fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

                private constructor(): R|TestSealed.A.$serializer| {
                    super<R|kotlin/Any|>()
                }

            }

        }

        @R|MySerializableWithInfo|(konstue = Int(123), kclass = <getClass>(Q|kotlin/String|)) public final class B : R|TestSealed| {
            public constructor(konstue2: R|kotlin/String|): R|TestSealed.B| {
                super<R|TestSealed|>()
            }

            public final konst konstue2: R|kotlin/String| = R|<local>/konstue2|
                public get(): R|kotlin/String|

            public final companion object Companion : R|kotlin/Any| {
                public final fun serializer(): R|kotlinx/serialization/KSerializer<TestSealed.B>|

                private constructor(): R|TestSealed.B.Companion| {
                    super<R|kotlin/Any|>()
                }

            }

            public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<TestSealed.B>| {
                public final fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, konstue: R|TestSealed.B|): R|kotlin/Unit|

                public final fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|TestSealed.B|

                public final konst descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                    public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

                public final fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

                private constructor(): R|TestSealed.B.$serializer| {
                    super<R|kotlin/Any|>()
                }

            }

        }

        public final companion object Companion : R|kotlin/Any| {
            public final fun serializer(): R|kotlinx/serialization/KSerializer<TestSealed>|

            private constructor(): R|TestSealed.Companion| {
                super<R|kotlin/Any|>()
            }

        }

    }
    @R|MySerializable|() public abstract class TestAbstract : R|kotlin/Any| {
        public constructor(): R|TestAbstract| {
            super<R|kotlin/Any|>()
        }

        @R|MySerializableWithInfo|(konstue = Int(123), kclass = <getClass>(Q|kotlin/String|)) public final class A : R|TestSealed| {
            public constructor(konstue1: R|kotlin/String|): R|TestAbstract.A| {
                super<R|TestSealed|>()
            }

            public final konst konstue1: R|kotlin/String| = R|<local>/konstue1|
                public get(): R|kotlin/String|

            public final companion object Companion : R|kotlin/Any| {
                public final fun serializer(): R|kotlinx/serialization/KSerializer<TestAbstract.A>|

                private constructor(): R|TestAbstract.A.Companion| {
                    super<R|kotlin/Any|>()
                }

            }

            public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<TestAbstract.A>| {
                public final fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, konstue: R|TestAbstract.A|): R|kotlin/Unit|

                public final fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|TestAbstract.A|

                public final konst descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                    public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

                public final fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

                private constructor(): R|TestAbstract.A.$serializer| {
                    super<R|kotlin/Any|>()
                }

            }

        }

        @R|MySerializableWithInfo|(konstue = Int(123), kclass = <getClass>(Q|kotlin/String|)) public final class B : R|TestSealed| {
            public constructor(konstue2: R|kotlin/String|): R|TestAbstract.B| {
                super<R|TestSealed|>()
            }

            public final konst konstue2: R|kotlin/String| = R|<local>/konstue2|
                public get(): R|kotlin/String|

            public final companion object Companion : R|kotlin/Any| {
                public final fun serializer(): R|kotlinx/serialization/KSerializer<TestAbstract.B>|

                private constructor(): R|TestAbstract.B.Companion| {
                    super<R|kotlin/Any|>()
                }

            }

            public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<TestAbstract.B>| {
                public final fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, konstue: R|TestAbstract.B|): R|kotlin/Unit|

                public final fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|TestAbstract.B|

                public final konst descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                    public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

                public final fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

                private constructor(): R|TestAbstract.B.$serializer| {
                    super<R|kotlin/Any|>()
                }

            }

        }

        public final companion object Companion : R|kotlin/Any| {
            public final fun serializer(): R|kotlinx/serialization/KSerializer<TestAbstract>|

            private constructor(): R|TestAbstract.Companion| {
                super<R|kotlin/Any|>()
            }

        }

    }
    @R|MySerializableWithInfo|(konstue = Int(123), kclass = <getClass>(Q|kotlin/String|)) public final enum class TestEnum : R|kotlin/Enum<TestEnum>| {
        private constructor(): R|TestEnum| {
            super<R|kotlin/Enum<TestEnum>|>()
        }

        public final static enum entry Value1: R|TestEnum|
        public final static enum entry Value2: R|TestEnum|
        public final static fun konstues(): R|kotlin/Array<TestEnum>| {
        }

        public final static fun konstueOf(konstue: R|kotlin/String|): R|TestEnum| {
        }

        public final static konst entries: R|kotlin/enums/EnumEntries<TestEnum>|
            public get(): R|kotlin/enums/EnumEntries<TestEnum>|

        public final companion object Companion : R|kotlin/Any| {
            public final fun serializer(): R|kotlinx/serialization/KSerializer<TestEnum>|

            private constructor(): R|TestEnum.Companion| {
                super<R|kotlin/Any|>()
            }

        }

        public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<TestEnum>| {
            public final fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, konstue: R|TestEnum|): R|kotlin/Unit|

            public final fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|TestEnum|

            public final konst descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

            public final fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

            private constructor(): R|TestEnum.$serializer| {
                super<R|kotlin/Any|>()
            }

        }

    }
    @R|MySerializableWithInfo|(konstue = Int(123), kclass = <getClass>(Q|kotlin/String|)) public final object TestObject : R|kotlin/Any| {
        private constructor(): R|TestObject| {
            super<R|kotlin/Any|>()
        }

        public final fun serializer(): R|kotlinx/serialization/KSerializer<TestObject>|

    }
    public final object MySerializer : R|kotlinx/serialization/KSerializer<Project4>| {
        private constructor(): R|MySerializer| {
            super<R|kotlin/Any|>()
        }

        public open override konst descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor| = R|kotlinx/serialization/descriptors/PrimitiveSerialDescriptor|(String(Project4), Q|kotlinx/serialization/descriptors/PrimitiveKind.STRING|)
            public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

        public open override fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, konstue: R|Project4|): R|kotlin/Unit| {
            ^serialize R|<local>/encoder|.R|kotlinx/serialization/encoding/Encoder.encodeString|(<strcat>(R|<local>/konstue|.R|/Project4.name|, String(:), R|<local>/konstue|.R|/Project4.language|))
        }

        public open override fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|Project4| {
            lkonst params: R|kotlin/collections/List<kotlin/String>| = R|<local>/decoder|.R|kotlinx/serialization/encoding/Decoder.decodeString|().R|kotlin/text/split|(vararg(Char(:)))
            ^deserialize R|/Project4.Project4|(R|<local>/params|.R|SubstitutionOverride<kotlin/collections/List.get: R|kotlin/String|>|(Int(0)), R|<local>/params|.R|SubstitutionOverride<kotlin/collections/List.get: R|kotlin/String|>|(Int(1)))
        }

    }
    public final fun testMetaSerializable(): R|kotlin/Unit| {
        lkonst string: R|kotlin/String| = Q|kotlinx/serialization/json/Json|.R|kotlinx/serialization/json/Json.encodeToString|<R|Project1|>(Q|Project1|.R|/Project1.Companion.serializer|(), R|/Project1.Project1|(String(name), String(lang)))
        R|kotlin/test/assertEquals|<R|kotlin/String|>(String({"name":"name","language":"lang"}), R|<local>/string|)
        lkonst reconstructed: R|Project1| = Q|kotlinx/serialization/json/Json|.R|kotlinx/serialization/json/Json.decodeFromString|<R|Project1|>(Q|Project1|.R|/Project1.Companion.serializer|(), R|<local>/string|)
        R|kotlin/test/assertEquals|<R|kotlin/String|>(String(name), R|<local>/reconstructed|.R|/Project1.name|)
        R|kotlin/test/assertEquals|<R|kotlin/String|>(String(lang), R|<local>/reconstructed|.R|/Project1.language|)
    }
    public final fun testMetaSerializableWithInfo(): R|kotlin/Unit| {
        lkonst string: R|kotlin/String| = Q|kotlinx/serialization/json/Json|.R|kotlinx/serialization/json/Json.encodeToString|<R|Project2|>(Q|Project2|.R|/Project2.Companion.serializer|(), R|/Project2.Project2|(String(name), String(lang)))
        R|kotlin/test/assertEquals|<R|kotlin/String|>(String({"name":"name","language":"lang"}), R|<local>/string|)
        lkonst reconstructed: R|Project2| = Q|kotlinx/serialization/json/Json|.R|kotlinx/serialization/json/Json.decodeFromString|<R|Project2|>(Q|Project2|.R|/Project2.Companion.serializer|(), R|<local>/string|)
        R|kotlin/test/assertEquals|<R|kotlin/String|>(String(name), R|<local>/reconstructed|.R|/Project2.name|)
        R|kotlin/test/assertEquals|<R|kotlin/String|>(String(lang), R|<local>/reconstructed|.R|/Project2.language|)
        lkonst info: R|MySerializableWithInfo| = Q|Project2|.R|/Project2.Companion.serializer|().R|SubstitutionOverride<kotlinx/serialization/KSerializer.descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|>|.R|kotlinx/serialization/descriptors/SerialDescriptor.annotations|.R|kotlin/collections/filterIsInstance|<R|MySerializableWithInfo|>().R|kotlin/collections/first|<R|MySerializableWithInfo|>()
        R|kotlin/test/assertEquals|<R|kotlin/Int|>(Int(123), R|<local>/info|.R|/MySerializableWithInfo.konstue|)
        R|kotlin/test/assertEquals|<R|kotlin/reflect/KClass<out kotlin/Any>|>(<getClass>(Q|kotlin/String|), R|<local>/info|.R|/MySerializableWithInfo.kclass|)
    }
    public final fun testMetaSerializableOnProperty(): R|kotlin/Unit| {
        lkonst info: R|MySerializableWithInfo| = Q|Wrapper|.R|/Wrapper.Companion.serializer|().R|SubstitutionOverride<kotlinx/serialization/KSerializer.descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|>|.R|kotlinx/serialization/descriptors/SerialDescriptor.getElementAnnotations|(Int(0)).R|kotlin/collections/filterIsInstance|<R|MySerializableWithInfo|>().R|kotlin/collections/first|<R|MySerializableWithInfo|>()
        R|kotlin/test/assertEquals|<R|kotlin/Int|>(Int(234), R|<local>/info|.R|/MySerializableWithInfo.konstue|)
        R|kotlin/test/assertEquals|<R|kotlin/reflect/KClass<out kotlin/Any>|>(<getClass>(Q|kotlin/Int|), R|<local>/info|.R|/MySerializableWithInfo.kclass|)
    }
    public final fun testSerializableAndMetaAnnotation(): R|kotlin/Unit| {
        lkonst string: R|kotlin/String| = Q|kotlinx/serialization/json/Json|.R|kotlinx/serialization/json/Json.encodeToString|<R|Project3|>(Q|Project3|.R|/Project3.Companion.serializer|(), R|/Project3.Project3|(String(name), String(lang)))
        R|kotlin/test/assertEquals|<R|kotlin/String|>(String({"name":"name","language":"lang"}), R|<local>/string|)
        lkonst reconstructed: R|Project3| = Q|kotlinx/serialization/json/Json|.R|kotlinx/serialization/json/Json.decodeFromString|<R|Project3|>(Q|Project3|.R|/Project3.Companion.serializer|(), R|<local>/string|)
        R|kotlin/test/assertEquals|<R|kotlin/String|>(String(name), R|<local>/reconstructed|.R|/Project3.name|)
        R|kotlin/test/assertEquals|<R|kotlin/String|>(String(lang), R|<local>/reconstructed|.R|/Project3.language|)
        lkonst info: R|MySerializableWithInfo| = Q|Project3|.R|/Project3.Companion.serializer|().R|SubstitutionOverride<kotlinx/serialization/KSerializer.descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|>|.R|kotlinx/serialization/descriptors/SerialDescriptor.annotations|.R|kotlin/collections/filterIsInstance|<R|MySerializableWithInfo|>().R|kotlin/collections/first|<R|MySerializableWithInfo|>()
        R|kotlin/test/assertEquals|<R|kotlin/Int|>(Int(123), R|<local>/info|.R|/MySerializableWithInfo.konstue|)
        R|kotlin/test/assertEquals|<R|kotlin/reflect/KClass<out kotlin/Any>|>(<getClass>(Q|kotlin/String|), R|<local>/info|.R|/MySerializableWithInfo.kclass|)
    }
    public final fun testCustomSerializerAndMetaAnnotation(): R|kotlin/Unit| {
        lkonst string: R|kotlin/String| = Q|kotlinx/serialization/json/Json|.R|kotlinx/serialization/json/Json.encodeToString|<R|Project4|>(Q|Project4|.R|/Project4.Companion.serializer|(), R|/Project4.Project4|(String(name), String(lang)))
        R|kotlin/test/assertEquals|<R|kotlin/String|>(String(name:lang), R|<local>/string|)
        lkonst reconstructed: R|Project4| = Q|kotlinx/serialization/json/Json|.R|kotlinx/serialization/json/Json.decodeFromString|<R|Project4|>(Q|Project4|.R|/Project4.Companion.serializer|(), R|<local>/string|)
        R|kotlin/test/assertEquals|<R|kotlin/String|>(String(name), R|<local>/reconstructed|.R|/Project4.name|)
        R|kotlin/test/assertEquals|<R|kotlin/String|>(String(lang), R|<local>/reconstructed|.R|/Project4.language|)
    }
    public final fun testSealed(): R|kotlin/Unit| {
        lkonst serializerA: R|kotlinx/serialization/KSerializer<TestSealed.A>| = Q|TestSealed.A|.R|/TestSealed.A.Companion.serializer|()
        lkonst serializerB: R|kotlinx/serialization/KSerializer<TestSealed.B>| = Q|TestSealed.B|.R|/TestSealed.B.Companion.serializer|()
        R|kotlin/test/assertNotNull|<R|kotlinx/serialization/KSerializer<TestSealed.A>|>(R|<local>/serializerA|)
        R|kotlin/test/assertNotNull|<R|kotlinx/serialization/KSerializer<TestSealed.B>|>(R|<local>/serializerB|)
        lkonst infoA: R|MySerializableWithInfo| = R|<local>/serializerA|.R|SubstitutionOverride<kotlinx/serialization/KSerializer.descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|>|.R|kotlinx/serialization/descriptors/SerialDescriptor.annotations|.R|kotlin/collections/filterIsInstance|<R|MySerializableWithInfo|>().R|kotlin/collections/first|<R|MySerializableWithInfo|>()
        lkonst infoB: R|MySerializableWithInfo| = R|<local>/serializerB|.R|SubstitutionOverride<kotlinx/serialization/KSerializer.descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|>|.R|kotlinx/serialization/descriptors/SerialDescriptor.annotations|.R|kotlin/collections/filterIsInstance|<R|MySerializableWithInfo|>().R|kotlin/collections/first|<R|MySerializableWithInfo|>()
        R|kotlin/test/assertEquals|<R|kotlin/Int|>(Int(123), R|<local>/infoA|.R|/MySerializableWithInfo.konstue|)
        R|kotlin/test/assertEquals|<R|kotlin/reflect/KClass<out kotlin/Any>|>(<getClass>(Q|kotlin/String|), R|<local>/infoA|.R|/MySerializableWithInfo.kclass|)
        R|kotlin/test/assertEquals|<R|kotlin/Int|>(Int(123), R|<local>/infoB|.R|/MySerializableWithInfo.konstue|)
        R|kotlin/test/assertEquals|<R|kotlin/reflect/KClass<out kotlin/Any>|>(<getClass>(Q|kotlin/String|), R|<local>/infoB|.R|/MySerializableWithInfo.kclass|)
    }
    public final fun testAbstract(): R|kotlin/Unit| {
        lkonst serializerA: R|kotlinx/serialization/KSerializer<TestAbstract.A>| = Q|TestAbstract.A|.R|/TestAbstract.A.Companion.serializer|()
        lkonst serializerB: R|kotlinx/serialization/KSerializer<TestAbstract.B>| = Q|TestAbstract.B|.R|/TestAbstract.B.Companion.serializer|()
        R|kotlin/test/assertNotNull|<R|kotlinx/serialization/KSerializer<TestAbstract.A>|>(R|<local>/serializerA|)
        R|kotlin/test/assertNotNull|<R|kotlinx/serialization/KSerializer<TestAbstract.B>|>(R|<local>/serializerB|)
        lkonst infoA: R|MySerializableWithInfo| = R|<local>/serializerA|.R|SubstitutionOverride<kotlinx/serialization/KSerializer.descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|>|.R|kotlinx/serialization/descriptors/SerialDescriptor.annotations|.R|kotlin/collections/filterIsInstance|<R|MySerializableWithInfo|>().R|kotlin/collections/first|<R|MySerializableWithInfo|>()
        lkonst infoB: R|MySerializableWithInfo| = R|<local>/serializerB|.R|SubstitutionOverride<kotlinx/serialization/KSerializer.descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|>|.R|kotlinx/serialization/descriptors/SerialDescriptor.annotations|.R|kotlin/collections/filterIsInstance|<R|MySerializableWithInfo|>().R|kotlin/collections/first|<R|MySerializableWithInfo|>()
        R|kotlin/test/assertEquals|<R|kotlin/Int|>(Int(123), R|<local>/infoA|.R|/MySerializableWithInfo.konstue|)
        R|kotlin/test/assertEquals|<R|kotlin/reflect/KClass<out kotlin/Any>|>(<getClass>(Q|kotlin/String|), R|<local>/infoA|.R|/MySerializableWithInfo.kclass|)
        R|kotlin/test/assertEquals|<R|kotlin/Int|>(Int(123), R|<local>/infoB|.R|/MySerializableWithInfo.konstue|)
        R|kotlin/test/assertEquals|<R|kotlin/reflect/KClass<out kotlin/Any>|>(<getClass>(Q|kotlin/String|), R|<local>/infoB|.R|/MySerializableWithInfo.kclass|)
    }
    public final fun testEnum(): R|kotlin/Unit| {
        lkonst serializer: R|kotlinx/serialization/KSerializer<TestEnum>| = Q|TestEnum|.R|/TestEnum.Companion.serializer|()
        R|kotlin/test/assertNotNull|<R|kotlinx/serialization/KSerializer<TestEnum>|>(R|<local>/serializer|)
        lkonst info: R|MySerializableWithInfo| = R|<local>/serializer|.R|SubstitutionOverride<kotlinx/serialization/KSerializer.descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|>|.R|kotlinx/serialization/descriptors/SerialDescriptor.annotations|.R|kotlin/collections/filterIsInstance|<R|MySerializableWithInfo|>().R|kotlin/collections/first|<R|MySerializableWithInfo|>()
        R|kotlin/test/assertEquals|<R|kotlin/Int|>(Int(123), R|<local>/info|.R|/MySerializableWithInfo.konstue|)
        R|kotlin/test/assertEquals|<R|kotlin/reflect/KClass<out kotlin/Any>|>(<getClass>(Q|kotlin/String|), R|<local>/info|.R|/MySerializableWithInfo.kclass|)
    }
    public final fun testObject(): R|kotlin/Unit| {
        lkonst serializer: R|kotlinx/serialization/KSerializer<TestObject>| = Q|TestObject|.R|/TestObject.serializer|()
        R|kotlin/test/assertNotNull|<R|kotlinx/serialization/KSerializer<TestObject>|>(R|<local>/serializer|)
        lkonst info: R|MySerializableWithInfo| = R|<local>/serializer|.R|SubstitutionOverride<kotlinx/serialization/KSerializer.descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|>|.R|kotlinx/serialization/descriptors/SerialDescriptor.annotations|.R|kotlin/collections/filterIsInstance|<R|MySerializableWithInfo|>().R|kotlin/collections/first|<R|MySerializableWithInfo|>()
        R|kotlin/test/assertEquals|<R|kotlin/Int|>(Int(123), R|<local>/info|.R|/MySerializableWithInfo.konstue|)
        R|kotlin/test/assertEquals|<R|kotlin/reflect/KClass<out kotlin/Any>|>(<getClass>(Q|kotlin/String|), R|<local>/info|.R|/MySerializableWithInfo.kclass|)
    }
    public final fun box(): R|kotlin/String| {
        R|/testMetaSerializable|()
        R|/testMetaSerializableWithInfo|()
        R|/testMetaSerializableOnProperty|()
        R|/testSealed|()
        R|/testAbstract|()
        R|/testEnum|()
        R|/testObject|()
        ^box String(OK)
    }
